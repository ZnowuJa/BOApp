@* Note Edit Component *@

@implements IDialogContentComponent<NoteVm>


<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync"
                  Disabled="@(!_editContext.Validate())">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

<FluentDialogBody>
    <EditForm EditContext="_editContext">
        <FluentValidationValidator @ref="_fluentValidator" />
        @* <ValidationSummary /> *@
        <FluentTextArea @bind-Value="@Content.Text" Placeholder="Enter name">Name:</FluentTextArea>
        <FluentValidationMessage For="@(() => Content.Text)" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="validation-error"><p style="color:red;">@errorMessage</p></div>
        }
    </EditForm>
</FluentDialogBody>

@code {

    [Parameter]
    public NoteVm Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private EditContext _editContext;

    private FluentValidationValidator? _fluentValidator;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Content);
        base.OnInitialized();
    }

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
