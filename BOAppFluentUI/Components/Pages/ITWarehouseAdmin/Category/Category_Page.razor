@page "/categories"
@using Application.CQRS.ITWarehouseCQRS.Categories
@using Application.CQRS.ITWarehouseCQRS.Categories.Queries
@using Application.CQRS.ITWarehouseCQRS.Categories.Commands
@using Application.CQRS.ITWarehouseCQRS.CategoryTypes
@using BOAppFluentUI.Components.Pages.ITWarehouseAdmin.Category
@using MediatR
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Policy = "Technician")]

@inject IMediator _mediator
@inject ILogger<Category_Page> _logger
@inject IDialogService _dialogService
@inject IToastService _toastService


<h3>Categories</h3>

@if (cats == null)
{
    <FluentProgressRing>Loading...</FluentProgressRing>

}
else
{

    <FluentDataGrid Items="@cats" TGridItem="CategoryVm" GridTemplateColumns="50px repeat(4, 1fr)">
        <PropertyColumn Property="@(c => c.Id)" Sortable="true" Align="Align.Start" Tooltip="true"  />
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Align="Align.Start" Tooltip="true" Title="Category Name" />
        <PropertyColumn Property="@(c => c.Prefix)" Sortable="true" Align="Align.Start" Tooltip="true" />
        <PropertyColumn Property="@(c => c.LeadingZeros)" Sortable="true" Align="Align.Start" Tooltip="true" />
        <PropertyColumn Property="@(c => c.CategoryTypeVm.Name)" Sortable="true" Align="Align.Start" Tooltip="true" Title="Category Type"/>
        <TemplateColumn Title="Actions" Align="Align.End">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.BookOpen())" OnClick="@(() => View(context))" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(() => EditCatType(context))" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => Delete(context))" />

        </TemplateColumn>
    </FluentDataGrid>
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddPanel())" />
}



@code {
    private IQueryable<CategoryVm> cats;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    private async Task Load()
    {
        cats = await _mediator.Send(new GetAllCategoriesQuery());

        Console.WriteLine(cats.Count());
    }
    private async Task EditCatType(CategoryVm ctVm)
    {
        ToastIntent intent;
        string message = string.Empty;
        int i = 0;

        var data = ctVm;
        var dialog = await _dialogService.ShowDialogAsync<Category_Edit_Component>(data, new DialogParameters()
            {
                Height = "240px",
                Width = "720px",
                Title = data.Id > 0 ? "Update Category Title" : "Create new Category",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });
        var result = await dialog.Result;


        if (!result.Cancelled && result.Data != null)
        {
            ctVm = (CategoryVm)result.Data;
            if (ctVm.Id > 0)
            {
                i = await _mediator.Send(new UpdateCategoryCommand(ctVm.Id, ctVm.Name, ctVm.Prefix, ctVm.LeadingZeros, ctVm.CategoryTypeVm));
                intent = ToastIntent.Success;
                message = "Category has been updated!";
            }
            else if (ctVm.Id == 0)
            {
                
                i = await _mediator.Send(new CreateCategoryCommand(ctVm.Name, ctVm.Prefix, ctVm.LeadingZeros, ctVm.CategoryTypeVm));
                intent = ToastIntent.Success;
                message = "Category has been Created!";
            }
            else
            {
                intent = ToastIntent.Warning;
                message = "Something went realy wrong!";
            }

        }
        else if (result.Cancelled)
        {
            intent = ToastIntent.Info;
            message = "Update Cancelled...";
        }
        else
        {
            intent = ToastIntent.Error;
            message = "Something went wrong!!!";
        }


        await Load();
        _toastService.ShowToast(intent, message, 3000);

        Console.WriteLine(result.GetType());
    }

    private async Task AddPanel()
    {
        CategoryVm ctVm = new CategoryVm { Id = 0, Name = string.Empty, Prefix = string.Empty, CategoryTypeVm = new CategoryTypeVm(), LeadingZeros = 0 };
        // await EditCatTypePanel(ctVm);
        await EditCatType(ctVm);
        
    }

    // private async Task EditCatTypePanel(CategoryVm ctVm)
    // {
    //     ToastIntent intent;
    //     string message = string.Empty;
    //     int i = 0;

    //     var data = ctVm;
    //     var dialog = await _dialogService.ShowPanelAsync<Category_Edit_Component>(data, new DialogParameters()
    //         {
    //             Height = "240px",
    //             Width = "720px",
    //             Title = data.Id > 0 ? "Update Category Title" : "Create new Category",
    //             PreventDismissOnOverlayClick = false,
    //             PreventScroll = true,
    //         });
    //     var result = await dialog.Result;


    //     if (!result.Cancelled && result.Data != null)
    //     {
    //         ctVm = (CategoryVm)result.Data;
    //         if (ctVm.Id > 0)
    //         {
    //             i = await _mediator.Send(new UpdateCategoryCommand(ctVm.Id, ctVm.Title, ctVm.Prefix, ctVm.CategoryTypeVm));
    //             intent = ToastIntent.Success;
    //             message = "Category has been updated!";
    //         }
    //         else if (ctVm.Id == 0)
    //         {
    //             i = await _mediator.Send(new CreateCategoryCommand(ctVm.Title, ctVm.Prefix, ctVm.CategoryTypeVm));
    //             intent = ToastIntent.Success;
    //             message = "Category has been Created!";
    //         }
    //         else
    //         {

    //             intent = ToastIntent.Warning;
    //             message = "Something went realy wrong!";
    //         }

    //     }
    //     else if (result.Cancelled)
    //     {
    //         intent = ToastIntent.Info;
    //         message = "Changes Cancelled...";
    //     }
    //     else
    //     {
    //         intent = ToastIntent.Error;
    //         message = "Something went wrong!!!";
    //     }


    //     await Load();
    //     _toastService.ShowToast(intent, message, 3000);

    //     Console.WriteLine(result.GetType());
    // }

    private async Task View(CategoryVm catType)
    {
        await _dialogService.ShowInfoAsync(message: $"Category type id: {catType.Id}, name: {catType.Name}, leading zeros: {catType.LeadingZeros}");
    }

    private async Task Add()
    {
        CategoryVm ctVm = new CategoryVm { Id = 0, Name = string.Empty, Prefix = string.Empty, LeadingZeros = 0, CategoryTypeVm = new CategoryTypeVm() };
        await EditCatType(ctVm);
    }

    private async Task Delete(CategoryVm ctVm)
    {
        ToastIntent intent;
        string message = string.Empty;

        var i = await _mediator.Send(new DeleteCategoryCommand(ctVm.Id));

        if (i == ctVm.Id)
        {
            intent = ToastIntent.Success;
            message = "Category has been deleted!";
        }
        else
        {
            intent = ToastIntent.Error;
            message = "Something went wrong!!!";
        }
        await Load();
        _toastService.ShowToast(intent, message, 3000);

    }
}
