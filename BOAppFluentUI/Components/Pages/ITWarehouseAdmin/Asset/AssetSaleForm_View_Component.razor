@using Application.DTOs
@using Application.ViewModels.General
@using Application.Forms.IT

@inject IJSRuntime JS
@inject NavigationManager _navigationManager
@implements IDialogContentComponent<ITSaleFormVm>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Left">
        <p></p>
        <div>
            <table>
                <tr>
                    <td class="table-header">Number:</td>
                    <td class="table-data">@Content.Number</td>
                    <td class="table-header">Status:</td>
                    <td class="table-data">@Content.Status</td>
                    <td class="table-header">Created by:</td>
                    <td class="table-data">@Content.OperatorName</td>
                </tr>
            </table>
        </div>
        <p></p>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentDataGrid Items="@AssetsList" TGridItem="AssetDTO" Pagination="@pagination" AutoFit="true"
                    ResizableColumns="true">
        <PropertyColumn Property="@(p => p.AssetTagNumber)" Sortable="true"/>
        <PropertyColumn Property="@(p => p.SerialNumber)" Sortable="true"/>
    </FluentDataGrid>
    <FluentPaginator State="@pagination"/>
    @if (Content.FormFiles.Any())
    {
        <FluentDataGrid Items="@formFiles" TGridItem="FormFileVm" Pagination="@pagination" AutoFit="true"
                        ResizableColumns="true">

            <PropertyColumn Property="@(p => p.OriginalFileName)" Sortable="true"/>
            <PropertyColumn Property="@(p => p.FormPurpose)" Sortable="true"/>
            <TemplateColumn Title="Actions" Align="Align.End">
                @{
                    var viewId = $"viewid-{context.Id}";
                    // var editId = $"editid-{context.Id}";
                    var deletefileId = $"deletefile-{context.Id}";
                    // var addId = $"addid-{context.Id}";
                }
                <FluentButton Id="@viewId" IconEnd="@(new Icons.Filled.Size20.Open())"
                              OnClick="@(() => View(context, "ITSaleForm"))"/>
            </TemplateColumn>

        </FluentDataGrid>
    }
</FluentDialogBody>

@code {
    [Parameter] public ITSaleFormVm Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    
    private IQueryable<AssetDTO>? AssetsList { get; set; }
    private IQueryable<FormFileVm> formFiles { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AssetsList = Content.Assets.AsQueryable();
        formFiles = Content.FormFiles.AsQueryable();
    }
    
    private async Task View(FormFileVm item, string folder)
    {
        if (item != null)
        {
            // Extract the relative path from the DstPath
            string relativePath = $"{folder}/{item.DstFileName}".Replace("\\", "/");

            // Generate the URL
            string url = _navigationManager.BaseUri + relativePath;

            // Navigate to the URL in a new tab
            await JS.InvokeVoidAsync("open", url, "_blank");
        }
    }
}
