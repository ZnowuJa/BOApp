@* ProductDTO Edit Component *@
@using Application.CQRS.ITWarehouseCQRS.AssetHistories.Queries
@using Application.CQRS.ITWarehouseCQRS.Employees.Queries
@using Application.CQRS.ITWarehouseCQRS.Warehouses.Queries
@using Application.CQRS.ITWarehouseCQRS.EmployeeTypes.Queries
@using Application.DTOs
@using Application.ViewModels.General
@using Application.ITWarehouseCQRS.Departments.Queries
@using Application.Interfaces
@using System.Security.Claims

@inject IMediator _mediator
@inject ILogger<Asset_Edit_Component> _logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDialogContentComponent<AssetDTO>
@implements IDisposable

@if (editable == true)
{
        <FluentProgressRing>Loading...</FluentProgressRing>
}
else
{

}
@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync"
                  Disabled="@(!_editContext.Validate())">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>
@* Body *@
<FluentDialogBody Orientation="Orientation.Horizontal">
    <EditForm EditContext="_editContext">


        <FluentGrid Justify="@Justification">
            @* AssetTagNumber *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    <FluentTextField Id="AssetTagNumber" @bind-Value="@Content.AssetTagNumber"
                                     Disabled="@editmode"
                                     Placeholder="Asset Number">
                        AssetTagNumber:
                    </FluentTextField>
                    <FluentValidationMessage For="@(() => Content.AssetTagNumber)" />

                </div>
            </FluentGridItem>
            @* Serial Number *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    <FluentTextField Id="SerialNumber" @bind-Value="@Content.SerialNumber"
                                     Disabled="@editmode"
                                     Label="SerialNumber:"
                                     Placeholder="Serial number">
                    </FluentTextField>
                    <FluentValidationMessage For="@(() => Content.SerialNumber)" />

                </div>
            </FluentGridItem>
            @* Part ComboBox *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    @{
                            <FluentCombobox TOption="PartVm"
                                            Autocomplete="ComboboxAutocomplete.Inline"
                                            Label="Part:"
                                            Items="@itemPartsList"
                                            Disabled="@editmode"
                                            Id="PartId"
                                            Width="150px"
                                            Height="250px"
                                            OptionValue="@(p => p.Id.ToString())"
                                            OptionText="@(p => p.Name)"
                                            @bind-SelectedOption="@Content.partVm"
                                            ValueChanged="HandlePartChange" />
                    }
                    <FluentValidationMessage For="@(() => Content.PartVmId)" />

                </div>
            </FluentGridItem>
            @* State *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    @{
                            <FluentCombobox TOption="StateVm"
                                            Autocomplete="ComboboxAutocomplete.Inline"
                                            Label="Select state:"
                                            Disabled="@editable"
                                            Items="@itemStatesList"
                                            Id="StateId"
                                            Width="150px"
                                            Height="250px"
                                            OptionValue="@(p => p.Id.ToString())"
                                            OptionText="@(p => p.Name)"
                                            @bind-SelectedOption="@Content.stateVm"
                                            ValueChanged="HandleStateChange" />

                    }
                    <FluentValidationMessage For="@(() => Content.StateVmId)" />

                </div>
            </FluentGridItem>
            @* Assignee *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                            <div>
                                <FluentAutocomplete TOption="IAssigneeVm"
                                                    AutoComplete="on"
                                                    Label="Select assignment..."
                                                    Disabled="@editable"
                                                    OnOptionsSearch="OnAssigneeSearch"
                                                    Placeholder="Select assignee"
                                                    MaximumSelectedOptions="1"
                                                    OptionText="@(p => p.LongName + ' '  + @p.Id)"
                                                    Value="@Content.AssigneeVM.LongName"
                                                    @bind-SelectedOptions="@SelectedAssignee"
                                                    Height="550px"
                                                    Width="200px"
                                                    ValueChanged="@HandleAssigneeChange" />
                            </div>
                    }
                </div>
            </FluentGridItem>
            @* Warehouse *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                            <FluentCombobox TOption="WarehouseVm"
                                            Autocomplete="ComboboxAutocomplete.Inline"
                                            Label="Select warehouse:"
                                            Disabled="@editable"
                                            Items="@itemWarehousesList"
                                            Id="WareHId"
                                            Width="150px"
                                            Height="250px"
                                            OptionValue="@(p => p.Id.ToString())"
                                            OptionText="@(p => p.Name)"
                                            @bind-SelectedOption="@Content.warehouseVm" />
                        // ValueChanged = "HandleWarehouseChange"
                    }
                    <FluentValidationMessage For="@(() => Content.WarehouseVmId)" />
                </div>
            </FluentGridItem>
            @* IMEI *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    <FluentTextField Id="Imei" @bind-Value="@Content.Imei"
                                     Label="Imei:"
                                     Placeholder="Imei">
                    </FluentTextField>

                </div>
            </FluentGridItem>
            @* MAC *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">

                    <FluentTextField Id="MAC" @bind-Value="@Content.Mac"
                                     Label="Mac:"
                                     Placeholder="Mac">
                    </FluentTextField>

                </div>
            </FluentGridItem>
            @* Price *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentNumberField Id="Price" @bind-Value="@Content.Price" Disabled="@editmode" Placeholder="Price..."> Price: </FluentNumberField>

                </div>
            </FluentGridItem>
            @* Currency *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                            <FluentCombobox TOption="CurrencyVm"
                                            Autocomplete="ComboboxAutocomplete.Inline"
                                            Disabled="@editmode"
                                            Label="Select currency:"
                                            Items="@itemCurrenciesList"
                                            Id="CurrencyId"
                                            Width="150px"
                                            Height="250px"
                                            OptionValue="@(p => p.Id.ToString())"
                                            OptionText="@(p => p.Name)"
                                            @bind-SelectedOption="@Content.currencyVm"
                                            ValueChanged="HandleCurrencyChange" />

                            <FluentValidationMessage For="@(() => Content.CurrencyVmId)" />
                    }

                </div>
            </FluentGridItem>
            @* Invoice *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    @{
                            <FluentCombobox TOption="InvoiceVm"
                                            Autocomplete="ComboboxAutocomplete.Inline"
                                            Disabled="@editmode"
                                            Label="Select invoice:"
                                            Items="@itemInvoicesList"
                                            Id="InvoiceId"
                                            Width="150px"
                                            Height="250px"
                                            OptionValue="@(p => p.Id.ToString())"
                                            OptionText="@(p => p.Number.ToString())"
                                            @bind-SelectedOption="@Content.invoiceVm"
                                            ValueChanged="HandleInvoiceChange" />

                    }

                    <FluentValidationMessage For="@(() => Content.InvoiceVmId)" />
                </div>
            </FluentGridItem>
            @* Purchase Date *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentDatePicker Id="PurchDate"
                                      Disabled="@editmode"
                                      Label="Purchase Date:"
                                      @bind-Value="@Content.PurchaseDate"
                                      Placeholder="Enter purchase date">
                        Purchase date:
                    </FluentDatePicker>
                    <FluentValidationMessage For="@(() => Content.PurchaseDate)" />
                </div>
            </FluentGridItem>
            @* Warranty Date *@
            <FluentGridItem xs="6" sm="4">
                <div class="card">
                    <FluentDatePicker Id="WarrUntil"
                                      Disabled="@editmode"
                                      Label="Warranty to:"
                                      @bind-Value="@Content.WarrantyUntil"
                                      Placeholder="Enter date">
                        Warranty date:
                    </FluentDatePicker>
                    <FluentValidationMessage For="@(() => Content.WarrantyUntil)" />
                </div>
            </FluentGridItem>
            @if (Content.EndOfSupport != null)
            {
                @* EndOfSupport Date *@
                    <FluentGridItem xs="6" sm="4">
                        <div class="card">
                            <FluentDatePicker Id="EOSID"
                                              Disabled="@editmode"
                                              Label="End of support:"
                                              @bind-Value="@Content.EndOfSupport"
                                              Placeholder="Enter date">
                                End of support:
                            </FluentDatePicker>
                            <FluentValidationMessage For="@(() => Content.EndOfSupport)" />
                        </div>
                    </FluentGridItem>
            }
            @if (Content.Leasing)
            {
                @* Warranty Date *@
                    <FluentGridItem xs="6" sm="4">
                        <div class="card">
                            <FluentDatePicker Id="EOCID"
                                              Disabled="@editmode"
                                              Label="End of contract:"
                                              @bind-Value="@Content.EndOfContract"
                                              Placeholder="Enter date">
                                End of contract:
                            </FluentDatePicker>
                            <FluentValidationMessage For="@(() => Content.EndOfContract)" />
                        </div>
                    </FluentGridItem>
            }
        </FluentGrid>
        @if (itemAssetHistory != null)
        {
                <p></p>
                <p></p>
                <FluentLabel Typo="Typography.PaneHeader">
                    Asset history:
                </FluentLabel>
                <FluentDataGrid Items="itemAssetHistory" TGridItem="AssetHistoryVm" GridTemplateColumns="80px repeat(4, 0.75fr)" ResizableColumns=true Pagination="@paginationHistory">

                    <PropertyColumn Property="@(c => c.Id)" Sortable="true" Align="Align.Start" Tooltip="true" Title="Id"> </PropertyColumn>
                    <PropertyColumn Property="@(c => c.ChangeDate.ToLongDateString())" Sortable="true" Align="Align.Start" Tooltip="true" Title="Name"> </PropertyColumn>
                    <PropertyColumn Property="@(c => c.ALongName)" Sortable="true" Align="Align.Start" Tooltip="true" Title="A Name"> </PropertyColumn>
                    <PropertyColumn Property="@(c => c.BLongName)" Sortable="true" Align="Align.Start" Tooltip="true" Title="B Name"> </PropertyColumn>
                    <PropertyColumn Property="@(c => c.ModifiedBy)" Sortable="true" Align="Align.Start" Tooltip="true" Title="ModifiedBy"> </PropertyColumn>
                </FluentDataGrid>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
                <div class="validation-error"><p style="color:red;">@errorMessage</p></div>
        }

    </EditForm>
</FluentDialogBody>



@code {
    #region Properties
    [Parameter]
    public AssetDTO Content { get; set; } = default!;
    [Parameter]
    // public IQueryable<IAssigneeVm> Assgns { get; set; } = default;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    JustifyContent Justification = JustifyContent.FlexStart;

    private EditContext _editContext;
    private bool editmode = true;
    private bool editable = true;
    private FluentValidationValidator? _fluentValidator;
    private string errorMessage;

    private IQueryable<PartVm> itemPartsList { get; set; }
    private IQueryable<InvoiceVm> itemInvoicesList { get; set; }
    private IQueryable<StateVm> itemStatesList { get; set; }
    private IQueryable<EmployeeVm> itemEmployeesList { get; set; }
    private IQueryable<DepartmentVm> itemDepartmentsList { get; set; }
    private IQueryable<WarehouseVm> itemWarehousesList { get; set; }
    private IQueryable<CurrencyVm> itemCurrenciesList { get; set; }
    private IQueryable<IAssigneeVm> itemAssigneesList { get; set; }
    private IQueryable<AssetHistoryVm> itemAssetHistory { get; set; }
    private bool firstInit = true;

    string empFilter = string.Empty;

    private IEnumerable<IAssigneeVm> SelectedAssignee = Array.Empty<IAssigneeVm>();
    PaginationState paginationHistory = new PaginationState { ItemsPerPage = 3 };

    private ClaimsPrincipal? user { get; set; }
    private string username { get; set; }

    private CancellationTokenSource cts = new CancellationTokenSource();



    #endregion Properties

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Content);

        itemEmployeesList = await _mediator.Send(new GetAllEmployeesForSelectQuery());
        itemDepartmentsList = await _mediator.Send(new GetAllDepartmentsQuery());

        var assignees = new List<IAssigneeVm>();
        assignees.AddRange(itemEmployeesList.Select(employee => (IAssigneeVm)new EmployeeVm { Id = employee.EnovaEmpId, LongName = employee.LongName, typeName = "EmployeeVm" }));
        assignees.AddRange(itemDepartmentsList.Select(department => (IAssigneeVm)new DepartmentVm { Id = department.Id, LongName = department.LongName, typeName = "DepartmentVm" }));
        // itemAssigneesList = assignees.AsQueryable();
        itemAssigneesList = assignees.AsQueryable();


        if (Content.Id > 0)
        {

            editmode = true;
            itemPartsList = await _mediator.Send(new GetAllPartsQuery());
            itemInvoicesList = await _mediator.Send(new GetAllInvoicesQuery());
            itemStatesList = await _mediator.Send(new GetAllStatesQuery());

            itemWarehousesList = await _mediator.Send(new GetAllWarehousesQuery());
            itemCurrenciesList = await _mediator.Send(new GetAllCurrenciesQuery());

            SelectedAssignee = SelectedAssignee.Append(Content.AssigneeVM);

            itemAssetHistory = await _mediator.Send(new GetAllAssetHistoryByAssetIdQuery(Content.Id));

        }
        // GetUserName();

        firstInit = false;
        editable = false;

    }

    private async Task SaveAsync()
    {
        try
        {
            var selectedAssignee = SelectedAssignee.FirstOrDefault();
            if (selectedAssignee != null)
            {
                var newEmpl = new EmployeeVm();
                var newDept = new DepartmentVm();
                var wh = new WarehouseVm();

                Content.AssigneeVmId = selectedAssignee.Id;
                Content.AssigneeVmName = selectedAssignee.LongName;
                Content.AssigneeVmType = selectedAssignee.typeName;

                if (Content.AssigneeVmType == "EmployeeVm")
                {
                    newEmpl = itemEmployeesList.Where(p => p.EnovaEmpId == Content.AssigneeVmId).FirstOrDefault();
                    wh = itemWarehousesList.Where(p => p.Number.ToString() == newEmpl.SapNumber).FirstOrDefault();
                }
                else if (Content.AssigneeVmType == "DepartmentVm")
                {
                    newDept = itemDepartmentsList.Where(p => p.Id == Content.AssigneeVmId).FirstOrDefault();
                    wh = itemWarehousesList.Where(p => p.Number.ToString() == newDept.SapNumber).FirstOrDefault();
                }

                Content.warehouseVm = wh;
                Content.WarehouseVmId = wh.Id;
                Content.WarehouseVmName = wh.Name;
                Content.WarehouseVmNumber = wh.Number.ToString();

                if (Content.StateVmId == 1)
                {
                    var stateProd = itemStatesList.Where(p => p.Id == 2).FirstOrDefault();
                    Content.stateVm = stateProd;
                    Content.StateVmId = stateProd.Id;
                    Content.StateVmName = stateProd.Name;
                }


            }
            else
            {
                throw new Exception("No assignee selected");
            }

        }
        catch (Exception ex)
        {
            errorMessage = "Please select new Assignee... \n";
            return;
        }
        Console.WriteLine($"Id :: {Content.Id} | PartVmId :: {Content.PartVmId} | InvoiceId :: {Content.InvoiceVmId} | StateVmId :: {Content.StateVmId} | EmployeeVmId :: {Content.AssigneeVmId} | WarehouseVmId :: {Content.WarehouseVmId} | CurrencyVmId :: {Content.CurrencyVmId}");

        await Dialog.CloseAsync(Content);

    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
    private void OnAssigneeSearch(OptionsSearchEventArgs<IAssigneeVm> e)
    {
        if (e.Text != null)
        {
            e.Items = itemAssigneesList.Where(a => a.LongName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }

    }
    private void HandlePartChange(string newValue)
    {
        Content.PartVmId = Content.partVm.Id;

        // if (Content.partVm.Id != null)
        // {
        //     Content.PartVmId = Content.partVm.Id;
        // }

    }
    private void HandleCurrencyChange(string newValue)
    {
        if (Content.currencyVm.Id != null)
        {
            Content.CurrencyVmId = Content.currencyVm.Id;
        }
        else
        {
            Content.CurrencyVmId = 1;
        }

    }
    private async Task HandleAssigneeChange(string newValue)
    {
        Console.WriteLine();
        if (newValue != null && newValue != "" && Content.AssigneeVmType != "Unknown")
        {
            if (firstInit)
            {
                return;
            }

            if (Content.AssigneeVM != null)
            {
                Console.WriteLine("HANDLEASSIGNEECHANGE : ", newValue);
                var newEmpl = new EmployeeVm();
                var newDept = new DepartmentVm();
                var wh = new WarehouseVm();

                Content.AssigneeVmId = Content.AssigneeVM.Id;
                Content.AssigneeVmName = Content.AssigneeVM.LongName;
                Content.AssigneeVmType = Content.AssigneeVM.typeName;

                if (Content.AssigneeVmType == "EmployeeVm")
                {
                    newEmpl = itemEmployeesList.Where(p => p.EnovaEmpId == Content.AssigneeVmId).FirstOrDefault();
                    wh = itemWarehousesList.Where(p => p.Number.ToString() == newEmpl.SapNumber).FirstOrDefault();
                }
                else if (Content.AssigneeVmType == "DepartmentVm")
                {
                    newDept = itemDepartmentsList.Where(p => p.Id == Content.AssigneeVmId).FirstOrDefault();
                    wh = itemWarehousesList.Where(p => p.Number.ToString() == newDept.SapNumber).FirstOrDefault();
                }

                Content.warehouseVm = wh;
                Content.WarehouseVmId = wh.Id;
                Content.WarehouseVmName = wh.Name;
                Content.WarehouseVmNumber = wh.Number.ToString();


                if (Content.StateVmId == 1)
                {
                    var stateProd = itemStatesList.Where(p => p.Id == 2).FirstOrDefault();
                    Content.stateVm = stateProd;
                    Content.StateVmId = stateProd.Id;
                    Content.StateVmName = stateProd.Name;
                }


            }
        }


    }
    private void HandleStateChange(string newValue)
    {
        if (Content.stateVm.Id != null)
        {
            Content.StateVmId = Content.stateVm.Id;
        }

    }
    private void HandleInvoiceChange(string newValue)
    {
        if (Content.invoiceVm.Id != null)
        {
            Content.InvoiceVmId = Content.invoiceVm.Id;
        }

    }
    private void HandleWarehouseChange(string newValue)
    {
        if (Content.warehouseVm.Id != null)
        {
            Content.WarehouseVmId = Content.warehouseVm.Id;
        }

    }
    private async Task EmployeeSearch(OptionsSearchEventArgs<EmployeeVm> e)
    {
        e.Items = itemEmployeesList.Where(i => i.LongName.Contains(e.Text, StringComparison.CurrentCultureIgnoreCase)).OrderBy(i => i.LastName);
    }
    private void HandleClearFilter(ref string filter) => filter = string.IsNullOrWhiteSpace(filter) ? string.Empty : filter;
    private void HandleFilter(ref string filter, ChangeEventArgs args) => filter = args.Value is string value ? value : string.Empty;
    private async Task GetUserName()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;
        var claimType = "name"; // or use ClaimTypes.Title
        var usernameClaim = user.Claims.FirstOrDefault(c => c.Type == claimType);
        if (usernameClaim != null)
        {
            username = usernameClaim.Value;
        }
        else
        {
            username = "unknown";
            Console.WriteLine($"No claim of type {claimType} found.");
        }

    }
    public void Dispose()
    {
        cts.Cancel();
    }
}


