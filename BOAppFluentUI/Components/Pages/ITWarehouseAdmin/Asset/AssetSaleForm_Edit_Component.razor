@* <h3>AssetSaleForm_Edit_Component</h3> *@


@using Application.CQRS.ITWarehouseCQRS.Assets.Queries
@using Application.CQRS.ITWarehouseCQRS.Employees.Queries
@using Application.DTOs
@using Application.Forms.IT
@using System.Linq
@using Application.CQRS.General.FormFiles.Commands
@using Application.CQRS.ITWarehouseCQRS.Assets
@using Application.CQRS.ITWarehouseCQRS.Companies.Queries
@using Application.Interfaces
@using Microsoft.EntityFrameworkCore.Metadata
@using Microsoft.Graph.Models
@using ApprovalVm = Application.ViewModels.General.ApprovalVm
@using Application.ViewModels.General

@inject IMediator _mediator;
@inject IJSRuntime JS
@inject IDialogService _dialogService
@inject IToastService _toastService
@* @inject ISessionService _sessionService *@
@* @inject ICircuitService _circuitService *@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFileService _fileService
@inject NavigationManager _navigationManager
@inject ILogger<AssetSaleForm_Edit_Component> _logger;
@implements IDialogContentComponent<ITSaleFormVm>


@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Left">
        <p></p>
        <div>
            <table>
                <tr>
                    <td class="table-header">Number:</td>
                    <td class="table-data">@Content.Number</td>
                    <td class="table-header">Status:</td>
                    <td class="table-data">@Content.Status</td>
                    <td class="table-header">Created by:</td>
                    <td class="table-data">@Content.OperatorName</td>
                </tr>
            </table>
        </div>
        <p></p>
    </FluentStack>
</FluentDialogHeader>

@* Body *@
<FluentDialogBody Style="overflow-y: auto; overflow-x: hidden;">
    <h5>Assets to sale: </h5>
    <FluentDataGrid Items="@AssetsList" TGridItem="AssetDTO" Pagination="@pagination" AutoFit="true"
                    ResizableColumns="true">

        <PropertyColumn Property="@(p => p.AssetTagNumber)" Sortable="true"/>
        <PropertyColumn Property="@(p => p.SerialNumber)" Sortable="true"/>
        <TemplateColumn Title="Actions" Align="Align.End">
            @{
                // var viewId = $"viewid-{context.Id}";
                // var editId = $"editid-{context.Id}";
                var deleteId = $"deleteid-{context.Id}";
                // var addId = $"addid-{context.Id}";
            }
            <FluentButton Id="@deleteId" IconEnd="@(new Icons.Regular.Size20.Delete())"
                          OnClick="@(() => DeleteAsset(context.Id))"/>
        </TemplateColumn>

    </FluentDataGrid>
    <FluentPaginator State="@pagination"/>
    <div>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentLabel Typo="Typography.Subject"> Add Asset:</FluentLabel>
            <FluentAutocomplete TOption="AssetVm"
                                AutoComplete="on"

                                OnOptionsSearch="OnAssetSearch"
                                Placeholder="Select asset..."
                                MaximumOptionsSearch="100"
                                MaximumSelectedOptions="1"
                                OptionText="@(p => p.AssetTagNumber)"
                                @bind-SelectedOptions="@SelectedAsset"
                                Height="550px"
                                Width="200px"
            />
            <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddAsset())"/>
        </FluentStack>
    </div>
    <hr>
    <div>
    <h5>Recipient: </h5>
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentLabel Typo="Typography.Subject"> Employee:</FluentLabel>
        <FluentAutocomplete TOption="IAssigneeVm"
                            AutoComplete="on"

                            OnOptionsSearch="OnAssigneeSearch"
                            Placeholder="Select assignee"
                            MaximumSelectedOptions="1"
                            OptionText="@(p => p.LongName)"
                            @bind-SelectedOptions="@SelectedAssignee"
                            @bind-SelectedOptions:after="UpdateSaleEmployee"
                            Height="550px"
                            Width="200px"
        />

        <FluentLabel Typo="Typography.Subject"> Company:</FluentLabel>
        <FluentAutocomplete TOption="CompanyVm"
                            AutoComplete="on"

                            OnOptionsSearch="OnCompanySearch"
                            Placeholder="Select company..."
                            MaximumSelectedOptions="1"
                            OptionText="@(p => p.Name)"
                            @bind-SelectedOptions="@SelectedCompanies"
                            @bind-SelectedOptions:after="UpdateSaleCompany"
                            Height="550px"
                            Width="200px"
        />

    </FluentStack>
    </div>
    <hr/>
    @if (Content.FormFiles.Any())
    {
        <FluentDataGrid Items="@formFiles" TGridItem="FormFileVm" Pagination="@pagination" AutoFit="true"
                        ResizableColumns="true">

            <PropertyColumn Property="@(p => p.OriginalFileName)" Sortable="true"/>
            <PropertyColumn Property="@(p => p.FormPurpose)" Sortable="true"/>
            <TemplateColumn Title="Actions" Align="Align.End">
                @{
                    var viewId = $"viewid-{context.Id}";
                    // var editId = $"editid-{context.Id}";
                    var deletefileId = $"deletefile-{context.Id}";
                    // var addId = $"addid-{context.Id}";
                }
                <FluentButton Id="@viewId" IconEnd="@(new Icons.Filled.Size20.Open())"
                              OnClick="@(() => View(context, "ITSaleForm"))"/>
                <FluentButton Id="@deletefileId" IconEnd="@(new Icons.Regular.Size20.Delete())"
                              OnClick="@(() => DeleteFile(context.Id))"/>
            </TemplateColumn>

        </FluentDataGrid>
    }

    <FluentInputFile
        @ref="@inputFile"
        AnchorId="MyUploadStream"
        DragDropZoneVisible="false"
        Mode="InputFileMode.Stream"
        Multiple="true"
        MaximumFileSize="@(20 * 1024 * 1024)"
        Accept=".pdf, .jpg, .png"
        OnFileUploaded="@OnFileUploadedAsync"
        OnCompleted="@OnCompleted"
        />
    <FluentProgress Min="0" Max="100" Value="@progressPercent" Visible="@(progressPercent > 0)"/>
    <FluentLabel Alignment="HorizontalAlignment.Center">
        @progressTitle
    </FluentLabel>

    <FluentButton  Appearance="Appearance.Accent" Id="MyUploadStream" >
        Upload files
    </FluentButton>
</FluentDialogBody>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" BackgroundColor="#509EDB" Style="width: 100px"  Disabled="false">Save </FluentButton>
    <FluentButton Appearance="Appearance.Accent" OnClick="@CloseAsync" BackgroundColor="#1FC91F" Style="width: 100px" Disabled="@canClose">Close </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync" BackgroundColor="#808080" Color="#FFFFFF" Style="width: 100px">Cancel</FluentButton>

</FluentDialogFooter>


@code {

    #region Declarations

    private string SessionId { get; set; }
    [Parameter] public ITSaleFormVm Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;

    private EditContext _editContext;
    private FormUserContext _userContext = new FormUserContext("Settlement", "Technician");
    private FluentValidationValidator? _fluentValidator;
    private string errorMessage;

    private IQueryable<AssetDTO>? AssetsList { get; set; }
    private IQueryable<AssetVm>? AssetsListAll { get; set; }
    private List<AssetVm>? FilteredAssetsListAll { get; set; }
    private IEnumerable<AssetVm> SelectedAsset = Array.Empty<AssetVm>();
    private IQueryable<EmployeeVm>? itemEmployeesList { get; set; }
    private IQueryable<IAssigneeVm>? itemAssigneesList { get; set; }
    private IEnumerable<IAssigneeVm> SelectedAssignee = Array.Empty<IAssigneeVm>();
    private IQueryable<CompanyVm>? itemCompaniesList { get; set; }
    private IEnumerable<CompanyVm> SelectedCompanies = Array.Empty<CompanyVm>();
    private IQueryable<FormFileVm> formFiles { get; set; }

    private ApprovalVm approval { get; set; }
    
    private bool showAssetAdd = false;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    // private FormUserContext _userContext { get; set; }
    private FluentInputFile? inputFile = default!;
    private int? progressPercent;
    private string? progressTitle;
    private List<string> Files = new();
    private List<FormFileVm> addedFiles = new();
    private int filesCount { get; set; }
    private bool canClose { get; set; }
    private bool isAssigned { get; set; }

    #endregion Declarations

    protected override async Task OnInitializedAsync()
    {
        await Utils.GetUserName(AuthenticationStateProvider, _userContext, _mediator);
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
        SessionId = $"{timestamp}_{_userContext.EnovaEmpId}";
        _editContext = new EditContext(Content);
        itemEmployeesList = await _mediator.Send(new GetAllEmployeesQuery());
        var assignees = new List<IAssigneeVm>();
        assignees.AddRange(itemEmployeesList.Select(employee => (IAssigneeVm)new EmployeeVm { Id = employee.EnovaEmpId, LongName = employee.LongName, typeName = "EmployeeVm" }));
        itemAssigneesList = assignees.AsQueryable();
        itemCompaniesList = await _mediator.Send(new GetAllCompaniesQuery());
        
        if (Content.EmployeeId > 0)
        {
            var tempEmp = itemEmployeesList.Where(e => e.EnovaEmpId == Content.EmployeeId).FirstOrDefault();
            var assList = SelectedAssignee.ToList();
            assList.Add((IAssigneeVm)new EmployeeVm { Id = tempEmp.EnovaEmpId, LongName = tempEmp.LongName, typeName = "EmployeeVm" });
            SelectedAssignee = assList;
        }
        else if (Content.CompanyId > 0)
        {
            var tempComp = itemCompaniesList.Where(c => c.Id == Content.CompanyId).FirstOrDefault();
            var compList = SelectedCompanies.ToList();
            compList.Add(tempComp);
            SelectedCompanies = compList;
        }

        AssetsListAll = await _mediator.Send(new GetAllAssetsQuery());
        FilteredAssetsListAll = AssetsListAll.Where(a => a.StateVmId != 5 && a.StateVmId != 7).ToList();
        formFiles = Content.FormFiles.AsQueryable();
        CanCloseCheck();
        await LoadAssets();
    }

    private async Task CanCloseCheck()
    {
        filesCount = Content.FormFiles.Count;
        isAssigned = Content.Company == null || Content.Employee == null;
        canClose = !(filesCount > 0 && Content.AssetIds.Count() > 0 && isAssigned);
    }
    private async Task LoadAssets()
    {
        List<AssetDTO> assetsList = new();
        foreach (var aid in Content.AssetIds)
        {
            var tmp = await _mediator.Send(new GetAssetDTObyIdQuery(aid));
            assetsList.Add(tmp);
        }
        AssetsList = assetsList.AsQueryable();
        Content.Assets = AssetsList.ToList();
        SelectedAsset = Array.Empty<AssetVm>();
        
        approval = new ApprovalVm()
        {
            Status = Content.Status,
            EnovaEmpId = _userContext.EnovaEmpId,
            LongName = _userContext.LongName,
            Date = DateTime.Now,
            IsApproved = false
        };        
        
    }
    private async Task SaveAsync()
    {
        Content.Approvals.Add(approval);
        foreach(var file in Content.FormFiles)
        {   
            if (file.DstPath == null){
                var updatedFileVm = await _fileService.MoveTempFileToDestFolderAsync(file.TmpPath, Content.FolderName, Content.NumberPrefix, Content.Id);
                file.DstPath = updatedFileVm["DstPath"];
                file.DstFileName = updatedFileVm["DstFileName"];
                file.FormPurpose = "default";
                await _mediator.Send(new UpdateFormFileCommand(file));
            }

        }
        await Dialog.CloseAsync(Content);
    }
    private async Task CloseAsync()
    {

        var dialog = await _dialogService.ShowConfirmationAsync(
            $"You are about to close Sale Form {Content.Number}. \n You won't be able to make changes after this. Are you sure?",
            "Yes",
            "No",
            "Confirm delete operation");
        var result = await dialog.Result;
        bool closeConfirm = result.Cancelled;
        string message = string.Empty;

        if (!closeConfirm)
        {
            foreach(var file in Content.FormFiles)
            {   
                if (file.DstPath == null){
                    var updatedFileVm = await _fileService.MoveTempFileToDestFolderAsync(file.TmpPath, Content.FolderName, Content.NumberPrefix, Content.Id);
                    file.DstPath = updatedFileVm["DstPath"];
                    file.DstFileName = updatedFileVm["DstFileName"];
                    file.FormPurpose = "default";
                    await _mediator.Send(new UpdateFormFileCommand(file));
                }
            }
            Content.Approvals.Add(approval);
            Content.Status = "Zamkniete";
        }
        await Dialog.CloseAsync(Content);
    }
    private async Task CancelAsync()
    {
        foreach (var file in addedFiles)
        {
            DeleteFile(file.Id);
        }
        await Dialog.CancelAsync();
    }
    private async void UpdateSaleEmployee()
    {
        var selectedAssignee = SelectedAssignee.FirstOrDefault();
        try
        {
            if (selectedAssignee != null)
            {
                var newEmpl = itemEmployeesList.Where(p => p.EnovaEmpId == selectedAssignee.Id).FirstOrDefault();
                Content.EmployeeId = newEmpl.EnovaEmpId;
                Content.EmployeeName = newEmpl.LongName;
                Content.CompanyId = null;
                Content.CompanyName = null;
                SelectedCompanies = Array.Empty<CompanyVm>();
            }
            else
            {
                throw new Exception("No assignee selected");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
            return;
        }
    }
    private async void UpdateSaleCompany()
    {
        var selectedAssignee = SelectedAssignee.FirstOrDefault();
        // Console.WriteLine("ACTION WORKING!!!!" + SelectedAssignee.Count());
        try
        {
            if (!string.IsNullOrEmpty(SelectedCompanies.FirstOrDefault().Name))
            {
                Content.CompanyId = SelectedCompanies.FirstOrDefault().Id;
                Content.CompanyName = SelectedCompanies.FirstOrDefault().FullName;
                Content.EmployeeId = null;
                Content.EmployeeName = null;
                SelectedAssignee = Array.Empty<IAssigneeVm>();
            }
            else
            {
                throw new Exception("No assignee selected");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
            return;
        }
    }
    private async void AddAsset()
    {
        if (SelectedAsset.FirstOrDefault() == null)
        {
            return;
        }
        else
        {

            if (!Content.AssetIds.Contains(SelectedAsset.FirstOrDefault().Id))
            {
                Content.AssetIds.Add(SelectedAsset.FirstOrDefault().Id);
                await LoadAssets();
                StateHasChanged();
            }
            else
            {
                SelectedAsset = Array.Empty<AssetVm>();
                StateHasChanged();
            }
        }
    }
    private async void DeleteAsset(int delId)
    {
        Content.AssetIds.Remove(delId);

        await LoadAssets();
        StateHasChanged();
    }
    private void OnAssigneeSearch(OptionsSearchEventArgs<IAssigneeVm> e)
    {
        e.Items = itemAssigneesList.Where(a => a.LongName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    }
    private void OnCompanySearch(OptionsSearchEventArgs<CompanyVm> e)
    {
        e.Items = itemCompaniesList.Where(a => a.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    }
    private void OnAssetSearch(OptionsSearchEventArgs<AssetVm> e)
    {
        e.Items = FilteredAssetsListAll.Where(a => a.AssetTagNumber.Contains(e.Text, StringComparison.OrdinalIgnoreCase) );
    }
    private async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        progressPercent = file.ProgressPercent;
        progressTitle = file.ProgressTitle;
        await Utils.OnFileUploadedAsync(file, _fileService, _mediator, SessionId, Content, addedFiles, _logger);
        formFiles = Content.FormFiles.AsQueryable();
        CanCloseCheck();
        StateHasChanged();
    }
    private async void DeleteFile(int fileId)
    {
        await Utils.DeleteFile(fileId, formFiles, _fileService, _mediator, addedFiles, Content);
        CanCloseCheck();
        StateHasChanged();
    }
    private void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = inputFile!.ProgressPercent;
        progressTitle = inputFile!.ProgressTitle;
    }
    private async Task View(FormFileVm item, string folder)
        {
            if (item != null)
            {
                // Extract the relative path from the DstPath
                string relativePath = $"{folder}/{item.DstFileName}".Replace("\\", "/");

                // Generate the URL
                string url = _navigationManager.BaseUri + relativePath;

                // Navigate to the URL in a new tab
                await JS.InvokeVoidAsync("open", url, "_blank");
            }
        }
}

<style>

    .spaced-element {
        margin-top: 10px; /* Adds 10px space above */
        margin-bottom: 10px; /* Adds 10px space below */
    }

    hr {
        border: none;
        border-top: 3px double #333;
        color: #333;
        overflow: visible;
        text-align: center;
        height: 5px;
    }
    table {
        margin-top: 20px; /* Adds 50px space above the table */
        border-collapse: collapse; /* Optional: For a cleaner look */
        width: 600px; /* Optional: Adjust to fit your container */
    }

    th, td {
        padding: 5px; /* Adds padding inside each cell */
        text-align: left; /* Optional: Align text to the left */
    }

    td:first-child, th:first-child {
        padding-left: 0; /* Removes padding on the left of the first cell */
    }

    .table-header {
        font-size: 1.25em; 
        font-weight: bold;
    }
    .table-data {
        font-size: 1em;
    }
    
</style>
