@page "/currency"
@using Application.CQRS.ITWarehouseCQRS.Currencies
@using Application.CQRS.ITWarehouseCQRS.Currencies.Queries
@using Application.CQRS.ITWarehouseCQRS.Currencies.Commands
@using Application.ViewModels
@using MediatR
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Policy = "Technician")]

@inject IMediator _mediator
@inject ILogger<Currency_Page> _logger
@inject IDialogService _dialogService
@inject IToastService _toastService


<h3>Currencies</h3>

@if (_items == null)
{
    <FluentProgressRing>Loading...</FluentProgressRing>
    
}
else
{

    <FluentDataGrid Items="@_items" TGridItem="CurrencyVm" GridTemplateColumns="50px repeat(1, 1fr)" ResizableColumns=true>
        
        
        <PropertyColumn Property="@(c => c.Id)" Sortable="true" Align="Align.Start" Tooltip="true" />
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Align="Align.Start" Tooltip="true" />
        <TemplateColumn Title="Actions" Align="Align.End">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.BookOpen())" OnClick="@(() => View(context))" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(() => EditItem(context))" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => Delete(context))" />

        </TemplateColumn>
    </FluentDataGrid>
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" OnClick="@(() => Add())" />
}



@code {
    // public currencyVm Selected { get; set; }

    // CreateCurrencyCommandValidator cctcV = new();

    private IQueryable<CurrencyVm> _items;


    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _items = await _mediator.Send(new GetAllCurrenciesQuery());
        Console.WriteLine(_items.Count());
    }

    private async Task EditItem(CurrencyVm item)
    {
        ToastIntent intent;
        string message = string.Empty;
        int i = 0;

        var data = item;
        var dialog = await _dialogService.ShowDialogAsync<Currency_Edit_Component>(data, new DialogParameters()
        {
                Height = "240px",
                Title = data.Id > 0 ? "Update Currency" : "Create new Currency",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
        });
        var result = await dialog.Result;
        if(!result.Cancelled && result.Data != null)
        {
            item = (CurrencyVm)result.Data;
            if (item.Id > 0)
            {
                i = await _mediator.Send(new UpdateCurrencyCommand(item.Id, item.Name));
                intent = ToastIntent.Success;
                message = "Currency has been updated!";
            } else if (item.Id == 0)
            {
                i = await _mediator.Send(new CreateCurrencyCommand(item.Name));
                intent = ToastIntent.Success;
                message = "Currency has been Created!";
            } else
            {
                intent = ToastIntent.Warning;
                message = "Something went realy wrong!";
            }

        } else if (result.Cancelled)
        {
            intent = ToastIntent.Info;
            message = "Update Cancelled...";
        } else
        {
            intent = ToastIntent.Error;
            message = "Something went wrong!!!";
        }


        await Load();
        _toastService.ShowToast(intent, message, 3000);

        Console.WriteLine(result.GetType());
    }

    private async Task View(CurrencyVm curr)
    {
        await _dialogService.ShowInfoAsync(message: $"Currency  id: {curr.Id}, name: {curr.Name}");
    }

    private async Task Add()
    {
        CurrencyVm item = new CurrencyVm { Id = 0, Name = string.Empty };
        await EditItem(item);
    }

    private async Task Delete(CurrencyVm item)
    {
        ToastIntent intent;
        string message = string.Empty;

        var i = await _mediator.Send(new DeleteCurrencyCommand(item.Id));

        if (i == item.Id)
        {
            intent = ToastIntent.Success;
            message = "Currency has been deleted!";
        }
        else
        {
            intent = ToastIntent.Error;
            message = "Something went wrong!!!";
        }
        await Load();
        _toastService.ShowToast(intent, message, 3000);

    }
}
@* Disabled="@(string.IsNullOrEmpty(Content.Name) || string.IsNullOrWhiteSpace(Content.Name))" *@
