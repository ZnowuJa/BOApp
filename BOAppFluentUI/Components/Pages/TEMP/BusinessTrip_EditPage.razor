@page "/create-business-travel-ux/{id:int}"
@page "/nowadelegacja-ux/{id:int}"
@page "/delegacja-ux/{id:int}"
@using System.Diagnostics;
@using System.Globalization
@using Application.AdHocJobs
@using Application.CQRS.AccountingCQRS.SapCostCenters.Queries
@using Application.CQRS.General.ManagerDeputies.Queries
@using Application.Validation.Accounting
@using BOAppFluentUI.Components.Pages.Accounting.Dictionaries.SapCostCenter
@using BOAppFluentUI.Components.Pages.Accounting.Settlements
@using Blazored.FluentValidation
@using System.Text.Json.Serialization
@using Application.CQRS.AccountingCQRS.BusinessTravels.Commands
@using Application.CQRS.AccountingCQRS.BusinessTravels.Queries
@using Application.CQRS.AccountingCQRS.CostCenters.Queries
@using Application.CQRS.AccountingCQRS.Countries.Queries
@using Application.CQRS.AccountingCQRS.Dictionaries
@using Application.CQRS.AccountingCQRS.GLAccounts.Queries
@using Application.CQRS.AccountingCQRS.VATRates.Queries
@using Application.CQRS.BusinessOperationsCQRS
@using Application.CQRS.General.Organisations.Queries
@using Application.CQRS.ITWarehouseCQRS.Employees.Queries
@using Application.Forms.Accounting
@using Application.Forms.Accounting.BuisnessTravelSmallClasses
@using Application.Forms.Accounting.Enums
@using Application.ViewModels.Accounting
@using Application.ViewModels.BusinessOperations
@using BOAppFluentUI.Components.Pages
@using BOAppFluentUI.Components.Pages.Accounting.SharedComponents
@using Application.ViewModels.General
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.Build.Construction
@using Microsoft.CodeAnalysis.Elfie.Extensions
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

@attribute [Authorize(Policy = "User")]

@inject IConfiguration _configuration
@inject IMediator _mediator
@inject IJSRuntime JS
@inject ILogger<BusinessTravelFormVm> _logger
@inject IDialogService _dialogService
@inject IToastService _toastService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment Environment
@inject IValidator<BusinessTravelFormVm> Validator
<div class="emptytemp">
<h3>@Title test</h3>
    @if (isLoading)
    {
        <FluentProgressRing />
    } else     
    {
        if(showForm){
            <EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">

                <FluentValidationValidator @ref="_fluentValidationValidator" />

                <div class="emptytemp">

                    <div class="x_table-caption-container">
                        <div class="x_table-caption">
                            Informacje Ogólne
                        </div>
                        <div class="x_table-status">
                            Status: @formItem.Status | Numer: @formItem.Number
                        </div>
                    </div>
                    <table class="x_table-container">
                        <thead>
                        <tr class="x_table-header">
                            <th>Pracownik</th>
                            <th>Kraj docelowy</th>
                            <th>Miasto</th>
                            <th>Cel podróży</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td>
                                <FluentAutocomplete TOption="EmployeeVm"
                                                    Disabled="@IsControlEmployeDisabled()"
                                                    Class="bold-label"
                                                    AutoComplete="on"
                                                    MaximumOptionsSearch="20"
                                                    OnOptionsSearch="@OnAssigneeSearch"
                                                    Placeholder="Select assignee..."
                                                    MaximumSelectedOptions="1"
                                                    OptionText="@(p => p.LongName + ' ' + p.Position)"
                                                    @bind-SelectedOptions="@SelectedEmpl"
                                                    @bind-SelectedOptions:after="@HandleAssigneeChange"
                                                    Width="200px" />
                            </td>
                            <td>
                                <FluentAutocomplete TOption="CountryVm"
                                                    Disabled="@IsControlCountryDisabled()"
                                                    AutoComplete="on"
                                                    MaximumOptionsSearch="130"
                                                    OnOptionsSearch="@OnCountrySearch"
                                                    Placeholder="Wybierz kraj docelowy..."
                                                    MaximumSelectedOptions="1"
                                                    OptionText="@(p => p.Name)"
                                                    @bind-SelectedOptions="@SelectedCountry"
                                                    @bind-SelectedOptions:after="HandleCountryAdd"
                                                    Width="200px" />
                                <FluentValidationMessage For="@(() => formItem.DestinationCountry)" class="validation-error" />
                            </td>
                            <td>
                                <FluentCombobox Items="@_cities"
                                                Disabled="@IsControlCityDisabled()"
                                                @bind-Value="formItem.Destination"
                                                Placeholder="Wybierz lub wprowadź..."
                                                Width="200" />
                                <FluentValidationMessage For="@(() => formItem.Destination)" class="validation-error" />
                            </td>
                            <td>
                                <FluentSelect TOption="string"
                                              Disabled="@IsControlObjectivesDisabled()"
                                              Items="@_objectives"
                                              Placeholder="wybierz cel wyjazdu..."
                                              @bind-Value="@formItem.Objective" />
                                <FluentValidationMessage For="@(() => formItem.Objective)" class="validation-error" />
                            </td>
                        </tr>
                        </tbody>
                    </table>
                    
                    
                    
                    <table class="table-container">
                        @* <caption class="table-caption">Informacje Ogólne</caption> *@
                        <thead>
                            <tr class="table-caption">
                                <th style="text-align: left; border-right: none; font-size: large;" colspan="2">
                                    Informacje Ogólne
                                </th>
                                <th style="text-align: right; border-left: none; font-size: large;" colspan="2">
                                    Status: @formItem.Status | Numer: @formItem.Number
                                </th>
                            </tr>
                            <tr class="table-header-left table-caption">
                                <th style="width: 130px;">Pracownik</th>
                                <th style="width: 150px;">Kraj docelowy</th>
                                <th style="width: 130px;">Miasto</th>
                                <th style="width: 120px;">Cel podróży</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <FluentAutocomplete TOption="EmployeeVm"
                                    Disabled="@IsControlEmployeDisabled()"
                                    Class="bold-label"
                                    AutoComplete="on"
                                    MaximumOptionsSearch="20"
                                    OnOptionsSearch="@OnAssigneeSearch"
                                    Placeholder="Select assignee..."
                                    MaximumSelectedOptions="1"
                                    OptionText="@(p => p.LongName + ' ' + p.Position)"
                                    @bind-SelectedOptions="@SelectedEmpl"
                                    @bind-SelectedOptions:after="@HandleAssigneeChange"
                                    Width="200px" />
                                </td>
                                <td>
                                    <FluentAutocomplete TOption="CountryVm"
                                    Disabled="@IsControlCountryDisabled()"
                                    AutoComplete="on"
                                    MaximumOptionsSearch="130"
                                    OnOptionsSearch="@OnCountrySearch"
                                    Placeholder="Wybierz kraj docelowy..."
                                    MaximumSelectedOptions="1"
                                    OptionText="@(p => p.Name)"
                                    @bind-SelectedOptions="@SelectedCountry"
                                    @bind-SelectedOptions:after="HandleCountryAdd"
                                    Width="200px" />
                                    <FluentValidationMessage For="@(() => formItem.DestinationCountry)" class="validation-error" />
                                </td>
                                <td>
                                    <FluentCombobox Items="@_cities"
                                    Disabled="@IsControlCityDisabled()"
                                    @bind-Value="formItem.Destination"
                                    Placeholder="Wybierz lub wprowadź..."
                                    Width="200" />
                                    <FluentValidationMessage For="@(() => formItem.Destination)" class="validation-error" />
                                </td>
                                <td>
                                    <FluentSelect TOption="string"
                                    Disabled="@IsControlObjectivesDisabled()"
                                    Items="@_objectives"
                                    Placeholder="wybierz cel wyjazdu..."
                                    @bind-Value="@formItem.Objective" />
                                    <FluentValidationMessage For="@(() => formItem.Objective)" class="validation-error" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    @if (lastRejectReason != null && !string.IsNullOrEmpty(formItem.RejectReason) && (strej || stroz || stodrz ))
                    {
                        <table class="table-container">
                            <thead>
                                <tr class="table-caption" >
                                    <th colspan="4" style="background-color: orange; color: white; font-weight: 800;" >
                                        Powody odrzucenia
                                    </th>

                                </tr>
                                <tr class="table-caption" style="background-color: orange; color: white; font-weight: 800;" >
                                    <th>Data</th>
                                    <th>Status</th>
                                    <th>Odrzucający</th>
                                    <th>Powód</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td style="color: red; font-weight: 800;">
                                        @lastRejectReason.RejectTime
                                    </td>
                                    <td style="color: red; font-weight: 800;">
                                        @lastRejectReason.RejectFormStatus
                                    </td>
                                    <td style="color: red; font-weight: 800;">
                                        @lastRejectReason.ApproverName
                                    </td>
                                    <td style="color: red; font-weight: 800;">
                                        @lastRejectReason.RejectReasonText
                                    </td>
                                </tr>
                            </tbody>

                        </table>
                    }

                    @* Dates *@
                    <table class="table-container">
                        <tbody>
                            <tr>
                                <td  style="width: 170px">
                                    Początek:
                                </td>
                                <td>
                                    <DateTimePickerComponent DateTimeValue="@formItem.StartDate"
                                    Disabled="@IsControlDateTimeDisabled()"
                                    DateTimeValueChanged="@(e => HandleDateTimeChanged(e, "from"))" />

                                    <FluentValidationMessage For="@(() => formItem.StartDate)" class="validation-error" />
                                </td>
                                <td style="width: 150px">
                                    Koniec:
                                </td>
                                <td>
                                    <DateTimePickerComponent DateTimeValue="@formItem.EndDate"
                                    Disabled="@IsControlDateTimeDisabled()"
                                    DateTimeValueChanged="@(e => HandleDateTimeChanged(e, "to"))" />
                                    <FluentValidationMessage For="@(() => formItem.EndDate)" class="validation-error" />
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    @* SAP COST CENTERS*@

                    <table class="table-container">
                        <thead>
                            <tr class="table-caption">
                                <th>
                                    Wybierz MPK  <FluentIcon Id="SelectMPKId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                </th>
                            </tr>
                            <tr class="table-header-left table-caption">
                                <th style="width: 130px;">Lokalizacja</th>
                                <th style="width: 150px;">Dział</th>
                                <th style="width: 50px;">Udział</th>
                                <th style="width: 100px;">Odpowiedzialny</th>
                                <th style="width: 100px;">Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int a = 0;
                                @foreach (var item in formItem.FormCostCenters)
                                {
                                    var index = a;
                                    <SapCostCenter_SelectComponent 
                                    _content="@item"
                                    sapCostCenters="_sapCostCenters.ToList()"
                                    RemoveSapCostCenter="@(scc => RemoveSapCC(scc))"
                                    OnSapCostCenterChanged="@(scc => HandleSapCostCenterChanged(index, scc))"
                                    isEditable = "@(!(stroz || strej))"
                                    @key="@item.formId" />
                                    a++;
                                }
                            }
                        </tbody>

                    </table>
                    <FluentValidationMessage For="@(() => formItem.FormCostCenters)" class="validation-error" />
                    <FluentButton Id="addSapCC" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddSapCostCenter())" Style="margin-bottom: 20px;" />
                    <FluentTooltip Anchor="SelectMPKId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Sprawdź poprawność przypisania kosztów delegacji. Jeśli konieczny jest podział między kilka działów/oddziałów, dodaj kolejny zapis używając przycisku '+'. Pamiętaj również o odpowiednim rozdzieleniu procentowym..</FluentTooltip>


                    <FluentGrid>
                        <FluentGridItem>
                            <FluentGridItemHeader>
                                Wybierz MPK
                                <FluentIcon Id="SelectMPKId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                            </FluentGridItemHeader>
                        </FluentGridItem>
                        <FluentGridItem>
                            <FluentGridItemHeader style="width: 130px;">Lokalizacja</FluentGridItemHeader>
                            <FluentGridItemHeader style="width: 150px;">Dział</FluentGridItemHeader>
                            <FluentGridItemHeader style="width: 50px;">Udział</FluentGridItemHeader>
                            <FluentGridItemHeader style="width: 100px;">Odpowiedzialny</FluentGridItemHeader>
                            <FluentGridItemHeader style="width: 100px;">Akcje</FluentGridItemHeader>
                        </FluentGridItem>
                        int a = 0;
                        
                        @foreach (var item in formItem.FormCostCenters)
                        {
                            var index = a;
                        <FluentGridItem>
                            <FluentGridItemCell style="width: 130px;">"DDD"</FluentGridItemCell>
                            <FluentGridItemCell style="width: 150px;">"Dept"</FluentGridItemCell>
                            <FluentGridItemCell style="width: 50px;">"Udział"</FluentGridItemCell>
                            <FluentGridItemCell style="width: 100px;">"Odpowiedzialny"</FluentGridItemCell>
                            <FluentGridItemCell style="width: 100px;">
                                
                                <SapCostCenter_SelectComponent
                                    _content="@item"
                                    sapCostCenters="_sapCostCenters.ToList()"
                                    RemoveSapCostCenter="@(scc => RemoveSapCC(scc))"
                                    OnSapCostCenterChanged="@(scc => HandleSapCostCenterChanged(index, scc))"
                                    isEditable="@(!(stroz || strej))"
                                    @key="@item.formId"/>
                            </FluentGridItemCell>
                        </FluentGridItem>
                        a++;
                        }
                    </FluentGrid>
                    @* Transportation *@
                    <table class="table-container">
                        <tbody>
                            <tr>
                                <td class="table-caption" style="width: 170px; padding: 10px;" >
                                    Środek transportu:
                                </td>
                                <td style="text-align: left;" colspan="5">
                                    <FluentSelect TOption="string"
                                    Disabled="@IsControlTransportDisabled()"
                                    Items="@Conveyances"
                                    Placeholder="wybierz środek lokomocji"
                                    Multiple="false"
                                    @bind-Value="@formItem.Transportation"
                                    @bind-Value:after="HandleConveyanceStringChange"
                                    Width="200px" />
                                    <FluentIcon Id="SelectTransportationID" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    <FluentValidationMessage For="@(() => formItem.Transportation)" class="validation-error" />

                                </td>
                                @if (IsCompanyCar)
                                {
                                    <td class="table-caption" style="width: 150px">
                                        Numer rejestracyjny:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentAutocomplete TOption="string"
                                        Disabled="@IsControlTransportDisabled()"
                                        AutoComplete="on"
                                        MaximumOptionsSearch="130"
                                        OnOptionsSearch="@OnCompanyCarSearch"
                                        Placeholder="..."
                                        MaximumSelectedOptions="1"
                                        @bind-SelectedOptions="@SelectedCompanyCar"
                                        @bind-SelectedOptions:after="@HandleCompanyCarChange"
                                        Width="200px" />
                                        <FluentValidationMessage For="@(() => formItem.CompanyVehicleNumber)" class="validation-error" />
                                    </td>

                                }
                                @if (IsPublicTransport)
                                {
                                    <td class="table-caption" style="width: 150px">
                                        Opłacone przez firmę:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentSwitch Id="publictransportId"
                                        Label="Opłacone przez firmę: "
                                        Disabled="@IsControlTransportDisabled()"
                                        @bind-Value:get="@formItem.PublicTransportPaid"
                                        @bind-Value:set="@HandlePublicTransportPaidChanged" />
                                        <FluentIcon Id="TransportPaidByCompanyId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="TransportPaidByCompanyId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Oznacz to pole, jeśli płatność za transport została zrealizowana przez WecoTravels.</FluentTooltip>
                                    </td>
                                }
                            </tr>
                            @if (IsPrivateCar)
                            {
                                <tr>
                                    <td class="table-caption" style="width: 170px">
                                        Numer rejestracyjny:
                                    </td>
                                    <td style="text-align: left; width: 120px;">
                                        <FluentTextField Disabled="@IsControlTransportDisabled()"
                                        @bind-Value="@formItem.MileageRegister.PrivateCarRegistration"
                                        @bind-Value:after="@(HandlePrivateVehicleRegistrationChanged)"
                                        Style="width: 120px"
                                        Required="true" />
                                        <FluentValidationMessage For="@(() => formItem.MileageRegister.PrivateCarRegistration)" />
                                    </td>
                                    <td class="table-caption" style="width: 150px">
                                        Pojemność silnika:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentSelect TOption="string"
                                        Disabled="@IsControlTransportDisabled()"
                                        Items="@PrivateVehEngSize"
                                        Placeholder="wybierz pojemność.."
                                        @bind-Value:get="@formItem.MileageRegister.PrivateCarEngineSize"
                                        SelectedOptionChanged="@(value => HandlePrivateVehicleEngineSizeChanged(value))"
                                        Width="150px" />
                                        <FluentIcon Id="PrivateVehEngineSizeId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="PrivateVehEngineSizeId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Proszę wskazać pojemność silnika samochodu prywarnego. Informacja ta jest niezbędna do prawidłowego rozliczenia kosztów użytkowania pojazdu.</FluentTooltip>
                                        <FluentValidationMessage For="@(() => formItem.MileageRegister.PrivateCarEngineSize)" />
                                    </td>
                                    <td class="table-caption" style="width: 150px">
                                        Planowany przebieg:
                                    </td>
                                    <td style="text-align: left;">
                                        <span style="display: flex; align-items: center;">
                                            <FluentNumberField Disabled="@IsControlTransportDisabled()"
                                            @bind-Value:get="@formItem.PrivateVehicleMilage"
                                            @bind-Value:set="@(value => HandlePrivateVehicleMileageChanged(value))"
                                            Style="width: 100px; margin-right: 4px;" /> km
                                            <FluentIcon Id="PrivateVehDistanceId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                            <FluentTooltip Anchor="PrivateVehDistanceId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Proszę wprowadzić planowany przebieg podróży. Informacja ta jest istotna do oszacowania kosztów podróży. Ostateczny przebieg należy uzupełnić podczas rozliczenia delegacji. </FluentTooltip>
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <FluentTooltip Anchor="SelectTransportationID" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Wybierz odpowiedni środek transportu dla swojej delegacji. Upewnij się, że wybrany środek transportu jest zgodny z polityką firmy.</FluentTooltip>

                    @* Advance Payment *@

                    <table class="table-container">
                        <tbody>
                            <tr style="height: 40px;">
                                <td class="table-caption" style="width: 100px">
                                    Zaliczka:
                                </td>
                                <td style="text-align: left;">
                                    <FluentSwitch Disabled="@IsControlAdvancePaymentDisabled()"
                                    @bind-Value:get="@formItem.AdvancePayment"
                                    @bind-Value:set="@(value =>HandleAdvancePaymentSwitch(value))" />
                                    <FluentIcon Id="AdvPmntToolTipId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    <FluentTooltip Anchor="AdvPmntToolTipId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Oznacz to pole, jeśli potrzebujesz zaliczki na pokrycie kosztów podróży służbowej.</FluentTooltip>
                                </td>
                                @if (formItem.AdvancePayment)
                                {
                                    <td class="table-caption" style="width: 100px">
                                        Kwota:
                                    </td>
                                    <td style="text-align: left;">
                                        <div style="width: 170px;">
                                            <InputNumber Min="0"

                                            @bind-Value:get="@formItem.AdvancePaymentAmount"
                                            @bind-Value:set="((value => formItem.AdvancePaymentAmount = value))"
                                            class="customFluentNumber"
                                            style="width: 120px;"
                                            Disabled="@IsControlAdvancePaymentDisabled()" /> PLN
                                        </div>

                                        <FluentValidationMessage For="@(() => formItem.AdvancePaymentAmount)" class="validation-error" />
                                    </td>
                                    <td class="table-caption" style="width: 100px">
                                        Wypłata:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentSelect Disabled="@IsControlAdvancePaymentDisabled()"
                                        Items=@AdvancePaymentMethodsInt
                                        TOption="Option<int>"
                                        OptionText="@(a => a.Text)"
                                        OptionValue="@(a => a.Value.ToString())"
                                        OptionSelected="@(a => a.Selected)"
                                        @bind-Value="@AdvancePaymentCashString"
                                        Width="150px" />
                                    </td>
                                    @if (!formItem.AdvancePaymentCash)
                                    {

                                        <td style="text-align: left; width: 300px;">
                                            <FluentAutocomplete TOption="LocationVm"
                                            Disabled="@IsControlAdvancePaymentDisabled()"
                                            SelectValueOnTab="true"
                                            OnOptionsSearch="@OnLocationSearch"
                                            MaximumOptionsSearch="40"
                                            Placeholder="select location..."
                                            MaximumSelectedOptions="1"
                                            OptionText="@(p => p.SapNumber + ' ' + p.DisplayName)"
                                            @bind-SelectedOptions="@_selectedLocation"
                                            @bind-SelectedOptions:after="@HandleLocationChange"
                                            Width="180px" 
                                            Height="300px"
                                            />
                                            <FluentValidationMessage For="@(() => formItem.CashPoint.SapNumber)" class="validation-error" />
                                        </td>
                                    }
                                    @if (formItem.AdvancePaymentCash)
                                    {
                                        <td style="text-align: left; width: 300px;">
                                            <FluentTextField Disabled="@IsControlAdvancePaymentDisabled()"
                                            Placeholder="wprowadź numer konta"
                                            @bind-Value="@formItem.BankAccountNumber"
                                            Style="width: 250px;" />
                                            <FluentValidationMessage For="@(() => formItem.BankAccountNumber)" class="validation-error" />
                                        </td>
                                    }

                                }
                            </tr>
                        </tbody>
                    </table>


                    @*Cashier Advance Payment*@

                    @if (((stzk || stzks || stzkstl || stroz || stks || stkstl || strozk || strozend) && formItem.AdvancePayment && !formItem.AdvancePaymentCash))
                    {
                        <table class="table-container">
                            <tbody>
                                <tr>
                                    <td class="table-caption" style="width: 250px;">
                                        Wypłata zaliczki
                                    </td>
                                    <td class="table-caption">
                                        Kasjerka:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentTextField Disabled="true"
                                        @bind-Value="@formItem.PayoutCashier.LongName" />
                                    </td>
                                    <td class="table-caption">
                                        Dokument AS:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentTextField Disabled="@(IsControlCashierPayoutDisabled())"
                                        @bind-Value="@formItem.CashPayoutNumber"
                                        Style="width: auto;" />
                                        <FluentValidationMessage For="@(() => formItem.CashPayoutNumber)" class="validation-error" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                    }
                    @if ((stzks || stzkstl || stblad) && formItem.AdvancePaymentCash)
                    {
                        <BankTransferMappingEditComponent BTItem="@formItem.BTMappingAdvancePayment" GLAccounts="@_glAccounts" FormStatus="@formItem.Status" UserContext="@_userContext" />
                    }
                    @*Cashier Reciept*@
                    @if ((strozk || strozend || stwys) )
                    {
                        <table class="table-container">
                            <thead>
                                <tr class="table-header-left">

                                    @if (formItem.TotalPayOut >= 0)
                                    {
                                        <th>
                                            Do wypłaty dla pracownika
                                        </th>
                                    }
                                    else
                                    {
                                        <th>
                                            Do zwrotu przez pracownika
                                        </th>
                                    }


                                    <th>@formItem.TotalPayOut.ToString("0.00") PLN</th>
                                </tr>
                            </thead>
                        </table>
                        <table class="table-container">
                            <tbody>
                                <tr>
                                    <td class="table-caption" style="width: 250px;">
                                        Rozliczenie delegacji
                                    </td>
                                    <td class="table-caption">
                                        Kasjerka:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentTextField Disabled="true"
                                        @bind-Value="@formItem.ReceiptCashier.LongName" />
                                    </td>
                                    <td class="table-caption">
                                        Dokument AS:
                                    </td>
                                    <td style="text-align: left;">
                                        <FluentTextField Disabled="@(IsControlCashierReceiptDisabled())"
                                        @bind-Value="@formItem.CashReceiptNumber"
                                        Style="width: auto;" />
                                        <FluentValidationMessage For="@(() => formItem.CashReceiptNumber)" class="validation-error" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                    }

                    <hr>
                    @if (ShowStages)
                    {
                        <hr>
                        @* List of stages - if country is not PL add Country Trip and then abroad trip and again country trip*@
                        <table class="table-container">

                            <thead>
                                <tr class="table-caption">
                                    <th style="text-align: left; border-right: none; font-size: large;" colspan="6">
                                        Etapy podróży słuzbowej 
                                        <FluentIcon Id="StagesInfoId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="StagesInfoId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Wprowadź szczegółowe informacje dotyczące poszczególnych etapów podróży. Formularz dynamicznie uzupełnia godzinę i datę kolejnego etapu.</FluentTooltip>

                                    </th>
                                    <th style="text-align: right; border-left: none; font-size: large;" colspan="1">
                                        <FluentIcon Id="StagesInfoPictureId" Value="@(new Icons.Regular.Size24.Steps())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />

                                    </th>
                                </tr>
                                <tr class="table-header-left">
                                    <th>Lp.</th>
                                    <th>Kraj: </th>
                                    <th>Od:
                                        <FluentIcon Id="StageFromID" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="StageFromID" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Uzupełnij dokładną datę i godzinę rozpoczęcia każdego etapu podróży. W przypadku podróży samolotem podaj godzinę wylotu.</FluentTooltip>
                                    </th>
                                    <th>Do: 
                                        <FluentIcon Id="StageToID" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="StageToID" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Uzupełnij dokładną datę i godzinę zakończenia każdego etapu podróży. W przypadku podróży samolotem podaj godzinę przylotu.</FluentTooltip>
                                    </th>
                                    <th>Liczba diet: </th>
                                    <th>TimeSpan: </th>
                                    <th>
                                        Razem:
                                        <FluentIcon Id="AccomodationRateId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="AccomodationRateId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50> Wysokość diety za etap podróży służbowej. Kwota diety zależy od kraju docelowego i jest określona w odpowiednich przepisach..</FluentTooltip>

                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stage in formItem.Stages)
                                {
                                    <tr>
                                        <td>@stage.Id</td>
                                        <td>
                                            <div>
                                                @stage.CountryName
                                            </div>
                                        </td>
                                        <td >
                                            <DateTimePickerComponent Label=""
                                            DateTimeValue="@stage.StartDate"
                                            DateTimeValueChanged="@(value => HandleStageDateTimeChanged(value, stage, nameof(stage.StartDate), stage.Id))"
                                            Disabled="@IsControlStageEditDisabled()" />
                                            <FluentValidationMessage For="@(() => stage.StartDate)" class="validation-error" />

                                        </td>
                                        <td >
                                            <DateTimePickerComponent Label=""
                                            DateTimeValue="@stage.EndDate"
                                            DateTimeValueChanged="@(value => HandleStageDateTimeChanged(value, stage, nameof(stage.EndDate), stage.Id))"
                                            Disabled="@IsControlStageEditDisabled()" />
                                            <FluentValidationMessage For="@(() => stage.EndDate)" class="validation-error" />
                                        </td>
                                        <td>
                                            @(stage.AllowanceOrigin + stage.AllowanceAbroad)
                                        </td>
                                        <td>
                                            @($"{(int)stage.TimeSpan.TotalDays:D2}:{stage.TimeSpan.Hours:D2}:{stage.TimeSpan.Minutes:D2}")

                                        </td>
                                        <td>
                                            @(stage.AllowanceOriginValue + stage.AllowanceAbroadValue) @(stage.CountryCurrency)
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="7">
                                            <FluentValidationMessage For="@(() => stage.TimeSpanOK)" class="validation-error" />

                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                    @if (ShowAccomodations)
                    {
                        <hr>
                        @* List of Accommodations - added and removed as Stages*@
                        <table class="table-container">
                            <thead>
                                <tr class="table-caption">
                                    <th style="text-align: left; border-right: none; font-size: large;" colspan="6">
                                        Noclegi: <FluentIcon Id="AccId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="AccId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Informacja o noclegach </FluentTooltip>
                                    </th>
                                    <th style="text-align: right; border-left: none; font-size: large;" colspan="1">
                                        <FluentIcon Id="AccPictureId" 
                                        Value="@(new Icons.Regular.Size24.Bed())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                </tr>
                                <tr class="table-header-left">
                                    <th>Etap</th>
                                    <th>Państwo</th>
                                    <th>Noclegi</th>
                                    <th>Faktura 
                                        <FluentIcon Id="AccInvId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="AccInvId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right MaxWidth="250px" Delay=50>Zaznacz, jeśli noclegi były opłacone przez PIA lub jeśli noclegi opłacono ze swoich środków. Fakturę za noclegi opłacone ze swoich środków dodaj w sekcji 'Pozostałe faktury i bilety'. Odznacz jako niekatywne, jeśli nie korzystałeś z noclegu zapewnionego przez PIA oraz gdy nie masz rachunku ani faktury potwierdzającej pobyt – należy Ci się ryczałt. </FluentTooltip>
                                    </th>
                                    <th>Ryczałt <FluentIcon Id="AccMaxRateId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" /></th>
                                    <FluentTooltip Anchor="AccMaxRateId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right MaxWidth="250px" Delay=50> Wartość ryczałtu za nocleg – ryczałt należny, jeśli pracodawca nie zapewnia noclegu.</FluentTooltip>
                                    <th>Waluta</th>
                                    <th>Razem 
                                        <FluentIcon Id="AccTotalRateId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="AccTotalRateId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Left MaxWidth="250px" Delay=50> Ryczałt za nocleg do wypłaty dla pracownika</FluentTooltip>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var accommodation in formItem.Accommodations)
                                { @if (accommodation.Nights > 0)
                                    {
                                        <tr>
                                            <td style="text-align: center;">@accommodation.StageId</td>
                                            <td style="text-align: center;">@accommodation.CountryName</td>
                                            <td style="text-align: center;">@accommodation.Nights</td>
                                            <td style="text-align: center;">
                                                <div>
                                                    <FluentSwitch Disabled="@IsControlAccomodationEditDisabled()" @bind-Value:get="@accommodation.HasInvoices"
                                                    @bind-Value:set="@(value => HandleAccommodationHasInvoices(accommodation, value))" />
                                                </div>
                                            </td>
                                            <td>
                                                <div style="text-align: center;">
                                                    <span style="@(accommodation.HasInvoices ? "color: gray;" : "")">
                                                        @accommodation.AllowanceRate
                                                    </span>
                                                </div>

                                            </td>
                                            <td style="text-align: center;">
                                                <span style="@(accommodation.HasInvoices ? "color: gray;" : "")">
                                                    @accommodation.AllowanceRateCurrency
                                                </span>
                                            </td>
                                            <td>
                                                @accommodation.Total
                                            </td>
                                        </tr>
                                    }

                                }
                            </tbody>
                        </table>                        

                    }
                    @if (ShowMeals)
                    {
                        <DailyMeal_EditComponent_InputNumber _content="formItem.DailyMeals" OnDailyMealChanged="HandleDailyMealChanged" Disabled="!stroz" />
                    }
                    @if (IsPrivateCar && (stroz || stks || stkstl || stal11 || stal12))
                    {
                        <MileageRegisterEditComponent ParentEditContext="@_editContext"
                        MileageRegister="@formItem.MileageRegister"
                        EmployeeLongName="@formItem.EmployeeName"
                        EmployeeEmpId="@formItem.EnovaEmpId"
                        Disabled="@IsControlMileageEditDisabled()" />
                        <FluentValidationMessage For="@(() => formItem.MileageRegister.Entries)" class="validation-error" />
                    }
                    @if (ShowLocalTravels)
                    {
                        <hr>
                        <table class="table-container">
                            <thead class="table-header-left">
                                <tr class="table-caption">
                                    <th style="text-align: left; border-right: none; font-size: large;" colspan="5">
                                        Ryczałt na pokrycie kosztów dojazdu środkami komunikacji 
                                        <FluentIcon Id="LocTravId" 
                                        Value="@(new Icons.Regular.Size16.Info())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                    <th style="text-align: right; border-left: none; font-size: large;" colspan="1">
                                        <FluentIcon Id="LocTravPictureId" 
                                        Value="@(new Icons.Regular.Size24.TicketDiagonal())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                </tr>
                                <tr>
                                    <th>Etap</th>
                                    <th>Państwo</th>
                                    <th>Dni</th>
                                    <th>Ryczałt</th>
                                    <th>Razem</th>
                                    <th>Maks dni</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var localTravel in formItem.LocalTravels)
                                {
                                    @if (localTravel.Duration > 0)
                                    {
                                        <tr>

                                            <td>@localTravel.StageId</td>
                                            <td>@localTravel.CountryName</td>
                                            <td>
                                                <div Style="max-width: 80px;">
                                                    <FluentNumberField Disabled="@(((localTravel.Duration == 0) || IsControlLocalTravelEditDisabled())? true : false)"
                                                    Min="0"
                                                    Max="@localTravel.Duration.ToString()"
                                                    @bind-Value:get="@localTravel.Days"
                                                    @bind-Value:set="(value => HandleLocalTravelChanged(localTravel, value))" />
                                                </div>
                                            </td>
                                            <td>
                                                @localTravel.AllowanceRate.ToString("F2")
                                            </td>
                                            <td>@localTravel.Total.ToString("F2") @localTravel.AllowanceRateCurrency</td>

                                            <td>@localTravel.Duration</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <FluentTooltip Anchor="LocTravId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right MaxWidth="250px" Delay=50> Wypełnij jeśli korzystałeś z komunikacji miejskiej w mieście docelowym i nie dysponujesz biletami lub fakturami. Jeśli posiadasz bilety lub faktury za komunikację miejską czy taksówkę, dołącz je w sekcji "Pozostałe faktury i bilety"  - ryczałt się nie należy.</FluentTooltip>
                    }
                    @if (ShowTransits)
                    {
                        <hr>
                        <table class="table-container">
                            <thead>
                                <tr class="table-caption">
                                    <th style="text-align: left; border-right: none; font-size: large; width: 85%;" >
                                        Dojazd z dworca/lotniska do Hotelu
                                        <FluentIcon Id="TransitId"
                                        Value="@(new Icons.Regular.Size16.Info())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                    <th style="text-align: right; border-left: none; font-size: large; width: 15%;" >
                                        <FluentIcon Id="TransitPictureId" 
                                        Value="@(new Icons.Regular.Size24.DocumentPercent())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <td colspan="3">
                                    <FluentRadioGroup Disabled="@IsControlTransitEditDisabled()" @bind-Value:get="formItem.Transit.Directions"
                                    @bind-Value:set="HandleTransitDirectionsChanged">
                                        <FluentRadio Value="0">Mam fakturę/bilet w obie strony</FluentRadio>
                                        <FluentRadio Value="1">Mam fakturę/bilet w jedną stronę</FluentRadio>
                                        <FluentRadio Value="2">Nie mam faktury/biletu w żadnym kierunku</FluentRadio>
                                    </FluentRadioGroup>
                                </td>
                            </tbody>
                        </table>
                        <FluentTooltip Anchor="TransitId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right MaxWidth="250px" Delay=50> Wypełnij jeśli korzystałeś z komunikacji miejskiej w mieście docelowym i nie dysponujesz biletami lub fakturami.</FluentTooltip>

                    }
                    @if (ShowBills)
                    {
                        <table class="table-container">
                            <thead class="table-caption">
                                <tr class="table-caption">
                                    <th style="text-align: left; border-right: none; font-size: large;" colspan="6">
                                        Pozostałe faktury i bilety
                                        <FluentIcon Id="BillsInfoId"
                                        Value="@(new Icons.Regular.Size16.Info())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="BillsInfoId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Wprowadź informacje dotyczące zwrotu innych udokumentowanych i uzasadnionych wydatków, takich jak samodzielnie opłacone noclegi, bilety komunikacji miejskiej oraz posiłki. Upewnij się, że wszystkie wydatki są poparte odpowiednimi rachunkami lub fakturami, które należy dołączyć.</FluentTooltip>
                                    </th>
                                    <th style="text-align: right; border-left: none; font-size: large;" colspan="1">
                                        <FluentIcon Id="BillsInfoPictureId"
                                        Value="@(new Icons.Regular.Size24.MoneyHand())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                    </th>
                                </tr>
                                <tr>
                                    <th style="width: 50px;">Lp.</th>
                                    <th style="width: 120px;">Kwota brutto</th>
                                    <th style="width: 120px;">Waluta</th>
                                    <th style="width: 120px;">Rodzaj kosztu</th>
                                    <th style="width: 80px;">Faktura
                                        <FluentIcon Id="InvoiceInfoId"
                                        Value="@(new Icons.Regular.Size16.Info())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="InvoiceInfoId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Left Delay=50>Zaznacz, jeśli faktura za nocleg jest na PIA (dodatkowo należy uzupełnić wystawcę faktury, nr NIP, nr faktury i datę wystawienia). Odznacz jako nieaktywne, jeśli faktura jest imienna.</FluentTooltip>

                                    </th>
                                    <th>Załącznik

                                        <FluentIcon Id="AttachmentId"
                                        Value="@(new Icons.Regular.Size16.Info())"
                                        Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                                        <FluentTooltip Anchor="AttachmentId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Left Delay=50>Dołącz skan faktury za dokonane wydatki. W przypadku płatności kartą (płatność w walucie) dołącz dodatkowo potwierdzenie płatności z banku, a kwotę brutto podaj w PLN.</FluentTooltip>
                                    </th>
                                    <th style="width: 160px;">Akcje</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var bill in formItem.Bills)
                                {
                                    var currencyVmNames = formItem.Stages
                                    .Select(stage => stage.CountryCurrency)
                                    .Distinct()
                                    .ToList();

                                    <tr class="BillTable-row">
                                        <td class="table-caption">@bill.Id</td>
                                        <td style="width: 80px !important;">
                                            <FluentNumberField Disabled="@IsControlBillEditDisabled()"
                                            Min="0"
                                            @bind-Value:get="@bill.Amount"
                                            @bind-Value:set="(value => HandleBillChanged(bill, value))"
                                            Style="width: 120px;" />
                                            <FluentValidationMessage For="@(() => bill.Amount)" class="validation-error" />
                                        </td>
                                        <td style="width: 80px !important;">
                                            <FluentSelect TOption="string"
                                            Disabled="@IsControlBillEditDisabled()"
                                            Items="currencyVmNames"
                                            @bind-Value:get="@bill.Currency"
                                            @bind-Value:set="@(value => HandleBillChange(bill, value))"
                                            Width="120px"
                                            />
                                        </td>
                                        <td style="width: 100px !important;">
                                            <FluentSelect TOption="string"
                                            Disabled="@IsControlBillEditDisabled()"
                                            Items="@_billReasons"
                                            @bind-Value="@bill.Reason"
                                            @bind-Value:after="@(() => HandleBillReasonChange(bill))"
                                            Placeholder="Wybierz uzasadnienie..."
                                            Width="120px" />
                                            <FluentValidationMessage For="@(() => bill.Reason)" class="validation-error" />
                                        </td>
                                        <td>
                                            <FluentSwitch Id="billInvoiceId"
                                            Disabled="@(!(bill.Reason == "Nocleg") ||  !stroz)"
                                            @bind-Value="@bill.Invoice"
                                            @bind-Value:after="@(() => HandleBillInvoiceTitle(bill))" 
                                            />
                                        </td>
                                        <td style="width: 150px;">
                                            <div>
                                                @{
                                                    var attbillId = $"attbillId-{bill.Id}";
                                                }

                                                @for (int i = 0; i < bill.BillFiles.Count; i++)
                                                {
                                                    var billFile = bill.BillFiles[i];
                                                    var remFileId = $"remFileId-{billFile.Id}";
                                                    var viewFileId = $"viewFileId-{billFile.Id}";

                                                    <div class="bill-file-container">

                                                        <span class="bill-file-name">@billFile.OriginalFileName</span>
                                                        <div class="bill-file-buttons">
                                                            <FluentButton Id="@remFileId"
                                                            Disabled="@IsControlBillEditDisabled()"
                                                            IconEnd="@(new Icons.Regular.Size20.DeleteOff())"
                                                            OnClick="@(() => RemoveFileFromBill(bill, billFile))" />
                                                            <FluentTooltip Anchor="@remFileId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Usuń załącznik</FluentTooltip>
                                                            <FluentButton Id="@viewFileId" Disabled="false" IconEnd="@(new Icons.Filled.Size20.ArrowDownload())" OnClick="@(() => ViewAttachment(billFile.AttUrl))" />
                                                            <FluentTooltip Anchor="@viewFileId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Pobierz/Otwórz załącznik</FluentTooltip>
                                                        </div>
                                                        <FluentValidationMessage For="@(() => billFile.FilePath)" class="validation-error" />
                                                        <FluentValidationMessage For="@(() => billFile.OriginalFileName)" class="validation-error" />
                                                        <FluentValidationMessage For="@(() => billFile.AttUrl)" class="validation-error" />
                                                    </div>
                                                    @if (i < bill.BillFiles.Count - 1)
                                                    {
                                                        <hr class="bill-file-separator" />
                                                    }
                                                }
                                                <FluentButton Id="@attbillId"
                                                Disabled="@IsControlBillEditDisabled()"
                                                IconEnd="@(new Icons.Filled.Size20.Attach())"
                                                OnClick="@(() => UploadFileForBill(bill))" />
                                                <FluentTooltip Anchor="@attbillId"
                                                HideTooltipOnCursorLeave="true"
                                                Position=TooltipPosition.Right
                                                Delay=50>Dodaj załącznik</FluentTooltip>
                                            </div>
                                            <FluentValidationMessage For="@(() => bill.BillFiles)" class="validation-error" />
                                        </td>
                                        <td>
                                            @{
                                                var billRemId = $"billRemId-{bill.Id}";
                                            }
                                            <div>
                                                <FluentButton Id="@billRemId"
                                                Disabled="@IsControlBillEditDisabled()"
                                                IconEnd="@(new Icons.Filled.Size20.Delete())"
                                                OnClick="@(() => RemoveBill(bill))"
                                                Style="width: 120px;" />
                                                <FluentTooltip Anchor="@billRemId"
                                                HideTooltipOnCursorLeave="true"
                                                Position=TooltipPosition.Right
                                                Delay=50>Usuń fakturę/bilet</FluentTooltip>
                                            </div>
                                        </td>
                                    </tr>
                                    @if (bill.Invoice)
                                    {
                                        <td class="table-caption"></td>
                                        <td >
                                            <FluentLabel>Wystawca: </FluentLabel>
                                            <FluentTextField Disabled="@IsControlBillEditDisabled()" @bind-Value="@bill.BusinessPartner.Name" @bind-Value:after="@(() => _editContext.Validate())" />
                                            <FluentValidationMessage For="@(() => bill.BusinessPartner.Name)" class="validation-error" />
                                        </td>
                                        <td>
                                            <FluentLabel>Numer NIP: </FluentLabel>
                                            <FluentTextField Disabled="@IsControlBillEditDisabled()" @bind-Value="@bill.BusinessPartner.VatId" 
                                            @bind-Value:after="@(() => _editContext.Validate())" />

                                            <FluentValidationMessage For="@(() => bill.BusinessPartner.VatId)" class="validation-error" />
                                        </td>
                                        <td colspan="2">
                                            <div style="display: flex; align-items: start; justify-content: center; gap: 10px; width: 100%;">

                                                <!-- Parking Label & Switch -->
                                                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; width: 80px; min-height: 50px; gap: 15px; flex-grow: 1;">
                                                    <FluentLabel>Parking</FluentLabel>
                                                    <FluentSwitch Disabled="@IsControlBillEditDisabled()"
                                                    @bind-Value="@bill.isParking" />
                                                </div>

                                                @if (bill.isParking)
                                                {
                                                    <!-- Kwota Label & Number Field -->
                                                    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; width: 80px; min-height: 50px; gap: 10px; flex-grow: 1;">
                                                        <FluentLabel>Kwota:</FluentLabel>
                                                        <FluentNumberField @bind-Value="@bill.ParkingAmount"
                                                        Style="width: 80px;" />
                                                    </div>
                                                }

                                            </div>

                                            <FluentValidationMessage For="@(() => bill.ParkingAmount)" class="validation-error" />
                                        </td>


                                        <td >
                                            <FluentLabel>Numer faktury: </FluentLabel>
                                            <FluentTextField Disabled="@(IsControlBillInvoiceNumberEditDisabled())"
                                            @bind-Value="@bill.InvoiceNumber" 
                                            @bind-Value:after="@(() => _editContext.Validate())"
                                            />
                                            <FluentValidationMessage For="@(() => bill.InvoiceNumber)" class="validation-error" />
                                        </td>
                                        <td>
                                            <FluentLabel>Data wystawienia: </FluentLabel>
                                            <FluentDatePicker Disabled="@IsControlBillEditDisabled()" Value="@(bill.InvoiceDate)"
                                            ValueChanged="@(e => HandleInvoiceDateChanged(bill, e.ToDateTime()))" />
                                            <FluentValidationMessage For="@(() => bill.InvoiceDate)" class="validation-error" />
                                        </td>
                                    }

                                }
                            </tbody>
                        </table>


                        <FluentButton Disabled="@IsControlBillEditDisabled()" Id="addBill" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddBill())" Style="margin-bottom: 20px;" />

                        <hr />
                    }
                    @if (ShowSummary)
                    {
                        <div class="all-tables-wrapper">
                            <div class="tables-wrapper">
                                <!-- Left table -->
                                <div>
                                    <table class="table-container">
                                        <thead> 
                                            <tr class="table-header-left">
                                                <th>Podsumowanie - dieta krajowa</th>
                                                <th>Wartość</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td style="text-align: left;">Pobrana zaliczka</td>
                                                <td>@formItem.AdvancePaymentAmount @formItem.AdvancePaymentCurrency</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: left;">Należna dieta krajowa</td>
                                                <td>@Math.Max(0, formItem.SumAllowancePL.GetValueOrDefault() + formItem.DeductionMealsPL.GetValueOrDefault()).ToString("0.00") PLN</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: left;">Ryczałt za nocleg</td>
                                                <td>@formItem.AccomodationAllowanceSumPL.GetValueOrDefault().ToString("0.00") PLN</td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: left;">Ryczałt dojazdy lokalne</td>
                                                <td>@formItem.SumLocalTravelAllowancePL.GetValueOrDefault().ToString("0.00") PLN</td>
                                            </tr>
                                            @if (IsPrivateCar)
                                            {
                                                <tr>
                                                    <td style="text-align: left;">Kilometrówka</td>
                                                    <td>@formItem.SumPrivateVehicleAllowance PLN</td>
                                                </tr>
                                            }
                                            <tr>
                                                <td style="text-align: left;">Pozostałe faktury i bilety</td>
                                                <td>@formItem.TotalBillsPL.ToString("0.00") PLN</td>
                                            </tr>

                                            <tr>
                                                <td>Razem w PLN</td>
                                                <td>@formItem.TotalAllowancePL.ToString("0.00") PLN</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Right table -->
                                @if (formItem.Stages.Count > 1)
                                {
                                    var totalNotPLinPLN = (formItem.TotalAllowanceNotPL * formItem.CurrencyExchangeRate).ToString("0.00");
                                    <div>
                                        <table class="table-container">
                                            <thead>
                                                <tr class="table-header-right">
                                                    <th>Podsumowanie - dieta zagraniczna</th>
                                                    <th>Wartość</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td style="text-align: left;">Należna dieta zagraniczna</td>
                                                    <td>
                                                        @Math.Max(formItem.SumAllowanceNotPL.GetValueOrDefault() * 0.25m, formItem.SumAllowanceNotPL.GetValueOrDefault() + formItem.DeductionMealsNotPL.GetValueOrDefault()).ToString("0.00") @formItem.DestinationCountry.CurrencyVmName

                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="text-align: left;">Ryczałt za nocleg</td>
                                                    <td>
                                                        @(formItem.AccomodationAllowanceSumNotPL != null ? ((decimal)formItem.AccomodationAllowanceSumNotPL).ToString("0.00") : "0.00")
                                                        @if (formItem.DestinationCountry.CurrencyVmName != "PLN")
                                                        {
                                                            var currency = $" {formItem.DestinationCountry.CurrencyVmName}";
                                                            @currency
                                                        }
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="text-align: left;">Ryczałt dojazdy lokalne</td>
                                                    <td>
                                                        @(formItem.SumLocalTravelAllowanceNotPL != null ? ((decimal)formItem.SumLocalTravelAllowanceNotPL).ToString("0.00") : "0.00")
                                                        @if (formItem.DestinationCountry.CurrencyVmName != "PLN")
                                                        {
                                                            var currency = $" {formItem.DestinationCountry.CurrencyVmName}";
                                                            @currency
                                                        }
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="text-align: left;">Tranzyt</td>
                                                    <td>
                                                        @(formItem.Transit.Total != null ? ((decimal)formItem.Transit.Total).ToString("0.00") : "0.00")
                                                        @if (formItem.DestinationCountry.CurrencyVmName != "PLN")
                                                        {
                                                            var currency = $" {formItem.DestinationCountry.CurrencyVmName}";
                                                            @currency
                                                        }
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="text-align: left;">Faktury zagraniczne</td>
                                                    <td>@formItem.TotalBillsNotPL.ToString("0.00")  @formItem.DestinationCountryCurrency</td>
                                                </tr>
                                                <tr>
                                                    <td style="text-align: left;">Kurs waluty @formItem.DestinationCountryCurrency z dnia @formItem.CurrencyExchangeRateDate</td>
                                                    <td>
                                                        @formItem.CurrencyExchangeRate.ToString("0.0000") PLN
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>Razem w PLN</td>
                                                    <td>@totalNotPLinPLN  PLN </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                <p></p>

                            </div>
                            <div class="third-table-wrapper">
                                <table class="table-container">
                                    <thead>
                                        <tr class="table-header-left">

                                            @if (formItem.TotalPayOut >= 0)
                                            {
                                                <th>
                                                    Łącznie do wypłaty dla pracownika
                                                </th>
                                            }
                                            else
                                            {
                                                <th>
                                                    Łącznie do zwrotu przez pracownika
                                                </th>
                                            }
                                            <th>@formItem.TotalPayOut.ToString("0.00") PLN</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>

                        @*Receipt decision*@
                        @if (!(stal11 || stal12 || strozk || stwysroz || stbladroz))
                        {
                            <table class="table-container">
                                <caption class="table-caption">
                                    Rozliczenie
                                </caption>
                                <thead>
                                    <tr class="table-header-left">
                                        <th>Kwota</th>
                                        <th>Wypłata</th>

                                        @if (!formItem.ReceiptPaymentCash)
                                        {
                                            <th>
                                                Kasa
                                            </th>
                                        }
                                        else
                                        {
                                            <th>
                                                Numer konta
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr style="height: 40px;">

                                        @if (stroz || stks || stkstl || strozk)
                                        {
                                            <td style="text-align: left;">
                                                @formItem.TotalPayOut.ToString("0.00") PLN

                                            </td>
                                            <td style="text-align: left;">
                                                <FluentSelect Disabled="@IsControlReceiptPaymentDisabled()"
                                                Items=@AdvancePaymentMethodsInt 
                                                TOption="Option<int>"
                                                OptionText="@(a => a.Text)"
                                                OptionValue="@(a => a.Value.ToString())"
                                                OptionSelected="@(a => a.Selected)"
                                                @bind-Value="@ReceiptPaymentCashString"
                                                Width="150px" />
                                            </td>
                                            @if (!formItem.ReceiptPaymentCash)
                                            {
                                                <td style="text-align: left; width: 300px;">
                                                    <FluentAutocomplete TOption="LocationVm"
                                                    Disabled="@IsControlReceiptPaymentDisabled()"
                                                    SelectValueOnTab="true"
                                                    AutoComplete="on"
                                                    MaximumOptionsSearch="30"
                                                    OnOptionsSearch="@OnLocationSearch"
                                                    Placeholder="wybierz lokalizację..."
                                                    MaximumSelectedOptions="1"
                                                    OptionText="@(p => p.SapNumber + ' ' + p.DisplayName)"
                                                    @bind-SelectedOptions="@_selectedReceiptLocation"
                                                    @bind-SelectedOptions:after="@HandleLocationReceiptChange"
                                                    Width="180px" />
                                                    <FluentValidationMessage For="@(() => formItem.CashPointReceipt.SapNumber)" class="validation-error" />
                                                </td>
                                            }
                                            @if (formItem.ReceiptPaymentCash)
                                            {
                                                <td style="text-align: left; width: 300px;">
                                                    <FluentTextField Disabled="@IsControlReceiptPaymentDisabled()"
                                                    Placeholder="wprowadź numer konta"
                                                    @bind-Value="@formItem.ReceiptBankAccountNumber"
                                                    Style="width: 250px;" />
                                                    <FluentValidationMessage For="@(() => formItem.ReceiptBankAccountNumber)" class="validation-error" />
                                                </td>
                                            }

                                        }
                                    </tr>
                                </tbody>
                            </table>
                        }
                        @if ((stks || stkstl || stbladroz) && formItem.ReceiptPaymentCash)
                        {
                            <BankTransferMappingEditComponent BTItem="@formItem.BTMappingPayout" GLAccounts="@_glAccounts" FormStatus="@formItem.Status" UserContext="@_userContext" />
                        }
                    }

                    <FluentValidationSummary />
                    @* Aprobaty i przyciski *@
                    @if (strej || stroz || stal11)
                    {
                        <div>
                            <table class="table-container" style="width: 100%; max-width: 500px;">
                                <tr style="height: 40px;">
                                    <th class="table-caption">
                                        Aprobujący:
                                    </th>
                                    <th>
                                        @if (strej || stroz)
                                        {
                                            <FluentSelect TOption="OrganisationRoleForFormVm"
                                            Id="AL1Id"
                                            Autofocus="true"
                                            Items="@formItem.Level1Approvers"
                                            Multiple="false"
                                            OptionValue="@(p => p.EmpId.ToString())"
                                            OptionText="@(p => p.LongName)"
                                            @bind-SelectedOption="@approverL1"
                                            Height="200px"
                                            @onchange="HandleChangeApproverL1" />
                                        }
                                        @if (stal11)
                                        {
                                            <FluentSelect TOption="OrganisationRoleForFormVm"
                                            Id="AL5Id"
                                            Autofocus="true"
                                            Items="@formItem.Level5Approvers"
                                            Multiple="false"
                                            OptionValue="@(p => p.EmpId.ToString())"
                                            OptionText="@(p => p.LongName)"
                                            OptionSelected="@(p => p.IsDefault)"
                                            @bind-SelectedOption="@approverL3"
                                            Height="200px"
                                            @onchange="HandleChangeApproverL5" />
                                        }
                                    </th>
                                </tr>
                            </table>
                        </div>
                    }
                </div>
                <div style="margin-top: 20px;">
                    @if(IsButtonSendVisible()){

                        <FluentButton IconEnd="@(new Icons.Regular.Size16.Save())"
                        Appearance="Appearance.Outline"
                        Id="SaveFormId"
                        OnClick="@SaveForm"
                        Disabled = "@DisableSaveButton"
                        BackgroundColor="var(--accent-fill-rest)" 
                        Style="width: 100px"> 
                            Zapisz </FluentButton>
                        <FluentSpacer Width="@buttonSpacer" />

                        <FluentButton IconEnd="@(new Icons.Regular.Size16.Send())"
                        Appearance="Appearance.Accent"
                        Id="SendFormId"
                        OnClick="@SendForm"
                        Disabled = "@DisableSendButton"
                        BackgroundColor="var(--success)"
                        Color="white"
                        Style="width: 100px">
                            Wyślij </FluentButton>
                        <FluentSpacer Width="@buttonSpacer" />
                    }

                    @if(IsButtonApproveVisible()){
                        <FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowRight())"
                        Appearance="Appearance.Accent"
                        Id="ApproveFormId"
                        OnClick="@ApproveForm" 
                        BackgroundColor="var(--success)"
                        Color="white"
                        Style="width: 100px"
                        Disabled="@DisableApproveButton"> 
                            Zatwierdź </FluentButton>
                        <FluentSpacer Width="@buttonSpacer" />

                        <FluentButton IconEnd="@(new Icons.Regular.Size16.Dismiss())"
                        Appearance="Appearance.Accent"
                        Id = "RejectFormId"
                        OnClick="@RejectForm"
                        BackgroundColor="var(--error)"
                        Style="width: 100px"
                        Disabled="@DisableRejectButton">
                            Odrzuć </FluentButton>
                        <FluentSpacer Width="@buttonSpacer" />
                    }

                    <FluentButton IconEnd="@(new Icons.Regular.Size16.CalendarCancel())"
                    Appearance="Appearance.Accent"
                    Id = "CancelFormId"
                    OnClick="@CancelForm"
                    BackgroundColor="var(--accent-fill-rest)"
                    Color="white"
                    Style="width: 100px"> 
                        Anuluj </FluentButton>

                    <FluentButton IconEnd="@(new Icons.Regular.Size16.CheckmarkCircle())"
                    Appearance="Appearance.Outline"
                    Id = "CheckFormId"
                    OnClick="@CheckForm" 
                    BackgroundColor="var(--info)" 
                    Style="width: 100px"> 
                        Sprawdzam </FluentButton>

                </div>
                <p></p>
                @if(formItem.RejectReasons.Count() > 0)
                {
                    <table class="small-table-container">
                        <thead>
                            <tr class="small-table-caption">
                                <th colspan="4">
                                    Powody odrzucenia
                                </th>

                            </tr>
                            <tr class="small-table-caption" >
                                <th style="width: 130px;">Data</th>
                                <th style="width: 100px;">Status</th>
                                <th style="width: 100px;">Odrzucający</th>
                                <th style="width: 100px;">Powód</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in formItem.RejectReasons)
                            {
                                <tr>
                                    <td>
                                        @item.RejectTime
                                    </td>
                                    <td>
                                        @item.RejectFormStatus
                                    </td>
                                    <td>
                                        @item.ApproverName
                                    </td>
                                    <td>
                                        @item.RejectReasonText
                                    </td>
                                </tr>

                            }



                        </tbody>

                    </table>
                }
                <div>

                    <FluentTooltip Anchor="SaveFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Pozwala zapisać formularz do późniejszej edycji.</FluentTooltip>
                    <FluentTooltip Anchor="SendFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Wysła formularz do akceptacji.</FluentTooltip>
                    <FluentTooltip Anchor="ApproveFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Zatwierdza formularz.</FluentTooltip>
                    <FluentTooltip Anchor="RejectFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Odrzuca formularz.</FluentTooltip>
                    <FluentTooltip Anchor="CancelFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Zamyka formularz bez zapisywania zmian.</FluentTooltip>
                    <FluentTooltip Anchor="CheckFormId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=50> Funkcja testowa - sprawdza poprawność formularza.</FluentTooltip>
                </div>
            </EditForm>
            <InputFile id="fileInput" OnChange="HandleFileUpload" accept=".png, .jpg, .pdf" style="display: none;" />
        }
        else
        {
            <div class="new-form-section">
                <FluentLabel><b>Brak uprawnień do wyświetlenia formularza!</b></FluentLabel>
            </div>
        }
    }

</div>
@code {
        #region Declarations
        // private Timer _debounceTimer;
        [Parameter] public int Id { get; set; }
    private EditContext _editContext;
    private FluentValidationValidator? _fluentValidationValidator;
    private string _srcPage;
    private bool blankPage = true;
    private bool isLoading { get; set; } = true;
    // private bool userAllowed { get; set; } = false;
    #region General
    private BusinessTravelFormVm formItem = new BusinessTravelFormVm();
    private FormUserContext _userContext = new FormUserContext("Accountant", "Technician");
    private OrganisationRoleForFormVm approverL1 { get; set; }
    // private OrganisationRoleForFormVm approverL2 { get; set; }
    private OrganisationRoleForFormVm approverL3 { get; set; }
    // private OrganisationRoleForFormVm approverL4 { get; set; }
    // private OrganisationRoleForFormVm approverL5 { get; set; }
    private bool strej = false;
    private bool stal1 = false;
    private bool stal2 = false;
    private bool stzk = false;
    private bool stzks = false;
    private bool stzkstl = false;
    private bool stroz = false;
    private bool stks = false;
    private bool stkstl = false;
    private bool stal11 = false;
    private bool stal12 = false;
    private bool strozk = false;
    private bool stwys = false;
    private bool stblad = false;
    private bool strozend = false;
    private bool stzam = false;
    private bool stodrz = false;
    private bool stwysroz = false;
    private bool stbladroz = false;
    private bool DisableApproveButton = true;
    private bool DisableSaveButton = true;
    private bool DisableSendButton = true;
    private OrganisationVm _organisation { get; set; }
    // private WorkflowTemplateVm wf { get; set; }
    private string FormName = "BusinessTravelFormVm";
    // private bool local = true;
    private int buttonSpacer = 50;
    private string Title { get; set; } = string.Empty;

    private IQueryable<EmployeeVm> _employees { get; set; }
    private IEnumerable<EmployeeVm> SelectedEmpl { get; set; }
    // private IQueryable<string> _Statuses = Enum.GetValues(typeof(BusinessTravelStatuses)).Cast<BusinessTravelStatuses>().Select(c => c.ToString()).AsQueryable();

    #endregion
    #region Time

    // private DateTime SelectedStartDate = DateTime.Now;
    // private DateTime SelectedEndDate = DateTime.Now;
    // private DateOnly? SelectedDateFrom { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    // private TimeOnly? SelectedTimeFrom { get; set; } = TimeOnly.FromDateTime(DateTime.Now);
    // private DateTime? SelectedDateTimeFrom { get; set; }

    // private DateOnly? SelectedDateTo { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    // private TimeOnly? SelectedTimeTo { get; set; } = TimeOnly.FromDateTime(DateTime.Now);
    // private DateTime? SelectedDateTimeTo { get; set; }
    // private string DateTimeValidationMessage { get; set; } = string.Empty;
    // private string StagesDatesErrorMessage { get; set; } = string.Empty;
    // private List<string> StagesDatesErrorMessages { get; set; } = new();

    #endregion Time
    #region Finance
    public string ReceiptPaymentCashString
    {
        get => formItem.ReceiptPaymentCash ?  "1" : "0";
        set => formItem.ReceiptPaymentCash = value == "1";
    }
    public string AdvancePaymentCashString
    {
        get => formItem.AdvancePaymentCash ?  "1" : "0";
        set => formItem.AdvancePaymentCash = value == "1";
    }
    private List<Option<int>> AdvancePaymentMethodsInt = new()
        {
            { new Option<int> { Value = 0, Text = "Wypłata w Kasie"} },
            { new Option<int> { Value = 1, Text = "Wypłata przelewem" } },
        };

    private List<string> PrivateVehEngSize = new(){
        "do 900 cm3",
        "powyżej 900 cm3"
    };

    private Bill CurrentBillForUpload { get; set; } = new Bill();
    private IQueryable<string> _billReasons = Enum.GetValues(typeof(BillReasons))
        .Cast<BillReasons>().Select(c => c.ToString()).AsQueryable();
    private IEnumerable<CountryVm> SelectedCountry { get; set; }
    private IQueryable<CountryVm> Countries { get; set; }
    private CountryVm Origin { get; set; }
    private List<LocationVm> _locations { get; set; } = new List<LocationVm>();
    IEnumerable<LocationVm> _selectedLocation = Array.Empty<LocationVm>();
    IEnumerable<LocationVm> _selectedReceiptLocation = Array.Empty<LocationVm>();
    IEnumerable<LocationVm> _selectedFormCostLocation = Array.Empty<LocationVm>();
    IEnumerable<SapCostCenterVm> _selecteSapCostCenter = Array.Empty<SapCostCenterVm>();
    private IEnumerable<CostCenterVm> _costCenters { get; set; }
    private IEnumerable<SapCostCenterVm> _sapCostCenters{get; set;}
    private IEnumerable<GLAccountVm> _glAccounts { get; set; }
    private IEnumerable<VATRateVm> _vatRates { get; set; }
    // private IEnumerable<CostCenterVm> _selectedCostCenter = Array.Empty<CostCenterVm>();
    private List<SimpleLocation> simpleLocations { get; set; }
    private List<SimpleDepartment> simpleDepartments { get; set; }

    #endregion
    #region DestinationsObjectivesMeans
    private List<CountryVm> SelectedCountries { get; set; } = new();
    private string SelectedCity { get; set; } = string.Empty;
    private IQueryable<string> _cities = Enum.GetValues(typeof(Cities))
        .Cast<Cities>().Select(c => c.ToString()).AsQueryable();
    private IEnumerable<string> SelectedObjective { get; set; }
    private IQueryable<string> _objectives = new List<string>
    {
        "audyt",
        "dostarczenie dokumentów",
        "dostawa / odbiór samochodu",
        "inwentaryzacja",
        "konferencja / kongres",
        "Management Meeting",
        "przewóz części / mebli itd.",
        "Road Show",
        "spotkanie biznesowe / z klientem",
        "spotkanie integracyjne",
        "sprawa sądowa",
        "szkolenie / warsztaty / egzamin"
    }.AsQueryable();
    private IQueryable<string> Conveyances = new List<string>
        {
            "Samochód służbowy",
            "Samochód prywatny",
            "Transport publiczny"
        }.AsQueryable();
    private IEnumerable<string> SelectedConveyance { get; set; }
    // private string SelectedConveyanceTxt { get; set; }
    private bool IsPrivateCar { get; set; } = false;
    private bool IsCompanyCar { get; set; } = false;
    private bool IsPublicTransport { get; set; } = false;
    private IEnumerable<string> SelectedCompanyCar { get; set; }

    #endregion
    #region SteeringBools
    private bool showForm { get; set; } = false;
    // private bool enableForm { get; set; } = false;
    private bool ShowStages { get; set; } = false;
    private bool ShowAccomodations { get; set; } = false;
    private bool ShowMeals { get; set; } = false;
    private bool ShowLocalTravels { get; set; } = false;
    private bool ShowTransits { get; set; } = false;
    private bool ShowCashier { get; set; } = false;
    private bool ShowBills { get; set; } = false;
    private bool ShowSummary { get; set; } = false;
    private bool ShowMileageReport { get; set; } = false;
    // private bool EnterInvoiceMapping { get; set; } = false;
    #endregion
    #region ControlEnableBools

    // private bool IsAdvancedPaymentDisabled { get; set; } = false; //wyłącza kontrolki do zaliczki
    // private bool IsCashPayoutNumberDisabled { get; set; } = false; //wyłącza kontrolki do zaliczki
    // private bool IsDateTimeDisabled { get; set; } = false; //wyłącza możliwość zmiany dat
    // private bool IsDestinationDisabled { get; set; } = true; //wyłącza możliwość zmiany celu podróży
    // private bool IsEmployeeDisabled { get; set; } = true; //wyłącza możliwość zmiany delegowanego
    // private bool IsTransportationDisabled { get; set; } = true; //wyłącza sekcję transportową
    // private bool IsMileageDisabled { get; set; } = true;
    // private bool IsBillsDisabled { get; set; } = true; //wyłącza możliwość zmiany wprowadzonych rachunków
    // private bool IsInvoiceMappingDisabled { get; set; } = true; //wyłącza możliwość edycji dekretacji faktury
    private bool isManualSwitchToggle = false;
    // private bool editControlDisabled = false;
    // private bool controlTransportSelectDisabled = false;
    // private bool canChangeApprover = false;
    // private bool ApproveButton = false;
    private bool DisableRejectButton = false;
    #endregion
    #region Dictionaries
    private List<NbpCurrencyRateVm> NbpCurrencies { get; set; }
    private IEnumerable<CompanyCarRegistrationNumberVm> CompanyCarRegistrationNumbers { get; set; }
    private NbpCurrencyRateVm AbroadCurrencyExchangeRate { get; set; }
    private NbpCurrencyRateVm OriginExchangeRate { get; set; } = new NbpCurrencyRateVm(
                        Id: 0,
                        Currency: "Polski Złoty",
                        Code: "PLN",
                        Mid: 1m,
                        RateDate: DateOnly.FromDateTime(DateTime.Today.AddDays(-1))
                        );
    #endregion
    #region Other
    // private bool test = false;
    private ManagerDeputyVm _managerDeputy {get; set;} = new ();
    private List<string> allowedEmp { get; set; } = new List<string>();
    private List<string> allowedEditor { get; set; } = new List<string>();
    private ApprovalVm approvalInfo { get; set; }
    private RejectReason lastRejectReason { get; set; }
    private bool hasValidationErrors = false;
    #endregion



    #endregion

    private void HandleAdvancePaymentSwitch(bool value){
        if(!value){
            formItem.AdvancePaymentAmount = 0;
        }

        formItem.AdvancePayment = value;
        isManualSwitchToggle = true;
        // // // // StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {

        if (Id != 0)
        {
            formItem = await _mediator.Send(new GetBusinessTripByIdQuery(Id));
            if(formItem == null){
                showForm = false;
                isLoading = false;
                return;
            }
        }

        _editContext = new EditContext(formItem);

        if (formItem.Status == "Odrzucone")
        {
            lastRejectReason = formItem.RejectReasons.Last();
            if (new[] { "AprobataL1", "AprobataL2", "ZaliczkaKasa", "ZaliczkaKsiegowosc", "ZaliczkaKsiegowoscTL", "WyslaneDoRobota", "BladRobota" }.Contains(lastRejectReason.RejectFormStatus))
            {
                formItem.Status = "Rejestracja";
            } else 
            {
                formItem.Status = "Rozliczenie";
            }

        };
        if (formItem.FormCostCenters.Count()>0){
            foreach(var item in formItem.FormCostCenters){
                item.formId = Guid.NewGuid();
            }
        }

        await Utils.GetUserName(_authenticationStateProvider, _userContext, _mediator);
        await GetDictionaries();

        SetSrcPage();
        AssignStatusBool();
        await GetAllowedPersons();
        if (stzam || strozend)
        {
            DisableApproveButton = true;
        }

        approvalInfo = new ApprovalVm()
            {
                Status = formItem.Status,
                EnovaEmpId = _userContext.EnovaEmpId,
                LongName = _userContext.LongName,
                Date = DateTime.Now,
                IsApproved = true
            };

        LoadAutocompleteControls();

        await SetupForm(formItem.Status);

        // var stopWatch3 = Stopwatch.StartNew();
        // await SetupForm(formItem.Status);
        // stopWatch3.Stop();
        // _logger.LogWarning($"SetupForm took {stopWatch3.ElapsedMilliseconds} ms");
        // Console.WriteLine();
        // stopwatch.Stop();
        // _logger.LogWarning($"ONINIT took {stopwatch.ElapsedMilliseconds} ms");
    }
    private async Task GetDictionaries(){
        _employees = await _mediator.Send(new GetAllEmployeesQuery());
        _costCenters = await _mediator.Send(new GetAllCostCenterIEnumQuery());
        _sapCostCenters = await _mediator.Send(new GetAllSapCostCenterIEnumQuery());

        _glAccounts = await _mediator.Send(new GetAllGLAccountIEnumQuery());
        var tempLocations = await _mediator.Send(new GetCashLocationsQuery());
        _locations = tempLocations.ToList();
        _vatRates = await _mediator.Send(new GetAllVatRateIEnumQuery());
        _organisation = await _mediator.Send(new GetOrganisationByEmpSapNumberQuery(_userContext.Employee.SapNumber));
        CompanyCarRegistrationNumbers = await _mediator.Send(new GetCompanyCarRegistrationNumbersQuery());
        simpleLocations = _sapCostCenters.GroupBy(s => s.LocationNumber).Select(g => new SimpleLocation
            {
                SAPLocationNumber = g.Key,
                SAPLocationName = g.First().LocationName
            })
            .ToList();

        simpleDepartments = _sapCostCenters
            .Select(s => new SimpleDepartment
                {
                    SAPDepartmentNumber = s.DepartmentNumber,
                    SAPDepartmentName = s.DepartmentName
                })
            .Distinct()
            .ToList();
    }

    // private void OnSimpleLocationSearch(OptionsSearchEventArgs<SimpleLocation> e)
    // {
    //     if (e.Text != null)
    //     {
    //         e.Items = simpleLocations
    //             .Where(a => a.SAPLocationNumber.Contains(e.Text, StringComparison.OrdinalIgnoreCase) || a.SAPLocationName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    //     }
    // }
    // private void OnDepartmentSearch(OptionsSearchEventArgs<SimpleDepartment> e)
    // {

    //     if (e.Text != null)
    //     {
    //         e.Items = simpleDepartments
    //             .Where(a => a.SAPDepartmentNumber.Contains(e.Text, StringComparison.OrdinalIgnoreCase) || a.SAPDepartmentName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    //     }
    // }
    // private List<SimpleLocation> GetSelectedLocations(SapCostCenterVm item) => item.SelectedLocations;
    // private void SetSelectedLocations(SapCostCenterVm item, List<SimpleLocation> value) => item.SelectedLocations = value;

    // private List<SimpleDepartment> GetSelectedDepartments(SapCostCenterVm item) => item.SelectedDepartments;
    // private void SetSelectedDepartments(SapCostCenterVm item, List<SimpleDepartment> value) => item.SelectedDepartments = value;
    // private async Task HandleSCCLocationChange(SapCostCenterVm scc)
    // {

    //     var tempLocation = SelectedLocation.FirstOrDefault();
    //     if (tempLocation is null)
    //     {
    //         SelectedDepartment = new SimpleDepartment[] { new SimpleDepartment() };
    //     }
    //     else if (!string.IsNullOrEmpty(tempLocation.LocationNumber))
    //     {
    //         simpleDepartments = sapCostCenters
    //         .Where(s => s.LocationNumber == tempLocation.LocationNumber)
    //         .Select(s => new SimpleDepartment
    //             {
    //                 SAPDepartmentNumber = s.DepartmentNumber,
    //                 SAPDepartmentName = s.DepartmentName
    //             })
    //             .Distinct()
    //             .ToList();
    //     }
    //     else
    //     {
    //         _SelectedSapCC = new List<SapCostCenterVm>();
    //         SelectedLocation = new SimpleLocation[] { new SimpleLocation() };
    //         SelectedDepartment = new SimpleDepartment[] { new SimpleDepartment() };
    //     }


    //     StateHasChanged();
    // }
    // private async Task HandleSCCDepartmentChange()
    // {
    //     var tempDepartment = SelectedDepartment.FirstOrDefault();
    //     var tempLocation = SelectedLocation.FirstOrDefault();
    //     if (tempDepartment is null)
    //     {
    //         _SelectedSapCC = new SapCostCenterVm[] { new SapCostCenterVm() };
    //     }
    //     else if (!string.IsNullOrEmpty(tempDepartment.DepartmentNumber))
    //     {
    //         var tempSAPCC = sapCostCenters.Where(s => s.LocationNumber == tempLocation.LocationNumber && s.DepartmentNumber == tempDepartment.DepartmentNumber).ToList();
    //         if (tempSAPCC.Count() == 1)
    //         {
    //             _SelectedSapCC = tempSAPCC;
    //             var scc = tempSAPCC.FirstOrDefault();
    //             ManagerName = scc.ResponsibleManagerName;
    //         }
    //         else
    //         {

    //         }
    //     }
    //     else
    //     {
    //         var emp = SelectedDepartment.FirstOrDefault();
    //     }

    //     StateHasChanged();
    // }
    // private async Task<T> LogExecutionTime<T>(string instructionName, Func<Task<T>> func)
    // {
    //     var stopwatch = Stopwatch.StartNew();
    //     T result = await func();
    //     stopwatch.Stop();
    //     _logger.LogWarning($"{instructionName} took {stopwatch.ElapsedMilliseconds} ms");
    //     return result;
    // }
    private async Task ShowErrorAsync()
    {
        var dialogParams = new DialogParameters<MessageBoxContent>(){
                Content = new()
                {
                    Title = "Błąd",
                    Message = "Formularz zawiera błędy. Proszę poprawić dane.",
                    Intent = MessageBoxIntent.Error,
                    Icon = new Icons.Regular.Size24.ErrorCircle(),
                    IconColor = Microsoft.FluentUI.AspNetCore.Components.Color.Error,
                }
        };
        var dialog = await _dialogService.ShowMessageBoxAsync(dialogParams);


        var result = await dialog.Result;
        // canceled = result.Cancelled;
    }
    private void SetSrcPage(){
        var uri = new Uri(_navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("srcPage", out var sourcePageValue))
        {

            if (sourcePageValue == "kierownikL1" || sourcePageValue == "managerL1" || sourcePageValue == "kierownikL11" || sourcePageValue == "managerL11" || sourcePageValue == "kierownikL12" || sourcePageValue == "managerL12" || sourcePageValue == "pracownik" || sourcePageValue == "employee" || sourcePageValue == "kasjer" || sourcePageValue == "cashier" || sourcePageValue == "ksiegowe" || sourcePageValue == "accountants" || sourcePageValue == "view")
            {
                _srcPage = sourcePageValue; // Valid sourcePage is set
            }
            else
            {

                blankPage = false; // Invalid value
                return;
            }
        }
        else
        {
            blankPage = false;
            _srcPage = "view";
            return;
        }
    }
    private void LoadAutocompleteControls(){
        if(!string.IsNullOrEmpty(formItem.EnovaEmpId)){
            var empl = _employees.Where(e => e.EnovaEmpId == int.Parse(formItem.EnovaEmpId)).First();
            SelectedEmpl = new List<EmployeeVm>() { empl };
        }
        if(!string.IsNullOrEmpty(formItem.DestinationCountry.Name)){
            SelectedCountry = new List<CountryVm> { formItem.DestinationCountry };
        }
        if(!string.IsNullOrEmpty(formItem.CompanyVehicleNumber)){
            SelectedCompanyCar = new List<string> { formItem.CompanyVehicleNumber };
        }
        if (formItem.PrivateVehicle)
        {
            SelectedCompanyCar = new List<string> { formItem.CompanyVehicleNumber };
        }
        if(!string.IsNullOrEmpty(formItem.CashPoint.SapNumber)){
            _selectedLocation = new List<LocationVm> { formItem.CashPoint };
        }
        if (!string.IsNullOrEmpty(formItem.CashPointReceipt.SapNumber))
        {
            _selectedReceiptLocation = new List<LocationVm> { formItem.CashPointReceipt };
        }
        if (!string.IsNullOrEmpty(formItem.FormCostLocation.SapNumber))
        {
            _selectedFormCostLocation = new List<LocationVm> { formItem.FormCostLocation };
        }
        // if (!string.IsNullOrEmpty(formItem.FormCostCenter.MPK))
        // {
        //     _selectedCostCenter = new List<CostCenterVm> { formItem.FormCostCenter };
        // }



    }
    #region CloseForm
    private async Task SendForm()
    {
        //SENDFORM jest tylko na Rejestrację bo Create!
        //sprawdzić czy to potrzebne
        // foreach(var stage in formItem.Stages){
        //     stage.TimeSpanOK = stage.EndDate < stage.StartDate;
        // }
        formItem.SaveOnly = false;
        formItem.MileageRegister.PrivateCarRegistration = formItem.MileageRegister.PrivateCarRegistration?.Trim();
        if(formItem.Status == "Rejestracja"){
            if (_editContext.Validate())
            {

                isLoading = true;
                showForm = false;
                formItem.Approvals.Add(approvalInfo);
                formItem.Status = GetNextStatus(formItem);
                if (formItem.Id == 0)
                {
                    var savedId = await _mediator.Send(new CreateBusinessTripCommand(formItem));
                    // var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(savedId));
                }
                else
                {
                    var updatedForm = await _mediator.Send(new UpdateBusinessTripCommand(formItem));
                    // var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(updatedForm.Id));
                }
                // var newId = await _mediator.Send(new CreateBusinessTripCommand(formItem));
                // var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(newId));
                var message = $"Formularz został wysłany do {formItem.LVL1_EmployeeName} w celu zatwierdzenia.";
                var intent = ToastIntent.Success;
                _toastService.ShowToast(intent, message, 3000);
                _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
            }
        } 
        if (formItem.Status == "Rozliczenie")
        {
            if (_editContext.Validate())
            {
                isLoading = true;
                showForm = false;
                await SaveBillFiles();
                formItem.Approvals.Add(approvalInfo);
                formItem.Status = GetNextStatus(formItem);
                var updatedForm = await _mediator.Send(new UpdateBusinessTripCommand(formItem));
                var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(updatedForm.Id));
                var message = $"Formularz został wysłany do {saveResult.LVL1_EmployeeName} w celu zatwierdzenia.";
                var intent = ToastIntent.Success;
                _toastService.ShowToast(intent, message, 3000);
                _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
            } else {
                ShowErrorAsync();
            }
        }

    }
    // private async Task SendFormRoz()
    // {
    //     //SENDFORMROZ jest tylko na Rozliczenie bo Update!
    //     //sprawdzić czy to potrzebne
    //     formItem.MileageRegister.PrivateCarRegistration = formItem.MileageRegister.PrivateCarRegistration?.Trim();


    //     if(_editContext.Validate()){
    //         isLoading = true;
    //         showForm = false;
    //         formItem.Approvals.Add(approvalInfo);
    //         formItem.Status = GetNextStatus(formItem);
    //         var updatedForm = await _mediator.Send(new UpdateBusinessTripCommand(formItem));
    //         var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(updatedForm.Id));
    //         var message = $"Formularz został wysłany do {saveResult.LVL1_EmployeeName} w celu zatwierdzenia.";
    //         var intent = ToastIntent.Success;
    //         _toastService.ShowToast(intent, message, 3000);
    //         _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
    //     }

    // }
    private async Task SaveForm()
    {
        //SENDFORMROZ jest tylko na Rozliczenie bo Update!
        //sprawdzić czy to potrzebne
        formItem.MileageRegister.PrivateCarRegistration = formItem.MileageRegister.PrivateCarRegistration?.Trim();


        if (_editContext.Validate())
        {

        }
        if(formItem.Objective is null) formItem.Objective = "";
        if (formItem.Transportation is null) formItem.Transportation = "";
        isLoading = true;
        showForm = false;
        formItem.Approvals.Add(approvalInfo);
        formItem.SaveOnly = true;
        int savedId = 0;
        // formItem.Status = GetNextStatus(formItem);
        if (formItem.Id == 0)
        {
            savedId = await _mediator.Send(new CreateBusinessTripCommand(formItem));
            // var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(savedId));
        }
        else
        {
            var updatedForm = await _mediator.Send(new UpdateBusinessTripCommand(formItem));
            // var saveResult = await _mediator.Send(new GetBusinessTripByIdQuery(updatedForm.Id));
        }


        // var message = $"Formularz został zapisany. Aby przekazać do Aprobaty wybierz przycisk Wyślij.";
        // var intent = ToastIntent.Success;
        // _toastService.ShowToast(intent, message, 3000);
        _navigationManager.NavigateTo($"/delegacje/{_srcPage}");

    }
    private async Task CheckForm(){
        hasValidationErrors = !_editContext.Validate();
        if (hasValidationErrors) ShowErrorAsync();
        _editContext.Validate();

        Console.WriteLine(formItem.Id);
    }
    private async Task CancelForm()
    {
        if (_srcPage == "view")
        {
            _navigationManager.NavigateTo($"/delegacje");
            return;
        }
        _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
    }
    private async Task RejectForm()
    {
        string reason = string.Empty;

        var dialog = await _dialogService.ShowDialogAsync<DeferralPaymentRejectComponent>(reason, new DialogParameters()
            {
                Height = "240px",
                Title = $"Podaj powód odrzucenia...",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;

        if (!result.Cancelled && (result.Data != null || (string)result.Data != string.Empty))
        {
            RejectReason rejreason = new() { 
                RejectReasonText = (string)result.Data, 
                ApproverName = _userContext.LongName,
                ApproverEmpId = _userContext.EnovaEmpId,
                RejectTime = DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss"),
                RejectFormStatus = formItem.Status,
            };
            formItem.RejectReasons.Add(rejreason);
            approvalInfo.IsApproved = false;
            formItem.Approvals.Add(approvalInfo);
            formItem.RejectReason = (string)result.Data;
            approvalInfo.IsApproved = false;
            formItem.Status = "Odrzucone";
            await _mediator.Send(new UpdateBusinessTripCommand(formItem));
            // var message = $"Formularz został wysłany do {formItem.EmployeeName} w celu poprawienia.";
            // var intent = ToastIntent.Success;
            // _toastService.ShowToast(intent, message, 3000);
            _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
        }
        else
        {
            return;
        }
    }
    private async Task ApproveForm()
    {
        if(_editContext.Validate()){
            if(stroz){
                await SaveBillFiles();
            }
            if(strozk)
                formItem.Approvals.Add(approvalInfo);
            formItem.Status = GetNextStatus(formItem);
            await _mediator.Send(new UpdateBusinessTripCommand(formItem));
            var message = $"Formularz został wysłany!";
            var intent = ToastIntent.Success;
            _toastService.ShowToast(intent, message, 3000);
            _navigationManager.NavigateTo($"/delegacje/{_srcPage}");
        }
    }

    private string GetNextStatus(BusinessTravelFormVm form){
        string newStatus = string.Empty;
        if(formItem.Status == "Rejestracja"){
            newStatus = "AprobataL1";
        } else if (formItem.Status == "AprobataL1"){
            if (formItem.AdvancePayment) {
                if (formItem.AdvancePaymentCash) { //jeśli true to przelew
                    newStatus = "ZaliczkaKsiegowosc";
                } else {
                    newStatus = "ZaliczkaKasa";
                }
            } else { 
                newStatus = "Rozliczenie"; 
            }
        }
        else if (formItem.Status == "ZaliczkaKasa" || formItem.Status == "ZaliczkaKsiegowoscTL"){
            newStatus = "Rozliczenie";
        }
        else if (formItem.Status == "ZaliczkaKsiegowosc"){
            newStatus = "WyslaneDoRobota";
        } 
        else if(formItem.Status == "Rozliczenie"){
            newStatus = "Ksiegowosc";
        }
        else if (formItem.Status == "Ksiegowosc")
        {
            if(formItem.ReceiptPaymentCash){
                newStatus = "KsiegowoscTL";
            } else {
                newStatus = "AprobataL11";
            }

        }
        else if (formItem.Status == "KsiegowoscTL")
        {
            newStatus = "AprobataL11";
        }
        else if (formItem.Status == "AprobataL11")
        {
            newStatus = "AprobataL12";
        }
        else if (formItem.Status == "AprobataL12")
        {
            if(!formItem.ReceiptPaymentCash) {
                newStatus = "KasaRozliczenie";
            } else {
                newStatus = "WyslaneDoRobotaRozliczenie";
            }
        }
        else if (formItem.Status == "KasaRozliczenie"){
            newStatus = "Rozliczone";
        }
        else if (formItem.Status == "WyslaneDoRobota")
        {
            newStatus = "ZaliczkaKsiegowoscTL";
        }
        else if (formItem.Status == "Odrzucone"){
            newStatus = "Ksiegowosc";
        }
        else if (formItem.Status == "BladRobota")
        {
            newStatus = "WyslaneDoRobota";
        }
        else if (formItem.Status == "BladRobotaRozliczenie")
        {
            newStatus = "WyslaneDoRobotaRozliczenie";
        }

        return newStatus;
    }

    #endregion
    #region OnSearch
    private void OnLocationSearch(OptionsSearchEventArgs<LocationVm> e)
    {
        if (e.Text != null)
        {
            e.Items = _locations.Where(a =>
                a.DisplayName.Contains(e.Text, StringComparison.OrdinalIgnoreCase) ||
                a.SapNumber.Contains(e.Text, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
    private void OnCountrySearch(OptionsSearchEventArgs<CountryVm> e)
    {
        if (e.Text != null)
        {
            e.Items = Countries.Where(a => a.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }
    }
    private void OnObjectiveSearch(OptionsSearchEventArgs<string> e)
    {
        if (e.Text != null)
        {
            e.Items = _objectives.Where(a => a.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }
    }
    private void OnCompanyCarSearch(OptionsSearchEventArgs<string> e)
    {
        if (e.Text != null)
        {
            e.Items = CompanyCarRegistrationNumbers
                .Where(a => a.RegistrationNumber.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
                .Select(a => a.RegistrationNumber)
                .ToList();
        }
    }
    // private void OnCostCenterSearch(OptionsSearchEventArgs<CostCenterVm> e)
    // {
    //     if (e.Text != null)
    //     {
    //         e.Items = _costCenters.Where(a => a.Text.Contains(e.Text, StringComparison.OrdinalIgnoreCase) || a.MPK.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    //     }
    // }
    private void OnAssigneeSearch(OptionsSearchEventArgs<EmployeeVm> e)
    {
        if (e.Text != null)
        {
            e.Items = _employees.Where(a => a.LongName.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
        }
    }
    #endregion OnSearch
    #region OnChange
    // private void HandleStatusChange()
    // {
    //     SetupForm(formItem.Status);
    // }
    private async Task HandleChangeApproverL1(ChangeEventArgs e)
    {
        var tempEmp = _employees.First(p => p.EnovaEmpId == int.Parse(e.Value.ToString()));
        formItem.LVL1_EnovaEmpId = tempEmp.EnovaEmpId.ToString();
        formItem.LVL1_EmployeeName = tempEmp.LongName;
    }
    private async Task HandleChangeApproverL5(ChangeEventArgs e)
    {
        var tempEmp = _employees.First(p => p.EnovaEmpId == int.Parse(e.Value.ToString()));
        formItem.LVL5_EnovaEmpId = tempEmp.EnovaEmpId.ToString();
        formItem.LVL5_EmployeeName = tempEmp.LongName;
    }

    private void HandleBillChange(Bill bill, string curr)
    {
        bill.Currency = curr;
    }
    private void HandleInvoiceDateChanged(Bill bill, DateTime date)
    {
        bill.InvoiceDate = date;
        _editContext.Validate();
    }
    private void HandlePrivateVehicleMileageChanged(int value)
    {
        formItem.PrivateVehicleMilage = value;
    }
    private void HandlePrivateVehicleRegistrationChanged(){
        formItem.MileageRegister.PrivateCarRegistration = formItem.MileageRegister.PrivateCarRegistration?.Trim();
        _editContext.Validate();
    }
    private void HandlePrivateVehicleEngineSizeChanged(string value)
    {
        formItem.MileageRegister.PrivateCarEngineSize = value;
        if (formItem.MileageRegister.PrivateCarEngineSize == "do 900 cm3")
        {
            formItem.MileageRegister.MileageAllowanceRate = Dictionary.MileageAllowance[900];
        }
        else if (formItem.MileageRegister.PrivateCarEngineSize == "powyej 900 cm3")
        {
            formItem.MileageRegister.MileageAllowanceRate = Dictionary.MileageAllowance[901];
        }
        _editContext.Validate();
    }
    private void HandleTransitDirectionsChanged(int value)
    {
        formItem.Transit.Directions = value;
        formItem.Transit.Total = formItem.Transit.Directions switch
        {
            0 => 0,
            1 => formItem.Transit.AllowanceRate,
            2 => formItem.Transit.AllowanceRate * 2,
            _ => formItem.Transit.Total
        };

    }
    private async Task HandleLocationChange()
    {
        formItem.CashPoint = _selectedLocation.FirstOrDefault();
        if(formItem.CashPoint != null)
        {
            var tempOrg = await _mediator.Send(new GetOrganisationByEmpSapNumberQuery(formItem.CashPoint.SapNumber));
            if (tempOrg != null)
            {
                formItem.Level2Approvers = SetApprovers(tempOrg.Role_Cashiers);
            }
        } else {
            formItem.CashPoint = new LocationVm();
        }
    }
    // private async Task HandleFormCostLocationChange()
    // {
    //     //TUTAJ PRZELICZYĆ APPROVERÓW
    //     formItem.FormCostLocation = _selectedFormCostLocation.FirstOrDefault();
    //     if (formItem.FormCostLocation != null){
    //         var tempOrg = await _mediator.Send(new GetOrganisationByEmpSapNumberQuery(formItem.FormCostLocation.SapNumber));
    //         if (tempOrg != null)
    //         {
    //             formItem.Level5Approvers = SetApprovers(tempOrg.Role_DealerDirector);
    //         }
    //     }else{
    //         formItem.FormCostLocation = new LocationVm();
    //     }
    // }
    private async Task HandleLocationReceiptChange()
    {
        formItem.CashPointReceipt = _selectedReceiptLocation.FirstOrDefault();
        if (formItem.CashPointReceipt != null)
        {
            var tempOrg = await _mediator.Send(new GetOrganisationByEmpSapNumberQuery(formItem.CashPointReceipt.SapNumber));
            formItem.Level2Approvers = SetApprovers(tempOrg.Role_Cashiers);
        } else {
            formItem.CashPointReceipt = new LocationVm();
        }
    }
    private async Task HandleBillReasonChange(Bill bill)
    {

        bill.InvoiceTitle = string.Empty;
        bill.InvoiceNumber = string.Empty;
        bill.Invoice = false;
    }
    private async Task HandleBillInvoiceTitle(Bill bill){
        bill.InvoiceTitle = $"{formItem.Number} - {bill.Reason} - {formItem.EmployeeName}";
    }
    // private async Task HandleBillParkingChange(Bill bill)
    // {

    // }
    private async Task HandleBillChanged(Bill bill, decimal v)
    {
        bill.Amount = v;
    }
    private async Task HandleLocalTravelChanged(LocalTravel l, int v)
    {
        l.Days = v;
        RecalculateLocalTravels();
    }
    // private async Task HandleMealChanged(Meals m, int v, string p)
    // {
    //     // var property = m.GetType().GetProperty(p);
    //     // if (property != null && property.CanWrite)
    //     // {
    //     //     property.SetValue(m, v);
    //     // }

    //     // RecalculateMeals();
    // }
    // private async Task HandleMealBreakfastChanged(ChangeEventArgs e, Meals meal, string p)
    // {

    //     if (int.TryParse(e.Value.ToString(), out int newValue))
    //     {
    //         var property = meal.GetType().GetProperty(p);
    //         if (property != null && property.CanWrite)
    //         {
    //             var currentValue = property.GetValue(meal);
    //             if (!currentValue.Equals(newValue))
    //             {
    //                 Console.WriteLine($"cur: {currentValue}, new: {newValue}");
    //                 property.SetValue(meal, newValue);
    //                 Console.WriteLine($"Updated value of {p}: {newValue}");
    //             }
    //         }
    // if(int.Parse(property.GetValue(meal)) != meal.CoveredBreakfasts){
    //     meal.CoveredBreakfasts = newValue;
    // }

    // Additional logic if needed
    // }
    // if (m.CoveredBreakfasts != v)
    // {
    //     m.CoveredBreakfasts = v;
    //     // RecalculateMeals();
    // }
    // m.CoveredBreakfasts = v;
    // if(m.CountryCode == "PL"){
    //     m.Total -= m.CoveredBreakfasts
    // }


    // var property = m.GetType().GetProperty(p);
    // if (property != null && property.CanWrite)
    // {
    //     property.SetValue(m, v);
    // }

    // RecalculateMeals();
    // }
    // private void HandleDebouncedChange(ChangeEventArgs e, Meals meal, string propertyName)
    // {
    //     if (_debounceTimer != null)
    //     {
    //         _debounceTimer.Dispose();
    //     }

    //     _debounceTimer = new Timer(async _ =>
    //     {
    //         await InvokeAsync(() => HandleMealPropertyChange(e, meal, propertyName));
    //     }, null, 50, Timeout.Infinite);
    // }

    // private async Task HandleMealPropertyChange(ChangeEventArgs e, Meals meal, string propertyName)
    // {
    //     if (int.TryParse(e.Value.ToString(), out int newValue))
    //     {
    //         var property = meal.GetType().GetProperty(propertyName);
    //         if (property != null && property.CanWrite)
    //         {
    //             var currentValue = property.GetValue(meal);
    //             if (!currentValue.Equals(newValue))
    //             {
    //                 property.SetValue(meal, newValue);
    //                 Console.WriteLine($"Updated value of {propertyName}: {newValue}");
    //             }
    //         }
    //     }
    // }
    private void HandleDailyMealChanged(List<DailyMeal> updatedMeals)
    {
        formItem.DailyMeals = updatedMeals;
        Console.WriteLine(formItem.DeductionMealsNotPL);
        Console.WriteLine(formItem.DeductionMealsPL);
    }
    // private async Task HandleMealLunchChanged(int v)
    // {
    // if(m.CoveredLunches != v){
    //     m.CoveredLunches = v;
    //     // RecalculateMeals();
    // }


    // RecalculateMeals();
    // }
    // private async Task HandleMealDinnerChanged(int v)
    // {
    // if(m.CoveredDinners != v){
    //     m.CoveredDinners = v;
    //     // RecalculateMeals();
    // }


    // RecalculateMeals();
    // }
    // private async Task HandleStageIncluded(Stage stage, bool value)
    // {
    //     stage.Included = value;
    //     formItem.Accommodations[stage.Id - 1].Included = value;
    //     formItem.Meals[stage.Id - 1].Included = value;

    //     RecalculateAccomodations();
    // }
    // private async Task HandleAccommodationInvoicesAmount(Accommodation accommodation, decimal? value)
    // {
    //     accommodation.InvoicesAmount = accommodation.Total = value;
    // }
    private async Task HandleAccommodationHasInvoices(Accommodation accommodation, bool value)
    {
        accommodation.InvoicesAmount = 0;
        if (value)
        {
            accommodation.HasInvoices = value;
            accommodation.InvoicesAmount = 0;
            accommodation.Total = 0;
        }
        else
        {
            accommodation.HasInvoices = value;
            // accommodation.Total = accommodation.AllowanceRate * accommodation.Duration;
        }
        RecalculateAccomodations();
    }
    // private async Task HandleCountryChange()
    // {
    //     Console.WriteLine(SelectedCountry.Count());

    //     if (SelectedCountry.FirstOrDefault() == null)
    //     {

    //     }
    //     else
    //     {
    //         // formItem.Countries = SelectedCountry;
    //         //
    //         // formItem.Countries = SelectedEmpl.FirstOrDefault();
    //         // Role.EmpId = SelectedEmpl.FirstOrDefault().EnovaEmpId;
    //     }

    //     StateHasChanged();
    // }
    private async Task HandleCountryAdd()
    {
        if(isManualSwitchToggle){
            return;
        }
        var newCountry = SelectedCountry.FirstOrDefault();
        if (newCountry == null)
        {
            newCountry = Countries.FirstOrDefault(c => c.Name == "Polska");
            AbroadCurrencyExchangeRate = OriginExchangeRate;
        }
        else
        {
            // AbroadCurrencyExchangeRate = await _mediator.Send(new GetNbpCurrencyRateByDateAndCodeQuery(DateOnly.FromDateTime(DateTime.Today.AddDays(-1)), newCountry.CurrencyVmName));
            _logger.LogError($"BusinessTrip, User {_userContext.LongName} | New Country, Name {newCountry.Name}, currCode {newCountry.CountryCode}, currVMName {newCountry.CurrencyVmName}, currency {AppUtils.SafeSerialize<CountryVm>(newCountry)}");
            AbroadCurrencyExchangeRate = NbpCurrencies.Where(c => c.Code == newCountry.CurrencyVmName ).First();

        }

        formItem.DestinationCountry = newCountry;
        formItem.DestinationCountryCurrency = newCountry.CurrencyVmName;

        // Clear existing stages except the first one
        if (formItem.Stages.Count > 1)
        {
            formItem.Stages.RemoveRange(1, formItem.Stages.Count - 1);
            formItem.Accommodations.RemoveRange(1, formItem.Accommodations.Count - 1);
            formItem.DailyMeals.RemoveRange(1, formItem.Meals.Count - 1);
            formItem.Meals.RemoveRange(1, formItem.Meals.Count - 1);
            formItem.LocalTravels.RemoveRange(1, formItem.LocalTravels.Count - 1);
            formItem.Transit = new Transit(Origin);
            formItem.AdvancePayment = false;

        }

        if (newCountry.Name != "Polska")
        {
            // Add the new country stage and the return to Polska stage

            await AddStage(newCountry);
            await AddStage(Origin);
            formItem.AdvancePayment = true;
        }

        //Assign currency to formItem
        if (formItem.Stages.Count == 1)
        {
            formItem.CurrencyExchangeRate = AbroadCurrencyExchangeRate.Mid;
            formItem.CurrencyExchangeRateDate = AbroadCurrencyExchangeRate.RateDate;
            formItem.DestinationCountryCurrency = AbroadCurrencyExchangeRate.Code;
        }
        else if (formItem.Stages.Count == 3)
        {
            AbroadCurrencyExchangeRate = await _mediator.Send(new GetNbpCurrencyRateByDateAndCodeQuery(DateOnly.FromDateTime(DateTime.Today.AddDays(-1)), formItem.Stages[1].CountryCurrency));
            formItem.CurrencyExchangeRate = formItem.Stages[1].NbpCurrencyRateVm.Mid;
            formItem.CurrencyExchangeRate = AbroadCurrencyExchangeRate.Mid;
            formItem.CurrencyExchangeRateDate = AbroadCurrencyExchangeRate.RateDate;
            formItem.DestinationCountryCurrency = AbroadCurrencyExchangeRate.Code;
        }

        formItem.AdvancePaymentAmount = CalculateAdvPmntAmount();
        // StateHasChanged();
    }

    // private async Task HandleObjectiveChange()
    // {

    //     Console.WriteLine(SelectedObjective.Count());

    //     if (SelectedObjective.FirstOrDefault() == null)
    //     {

    //     }
    //     else
    //     {
    //         formItem.Objective = SelectedObjective.ToString();
    //     }

    //     StateHasChanged();
    // }
    private async Task HandleCompanyCarChange()
    {
        formItem.CompanyVehicleNumber = string.Empty;   
        Console.WriteLine(SelectedCompanyCar.Count());

        if (SelectedCompanyCar.FirstOrDefault() == null)
        {

        }
        else
        {
            formItem.CompanyVehicleNumber = SelectedCompanyCar.First().ToString();
        }
        _editContext.Validate();
        // // // // StateHasChanged();
    }
    // private async Task HandleCityChange(string value)
    // {
    //     Console.WriteLine();
    //     formItem.Destination = value;

    //     StateHasChanged();
    // } 
    private async Task HandleAssigneeChange()
    {
        Console.WriteLine(SelectedEmpl.Count());

        if (SelectedEmpl.FirstOrDefault() == null)
        {

        }
        else
        {
            var emp = SelectedEmpl.FirstOrDefault();
            formItem.EmployeeName = emp.LongName;
            formItem.EnovaEmpId = emp.EnovaEmpId.ToString();
            _organisation = await _mediator.Send(new GetOrganisationByEmpSapNumberQuery(emp.SapNumber));
            formItem.OrganisationSapNumber = _organisation.SapNumber;
            formItem.BankAccountNumber = emp.BankAccountNumber;
            formItem.ReceiptBankAccountNumber = emp.BankAccountNumber;
            await UpdateBankTransferMappings(emp);
            await SetupUserSapCostCenter(emp);
            await AssignAllApprovers(emp);
        }

        StateHasChanged();
    }
    // private async Task HandleFormCostCenterChange()
    // {
    //     Console.WriteLine(_selectedCostCenter.Count());

    //     if (_selectedCostCenter.Count() == 0)
    //     {
    //         formItem.FormCostCenter = new CostCenterVm();
    //     }
    //     else
    //     {
    //         var mpk = _selectedCostCenter.FirstOrDefault();
    //         formItem.FormCostCenter = mpk;
    //     }

    //     StateHasChanged();
    // }
    // private async Task HandleConveyanceChange()
    // {
    //     Console.WriteLine(SelectedConveyance.Count());

    //     if (SelectedConveyance.FirstOrDefault() == "Samochód prywatny")
    //     {
    //         IsPrivateCar = true;
    //         IsCompanyCar = false;
    //         IsPublicTransport = false;
    //         ShowTransits = false;
    //     }
    //     else if (SelectedConveyance.FirstOrDefault() == "Samochód służbowy")
    //     {
    //         IsPrivateCar = false;
    //         IsCompanyCar = true;
    //         IsPublicTransport = false;
    //         ShowTransits = false;
    //     }
    //     else if (SelectedConveyance.FirstOrDefault() == "Transport publiczny")
    //     {
    //         IsPrivateCar = false;
    //         IsCompanyCar = false;
    //         IsPublicTransport = true;
    //         ShowTransits = true;
    //     }

    //     StateHasChanged();
    // }
    private async Task HandleConveyanceStringChange()
    {
        if(stroz){


        }
        // SelectedConveyanceTxt = formItem.Transportation;
        formItem.MileageRegister = new MileageRegister
            {
                Entries = new List<MileageRegisterEntry>()
            };
        // Console.WriteLine(SelectedConveyanceTxt.Count());
        if (formItem.Transportation == "Samochód prywatny")
        {
            // formItem.MileageRegister.Entries.Add(new MileageRegisterEntry());
            // Console.WriteLine(SelectedConveyanceTxt);
            IsPrivateCar = true;
            IsCompanyCar = false;
            IsPublicTransport = false;
            formItem.PrivateVehicle = true;
            formItem.CompanyVehicle = false;


        }
        else if (formItem.Transportation == "Samochód służbowy")
        {
            // Console.WriteLine(SelectedConveyanceTxt);
            IsPrivateCar = false;
            IsCompanyCar = true;
            IsPublicTransport = false;
            formItem.PrivateVehicle = false;
            formItem.CompanyVehicle = true;
            formItem.PublicTransport = false;
            formItem.PublicTransportPaid = false;
        }
        else if (formItem.Transportation == "Transport publiczny")
        {
            // Console.WriteLine(SelectedConveyanceTxt);
            IsPrivateCar = false;
            IsCompanyCar = false;
            IsPublicTransport = true;
            formItem.PrivateVehicle = false;
            formItem.CompanyVehicle = false;
            formItem.PublicTransport = true;
            formItem.PublicTransportPaid = false;
        }

        if (stroz || stks || stkstl)
        {
            ShowTransits = true;
        }

        // // // // StateHasChanged();
    }
    private async Task HandlePublicTransportPaidChanged(bool value)
    {
        formItem.PublicTransportPaid = value;
    }
    // private async Task HandleAdvancePaymentPaidChanged(bool value)
    // {
    //     formItem.AdvancePayment = value;
    //     if (formItem.AdvancePayment)
    //     {
    //         // formItem.BTMappingAdvancePayment.
    //     }
    //     // formItem.BankAccountNumber = 
    //     StateHasChanged();
    // }
    private async Task HandleDateTimeChanged(DateTime? dateTime, string p)
    {
        if (dateTime.HasValue)
        {
            // Set seconds to 0
            dateTime = new DateTime(dateTime.Value.Year, dateTime.Value.Month, dateTime.Value.Day, dateTime.Value.Hour, dateTime.Value.Minute, 0);
        }
        if (p == "to")
        {
            formItem.EndDate = dateTime;
            if (formItem.Stages.Any())
            {
                formItem.Stages.Last().EndDate = dateTime;
            }
        }
        else if (p == "from")
        {
            formItem.StartDate = dateTime;
            if (formItem.Stages.Any())
            {
                formItem.Stages.First().StartDate = dateTime;
            }
        }

        if(formItem.StartDate.HasValue && formItem.EndDate.HasValue && formItem.Stages.Count == 0)
        {
            AddStage(Origin);
        }

        try{
            // var x = CalculateAdvPmntAmount();
            formItem.AdvancePaymentAmount = CalculateAdvPmntAmount();
        }
        catch (Exception ex)
        {
            _logger.LogInformation(ex.Message);
        }

        // _fluentValidationValidator?.Validate(options => options.IncludeRuleSets("MainDates"));
        RecalculateForm();
    }
    private async Task HandleStageDateTimeChanged(DateTime? value, Stage stage, string propertyName, int stageId)
    {
        // ConsoleLog("stage: " + stageId + " " + propertyName);
        // ConsoleLog("stage: " + stageId + " start" + stage.StartDate.ToString() + " koniec: " + stage.EndDate.ToString());
        if (propertyName == nameof(stage.StartDate))
        {
            stage.StartDate = value;

            if (formItem.Stages.FirstOrDefault() == stage && propertyName == nameof(stage.StartDate))
            {
                // Update formItem.EndDate to the EndDate of the last stage
                formItem.StartDate = stage.StartDate;
            }
            await RecalculateAdjacentTime(stageId, nameof(stage.StartDate));
        }
        else if (propertyName == nameof(stage.EndDate))
        {
            stage.EndDate = value;
            if (formItem.Stages.LastOrDefault() == stage && propertyName == nameof(stage.EndDate))
            {
                // Update formItem.EndDate to the EndDate of the last stage
                formItem.EndDate = stage.EndDate;
            }
            await RecalculateAdjacentTime(stageId, nameof(stage.EndDate));
        }
        stage.TimeSpanOK = stage.EndDate >= stage.StartDate;
        // _editContext.NotifyFieldChanged(new FieldIdentifier(stage, propertyName));
        // ValidateDates();

        RecalculateForm();
        _editContext.Validate();
        // // // // StateHasChanged();
    }
    private async Task RecalculateAdjacentTime(int stageId, string propertyName){

        var updatedStageIndex = formItem.Stages.FindIndex(s => s.Id == stageId);
        if (updatedStageIndex == -1) return;
        var updatedStage = formItem.Stages[updatedStageIndex];
        if (propertyName == nameof(updatedStage.EndDate) && updatedStage.EndDate.HasValue)
        {
            // Update the next stage's StartDate if it exists
            if (updatedStageIndex + 1 < formItem.Stages.Count)
            {
                var nextStage = formItem.Stages[updatedStageIndex + 1];

                // Set the next stage's StartDate to be one minute after the current EndDate
                nextStage.StartDate = updatedStage.EndDate.Value.AddMinutes(1);
            }
        }

        if (propertyName == nameof(updatedStage.StartDate) && updatedStage.StartDate.HasValue)
        {
            // Update the previous stage's EndDate if it exists
            if (updatedStageIndex > 0)
            {
                var previousStage = formItem.Stages[updatedStageIndex - 1];

                // Set the previous stage's EndDate to be one minute before the current StartDate
                previousStage.EndDate = updatedStage.StartDate.Value.AddMinutes(-1);
            }
        }
    }
    private async Task RecalculateStages()
    {

        // if (!(stageId == 0 && propertyName == "skip"))
        // {
        //     var updatedStageIndex = formItem.Stages.FindIndex(s => s.Id == stageId);
        //     if (updatedStageIndex == -1) return;
        //     var updatedStage = formItem.Stages[updatedStageIndex];
        //     if (propertyName == nameof(updatedStage.EndDate) && updatedStage.EndDate.HasValue)
        //     {
        //         // Update the next stage's StartDate if it exists
        //         if (updatedStageIndex + 1 < formItem.Stages.Count)
        //         {
        //             var nextStage = formItem.Stages[updatedStageIndex + 1];

        //             // Set the next stage's StartDate to be one minute after the current EndDate
        //             nextStage.StartDate = updatedStage.EndDate.Value.AddMinutes(1);
        //         }
        //     }

        //     if (propertyName == nameof(updatedStage.StartDate) && updatedStage.StartDate.HasValue)
        //     {
        //         // Update the previous stage's EndDate if it exists
        //         if (updatedStageIndex > 0)
        //         {
        //             var previousStage = formItem.Stages[updatedStageIndex - 1];

        //             // Set the previous stage's EndDate to be one minute before the current StartDate
        //             previousStage.EndDate = updatedStage.StartDate.Value.AddMinutes(-1);
        //         }
        //     }
        // }

        // Recalculate the duration for all stages
        formItem.SumAllowancePL = 0;
        formItem.SumAllowanceNotPL = 0;
        foreach (var stage in formItem.Stages)
        {
            if (stage.StartDate < stage.EndDate)
            {
                // Calculate duration and timespan
                stage.Duration = Math.Round((decimal)(stage.EndDate.Value - stage.StartDate.Value).TotalDays, 2);
                stage.TimeSpan = stage.EndDate.Value - stage.StartDate.Value;
                stage.TimeSpan = TimeSpan.FromMinutes(Math.Round(stage.TimeSpan.TotalMinutes));
                // stage.TimeSpan = TimeSpan.FromHours(Math.Floor((stage.EndDate.Value - stage.StartDate.Value).TotalHours));

                // Reset Allowance values
                stage.AllowanceOriginValue = 0;
                stage.AllowanceAbroadValue = 0;
                stage.AllowanceOrigin = 0;
                stage.AllowanceAbroad = 0;

                if (stage.CountryCode == "PL")
                {
                    formItem.AllowancePL = stage.CountryAllowance;
                    // Calculate AllowanceOrigin factor and value
                    if (stage.TimeSpan.TotalHours <= 8)
                    {
                        stage.AllowanceOrigin = 0;
                    }
                    else if (stage.TimeSpan.TotalHours > 8 && stage.TimeSpan.TotalHours <= 12)
                    {
                        stage.AllowanceOrigin = 0.5m;
                        stage.AllowanceOriginValue = stage.CountryAllowance / 2;
                    }
                    else if (stage.TimeSpan.TotalHours > 12 && stage.TimeSpan.TotalHours <= 24)
                    {
                        stage.AllowanceOrigin = 1;
                        stage.AllowanceOriginValue = stage.CountryAllowance;
                    }

                    if (stage.TimeSpan.TotalHours > 24)
                    {
                        // Calculate for additional full days
                        var fullDays = (int)(stage.TimeSpan.TotalHours / 24);
                        stage.AllowanceOrigin += fullDays;
                        stage.AllowanceOriginValue += fullDays * stage.CountryAllowance;

                        // Calculate for the remaining hours
                        var remainingHours = stage.TimeSpan.TotalHours % 24;
                        if(remainingHours == 0){

                        } else if (remainingHours > 0 && remainingHours <= 8  )
                        {
                            stage.AllowanceOrigin += 0.5m;
                            stage.AllowanceOriginValue += stage.CountryAllowance / 2;
                        }
                        else if (remainingHours > 8)
                        {
                            stage.AllowanceOrigin += 1;
                            stage.AllowanceOriginValue += stage.CountryAllowance;
                        }
                    }

                    formItem.SumAllowancePL += stage.AllowanceOriginValue;
                }
                else
                {
                    formItem.AllowanceNotPL = stage.CountryAllowance;
                    // Calculate AllowanceAbroad factor and value
                    if (stage.TimeSpan.TotalHours > 0 && stage.TimeSpan.TotalHours <= 8 )
                    {
                        stage.AllowanceAbroad = 0.33m;
                        stage.AllowanceAbroadValue = Math.Round(stage.CountryAllowance / 3, 2);
                    }
                    else if (stage.TimeSpan.TotalHours > 8 && stage.TimeSpan.TotalHours <= 12)
                    {
                        stage.AllowanceAbroad = 0.5m;
                        stage.AllowanceAbroadValue = stage.CountryAllowance / 2;
                    }
                    else if (stage.TimeSpan.TotalHours > 12 && stage.TimeSpan.TotalHours <= 24)
                    {
                        stage.AllowanceAbroad = 1;
                        stage.AllowanceAbroadValue = stage.CountryAllowance;
                    }

                    if (stage.TimeSpan.TotalHours > 24)
                    {
                        // Calculate for additional full days
                        var fullDays = (int)(stage.TimeSpan.TotalHours / 24);
                        stage.AllowanceAbroad += fullDays;
                        stage.AllowanceAbroadValue += fullDays * stage.CountryAllowance;

                        // Calculate for the remaining hours
                        var remainingHours = stage.TimeSpan.TotalHours % 24;
                        if (remainingHours > 0 && remainingHours <= 8)
                        {
                            stage.AllowanceAbroad += 0.33m;
                            stage.AllowanceAbroadValue += Math.Round(stage.CountryAllowance / 3, 2);
                        }
                        else if (remainingHours > 8 && remainingHours <= 12)
                        {
                            stage.AllowanceAbroad += 0.5m;
                            stage.AllowanceAbroadValue += stage.CountryAllowance / 2;
                        }
                        else if (remainingHours > 12 && remainingHours <= 24)
                        {
                            stage.AllowanceAbroad += 1;
                            stage.AllowanceAbroadValue += stage.CountryAllowance;
                        }

                    }

                    formItem.SumAllowanceNotPL += stage.AllowanceAbroadValue;
                }
            }
            else if (stage.StartDate >= stage.EndDate)
            {
                stage.TimeSpanOK = stage.EndDate >= stage.StartDate;
                stage.TimeSpan = new TimeSpan();
                stage.Duration = 0;
                stage.AllowanceOrigin = 0;
                stage.AllowanceOriginValue = 0;
                stage.AllowanceAbroad = 0;
                stage.AllowanceAbroadValue = 0;

            }
            formItem.Meals[stage.Id - 1].Duration = (int)Math.Ceiling(stage.AllowanceOrigin.GetValueOrDefault() + stage.AllowanceAbroad.GetValueOrDefault()); 
            formItem.DailyMeals[stage.Id - 1].Duration = (int)Math.Ceiling(stage.AllowanceOrigin.GetValueOrDefault() + stage.AllowanceAbroad.GetValueOrDefault());

            Console.WriteLine();

        }

    }
    // private void RecalculateMeals()
    // {
    //     // formItem.DeductionMealsPL = 0;
    //     // formItem.DeductionMealsNotPL = 0;
    //     foreach (var meal in formItem.Meals)
    //     {
    //         // meal.Total = 0;
    //         // if (meal.CountryCode != "PL")
    //         // {
    //         //     meal.Total -= (meal.CoveredBreakfasts * meal.AllowanceRate * 0.15m);
    //         //     meal.Total -= (meal.CoveredLunches * meal.AllowanceRate * 0.3m);
    //         //     meal.Total -= (meal.CoveredDinners * meal.AllowanceRate * 0.3m);
    //         //     formItem.DeductionMealsNotPL += meal.Total;
    //         // }
    //         // else
    //         // {
    //         //     meal.Total -= (meal.CoveredBreakfasts * meal.AllowanceRate / 4);
    //         //     meal.Total -= (meal.CoveredLunches * meal.AllowanceRate / 2);
    //         //     meal.Total -= (meal.CoveredDinners * meal.AllowanceRate / 4);
    //         //     formItem.DeductionMealsPL += meal.Total;
    //         // }
    //         // meal.Duration = 0;
    //         // var stage = formItem.Stages[meal.StageId - 1];
    //         // if (stage != null)
    //         // {
    //         //     // if(stage.Duration == 0){
    //         //     //     meal.Duration = 0;
    //         //     // } else if(stage.Duration > 0){

    //         //     // }
    //         //     // int newDuration = (int)Math.Ceiling(stage.AllowanceOrigin.GetValueOrDefault() + stage.AllowanceAbroad.GetValueOrDefault());
    //         //     // if (meal.Duration != newDuration) {
    //         //     //     meal.Duration = newDuration;
    //         //     // }
    //         //     // // meal.Included = (stage.AllowanceOriginValue + stage.AllowanceAbroadValue) == 0 ? false : stage.Included;
    //         //     // // meal.Total = (stage.AllowanceOrigin.GetValueOrDefault() + stage.AllowanceAbroad.GetValueOrDefault()) * meal.AllowanceRate;

    //         //     // if(stage.StartDate.HasValue && stage.EndDate.HasValue){
    //         //     //     meal.Nights = CalculateNights(stage.StartDate.Value, stage.EndDate.Value);
    //         //     // } else {
    //         //     //     meal.Nights = 0;
    //         //     // }

    //         //     // var num = meal.Total;
    //         //     // meal.Total = Math.Round(meal.Total, 2);
    //         // }

    //         // Console.WriteLine();
    //     }

    //     // if (Math.Abs(formItem.DeductionMealsPL.GetValueOrDefault()) > Math.Abs(formItem.SumAllowancePL.GetValueOrDefault()))
    //     // {
    //     //     formItem.DeductionMealsPL = -1 * formItem.SumAllowancePL;
    //     // }
    //     // if (Math.Abs(formItem.DeductionMealsNotPL.GetValueOrDefault()) > Math.Abs(formItem.SumAllowanceNotPL.GetValueOrDefault()))
    //     // {
    //     //     formItem.DeductionMealsNotPL = -1 * formItem.SumAllowanceNotPL;
    //     // }

    // }
    private async Task RecalculateAccomodations()
    {
        formItem.AccomodationAllowanceSumPL = 0;
        formItem.AccomodationAllowanceSumNotPL = 0;
        foreach (var accommodation in formItem.Accommodations)
        {

            var stage = formItem.Stages[accommodation.StageId - 1];
            if (stage != null)
            {
                accommodation.Duration = stage.Duration;
                accommodation.Included = stage.Included;
                if (stage.StartDate.HasValue && stage.EndDate.HasValue)
                {
                    // Calculate the number of nights
                    accommodation.Nights = CalculateNights(stage.StartDate.Value, stage.EndDate.Value);
                }

                if (accommodation.Included)
                {
                    if (!accommodation.HasInvoices)
                    {
                        if (accommodation.CountryCode == "PL")
                        {
                            accommodation.Total = accommodation.Nights.GetValueOrDefault() * accommodation.AllowanceRate;
                            formItem.AccomodationAllowanceSumPL += accommodation.Total;
                        }
                        else
                        {
                            accommodation.Total = accommodation.Nights.GetValueOrDefault() * accommodation.AllowanceRate;
                            formItem.AccomodationAllowanceSumNotPL += accommodation.Total;
                        }

                    }
                }
                else
                {
                    accommodation.Total = 0;
                }

            }
        }
    }
    private async Task RecalculateLocalTravels()
    {
        formItem.SumLocalTravelAllowancePL = 0;
        formItem.SumLocalTravelAllowanceNotPL = 0;


        foreach (var localTravel in formItem.LocalTravels)
        {
            var stage = formItem.Stages[localTravel.StageId - 1];
            localTravel.Duration = (int)Math.Ceiling(stage.AllowanceOrigin.GetValueOrDefault() + stage.AllowanceAbroad.GetValueOrDefault());
            localTravel.Total = localTravel.Days * localTravel.AllowanceRate;

        }
        formItem.SumLocalTravelAllowancePL = formItem.LocalTravels.Where(lt => lt.CountryCode == "PL").Sum(lt => lt.Total);
        formItem.SumLocalTravelAllowanceNotPL = Math.Round( formItem.LocalTravels.Where(lt => lt.CountryCode != "PL").Sum(lt => lt.Total), 2);
    }
    private async Task RecalculateTransit()
    {

        if (formItem.Transit != null)
        {
            formItem.Transit.Total = formItem.Transit.Directions * formItem.Transit.AllowanceRate;
        }
    }
    private void RecalculateForm(){
        RecalculateStages();
        RecalculateAccomodations();
        // RecalculateMeals();
        RecalculateLocalTravels();
        ValidateDates();
    }
    private int CalculateNights(DateTime startDate, DateTime endDate)
    {

        int nights = 0;

        // Adjust the time range to the period we care about (9:00 PM to 7:00 AM)
        TimeSpan nightStart = new TimeSpan(21, 0, 0); // 9:00 PM
        TimeSpan nightEnd = new TimeSpan(7, 0, 0); // 7:00 AM

        DateTime currentStart = startDate;
        DateTime currentEnd = endDate;

        // Loop through each day in the range
        while (currentStart.Date <= currentEnd.Date)
        {
            DateTime nightStartTime = currentStart.Date.Add(nightStart);
            DateTime nightEndTime = currentStart.Date.AddDays(1).Add(nightEnd);

            // Determine overlap between the stage time and the night period
            DateTime overlapStart = nightStartTime > currentStart ? nightStartTime : currentStart;
            DateTime overlapEnd = nightEndTime < currentEnd ? nightEndTime : currentEnd;

            if (overlapStart < overlapEnd)
            {
                // Calculate the duration of overlap
                TimeSpan overlapDuration = overlapEnd - overlapStart;

                // Count continuous 6-hour periods
                nights += (int)(overlapDuration.TotalHours / 6);
            }

            // Move to the next day
            currentStart = currentStart.AddDays(1).Date;
        }

        return nights;
    }
    private async Task ValidateDates()
    {
        // Check if the overall start date is before the end date
        // if (formItem.StartDate > formItem.EndDate)
        // {
        //     DateTimeValidationMessage = "Start date must be before or equal to end date.";
        // }
        // else
        // {
        //     DateTimeValidationMessage = string.Empty;
        // }
        var invalidStage = formItem.Stages
            .Select((stage, index) => new { stage, index })
            .FirstOrDefault(x =>
                x.stage.StartDate > x.stage.EndDate ||
                (x.index < formItem.Stages.Count - 1 && x.stage.EndDate > formItem.Stages[x.index + 1].StartDate) ||
                (x.index > 0 && x.stage.StartDate < formItem.Stages[x.index - 1].EndDate));

        var errorMessages = new List<string>();

        for (int i = 0; i < formItem.Stages.Count; i++)
        {
            var stage = formItem.Stages[i];

            if (stage.StartDate > stage.EndDate)
            {
                errorMessages.Add($"Etap {stage.Id}: Data początkowa musi być wcześniejsza niż końcowa");
            }

            if (i < formItem.Stages.Count - 1 && stage.EndDate > formItem.Stages[i + 1].StartDate)
            {
                errorMessages.Add($"Data końcowa Etapu {stage.Id} musi być wcześniejsza niż data początkowa Etapu {formItem.Stages[i + 1].Id}.");
            }

            if (i > 0 && stage.StartDate < formItem.Stages[i - 1].EndDate)
            {
                errorMessages.Add($"Data początkowa Etapu {stage.Id} musi być późniejsza niż data końcowa Etapu {formItem.Stages[i - 1].Id}.");
            }
        }

        // if (errorMessages.Any())
        // {
        //     // StagesDatesErrorMessages = errorMessages;
        //     // StagesDatesErrorMessage = string.Join("<br>", errorMessages);
        // }
        // else
        // {
        //     // Clear the error message if all dates are valid
        //     // StagesDatesErrorMessages = new();
        //     // StagesDatesErrorMessage = string.Empty;
        // }
        Console.WriteLine();
    }

    #endregion OnChange
    #region Actions
    private decimal CalculateAdvPmntAmount()
    {
        decimal days = 0;
        decimal result = 0;

        if(formItem.EndDate.HasValue && formItem.StartDate.HasValue && formItem.DestinationCountry.CountryCode != "PL")
        {
            TimeSpan difference = formItem.EndDate.Value - formItem.StartDate.Value;
            days = (decimal)difference.Days;
            result = formItem.DestinationCountry.Allowance * days * AbroadCurrencyExchangeRate.Mid;
            result = Math.Round(result);
        }

        return result/4;
    }
    private async Task GetNbpCurrencyRateVm(){
        var tempCurrencies = await _mediator.Send(new GetNbpCurrencyRatesByDateQuery(DateOnly.FromDateTime(DateTime.Today)));
        NbpCurrencies = tempCurrencies.ToList();
        NbpCurrencies.Insert(0, OriginExchangeRate);
        AbroadCurrencyExchangeRate = NbpCurrencies.Where(c => c.Code ==  formItem.DestinationCountryCurrency).First();

        formItem.CurrencyExchangeRate = AbroadCurrencyExchangeRate.Mid;
        formItem.CurrencyExchangeRateDate = AbroadCurrencyExchangeRate.RateDate;
        formItem.DestinationCountryCurrency = AbroadCurrencyExchangeRate.Code;

    }
    private void AssignTransportation(){
        if (formItem.Transportation == "Samochód prywatny")
        {
            IsPrivateCar = true;
            IsCompanyCar = false;
            IsPublicTransport = false;

        }
        else if (formItem.Transportation == "Samochód służbowy")
        {
            IsPrivateCar = false;
            IsCompanyCar = true;
            IsPublicTransport = false;


        }
        else if (formItem.Transportation == "Transport publiczny")
        {
            IsPrivateCar = false;
            IsCompanyCar = false;
            IsPublicTransport = true;

        } 
        else {
            IsPrivateCar = false;
            IsCompanyCar = false;
            IsPublicTransport = false;
        }

        //hide LocalTravels and Transit
        if (IsPrivateCar || IsCompanyCar){
            ShowLocalTravels = false;
            ShowTransits = false;
        } else if (IsPublicTransport){
            ShowLocalTravels = true;
        }

    }
    private async Task AssignAllApprovers(EmployeeVm emp)
    {
        int lvl1managerId = 0;
        int lvl2managerId = 0;
        EmployeeVm empMan = _employees.FirstOrDefault(e => e.EnovaEmpId == emp.ManagerId) ?? new EmployeeVm();

        if (emp.ManagerId == null)
        {
            lvl1managerId = 104;
            lvl2managerId = 976;
        }
        else
        {
            if (empMan.ManagerId == 0)
            {
                lvl1managerId = emp.ManagerId;
                lvl2managerId = 976;
            }
            else
            {
                lvl1managerId = emp.ManagerId;
                lvl2managerId = empMan.ManagerId;
            }
        }
        _logger.LogInformation("LogInformation");
        _logger.LogWarning("LogWarning");
        formItem.Level1Approvers.Clear();
        formItem.Level1Approvers = await SetManagerAndDeputies(lvl1managerId); // Przełożony
        approverL1 = formItem.Level1Approvers[0];
        formItem.LVL1_EnovaEmpId = emp.ManagerId.ToString();
        formItem.LVL1_EmployeeName = emp.Manager.LongName;
        formItem.Level2Approvers = SetApprovers(_organisation.Role_Cashiers); // Kasjerki
        formItem.Level3Approvers = SetApprovers(_organisation.Role_Accountants); // Księgowe
        formItem.Level4Approvers = SetApprovers(_organisation.Role_AccountantsTeamLeader); // Księgowe TL
        formItem.Level5Approvers = await SetManagerAndDeputies(lvl2managerId); // Dyrektor oddziału
        // approverL2 = formItem.Level5Approvers[0];
        // var empMan = _employees.Where(e => e.EnovaEmpId == emp.ManagerId).First();
        // // // // StateHasChanged();
    }
    private async Task GetAllowedPersons()
    {
        if (strej)
        {
            allowedEmp.Add(_userContext.EnovaEmpId);
            allowedEditor.Add(_userContext.EnovaEmpId);
        }
        if (stal1 || stal2)
        {
            allowedEmp.Add(formItem.EnovaEmpId);
            allowedEmp.Add(formItem.LVL1_EnovaEmpId); //this is manager of requestor
            allowedEmp.AddRange(formItem.Level2Approvers.Select(l => l.EmpId.ToString()));//this is Settlement Department
            allowedEditor.AddRange(formItem.Level2Approvers.Select(l => l.EmpId.ToString()));
        }
        else
        {
            allowedEmp.Add(formItem.EnovaEmpId);
            allowedEmp.AddRange(formItem.Level2Approvers.Select(l => l.EmpId.ToString()));
        }

        if(_userContext.isFormAdmin){
            allowedEmp.Add(_userContext.EnovaEmpId);
        }

        showForm = allowedEmp.Contains(_userContext.EnovaEmpId);
        isLoading = false;
        // // // // StateHasChanged();
        // editControlDisabled = !allowedEditor.Contains(_userContext.EnovaEmpId);


    }
    private List<OrganisationRoleForFormVm> SetApprovers(List<OrganisationRoleVm> rolesIn)
    {
        List<OrganisationRoleForFormVm> result = new();
        foreach(var role in rolesIn){
            result.Add(new OrganisationRoleForFormVm(role));
        }
        // Find the default role
        var defaultRole = result.FirstOrDefault(r => r.IsDefault);

        // If a default role exists, move it to the first position
        if (defaultRole != null)
        {
            result.Remove(defaultRole);
            result.Insert(0, defaultRole);
        }

        return result;
        // rolesIn.Select(role => new OrganisationRoleForFormVm(role)).ToList();
    }
    private async Task <List<OrganisationRoleForFormVm>> SetManagerAndDeputies(int manId)
    {
        var result = new List<OrganisationRoleForFormVm>();
        var manDep = new ManagerDeputyVm();
        var man = _employees.Where(e => e.EnovaEmpId == manId).First();
        OrganisationRoleForFormVm apprL1 = new()
            {
                IsDefault = true,
                EmpId = man.EnovaEmpId,
                LongName = man.LongName
            };
        manDep = await _mediator.Send(new GetManagerDeputyByManagerIdQuery(man.EnovaEmpId));
        if (manDep != null)
        {
            var managerDeputies = manDep.Deputies;

            foreach (var item in manDep.Deputies)
            {
                result.Add(new OrganisationRoleForFormVm(item));
            }
        }

        result.Insert(0, apprL1);

        return result;

    }
    private void AssignStatusBool()
    {
        strej = formItem.Status == "Rejestracja";
        stal1 = formItem.Status == "AprobataL1";
        stal2 = formItem.Status == "AprobataL2";
        stzk = formItem.Status == "ZaliczkaKasa";
        stzks = formItem.Status == "ZaliczkaKsiegowosc";
        stwys = formItem.Status == "WyslaneDoRobota";
        stblad = formItem.Status == "BladRobota";
        stzkstl = formItem.Status == "ZaliczkaKsiegowoscTL";

        stroz = formItem.Status == "Rozliczenie";
        stks = formItem.Status == "Ksiegowosc";
        stkstl = formItem.Status == "KsiegowoscTL";
        stal11 = formItem.Status == "AprobataL11";
        stal12 = formItem.Status == "AprobataL12";
        strozk = formItem.Status == "KasaRozliczenie";
        stwysroz = formItem.Status == "WyslaneDoRobotaRozliczenie";
        stbladroz = formItem.Status == "BladRobotaRozliczenie";
        strozend = formItem.Status == "Rozliczone";
        stodrz = formItem.Status == "Odrzucone";
        stzam = formItem.Status == "Zamkniete";
    }
    private async Task AddStage(CountryVm country)
    {

        AbroadCurrencyExchangeRate = await _mediator.Send(new GetNbpCurrencyRateByDateAndCodeQuery(DateOnly.FromDateTime(DateTime.Today.AddDays(-1)), country.CurrencyVmName));
        if (AbroadCurrencyExchangeRate == null) AbroadCurrencyExchangeRate = OriginExchangeRate;

        try{

            var duration = (formItem.EndDate.HasValue && formItem.StartDate.HasValue) ? (formItem.EndDate.Value - formItem.StartDate.Value).TotalDays : 0;
            var newStage = new Stage()
                {
                    Id = formItem.Stages.Count() + 1,
                    CountryCode = country.CountryCode,
                    CountryName = country.Name,
                    CountryAllowance = country.Allowance,
                    CountryCurrency = country.CurrencyVmName,
                    StartDate = formItem.StartDate,
                    EndDate = formItem.EndDate,
                    Duration = Math.Round((decimal)duration, 2),
                    NbpCurrencyRateVm = AbroadCurrencyExchangeRate
                };
            formItem.Stages.Add(newStage);
            ValidateDates();

            var firstAccomodation = new Accommodation()
                {
                    StageId = newStage.Id,
                    CountryCode = country.CountryCode,
                    CountryName = country.Name,
                    Duration = newStage.Duration,
                    AllowanceRate = country.IsPL ? Math.Round(country.Allowance * 1.5m, 2) : Math.Round(country.MaxHotelCost / 4m, 2), //Ryczałt za nocleg
                    AllowanceRateCurrency = country.CurrencyVmName,
                    MaxHotelCost = country.MaxHotelCost,
                    HasInvoices = true,
                    InvoicesAmount = 0,
                    Total = 0
                };
            formItem.Accommodations.Add(firstAccomodation);

            var firstMeal = new Meals()
                {
                    StageId = newStage.Id,
                    CountryCode = country.CountryCode,
                    CountryName = country.Name,
                    AllowanceRate = country.Allowance,
                    AllowanceRateCurrency = country.CurrencyVmName,
                    Duration = (int)Math.Ceiling(newStage.AllowanceOrigin.GetValueOrDefault() + newStage.AllowanceAbroad.GetValueOrDefault())
                };
            formItem.Meals.Add(firstMeal);
            var dailyMeal = new DailyMeal()
                {
                    StageId = newStage.Id,
                    CountryCode = country.CountryCode,
                    CountryName = country.Name,
                    AllowanceRate = country.Allowance,
                    AllowanceRateCurrency = country.CurrencyVmName,
                    Duration = (int)Math.Ceiling(newStage.AllowanceOrigin.GetValueOrDefault() + newStage.AllowanceAbroad.GetValueOrDefault())
                };
            formItem.DailyMeals.Add(dailyMeal);

            var firstLocalTravel = new LocalTravel()
                {
                    StageId = newStage.Id,
                    CountryCode = country.CountryCode,
                    CountryName = country.Name,
                    AllowanceRate = country.LocalTravelAllowance,
                    AllowanceRateCurrency = country.CurrencyVmName,
                    Duration = (int)Math.Ceiling(newStage.AllowanceOrigin.GetValueOrDefault() + newStage.AllowanceAbroad.GetValueOrDefault())
                };
            formItem.LocalTravels.Add(firstLocalTravel);

            if (newStage.CountryCode != "PL")
            {
                formItem.Transit = new Transit(country)
                    {
                        StageId = newStage.Id,
                        CountryCode = country.CountryCode,
                        CountryName = country.Name,
                        AllowanceRate = country.TravelAllowance,
                        AllowanceRateCurrency = country.CurrencyVmName,
                    };
                await RecalculateTransit();
            }

            // await RecalculateStages(newStage.Id, nameof(newStage.EndDate));
            await RecalculateStages();
            await RecalculateAccomodations();
            // RecalculateMeals();
            await RecalculateLocalTravels();
            await RecalculateTransit();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        // // // // StateHasChanged();
        // ConsoleLog($"Country Currency {country.CountryCode}");
    }
    private async Task UpdateBankTransferMappings(EmployeeVm newEmployee)
    {
        // var shortEmpSapNumber = newEmployee.SapNumber.Substring(0, 4);
        var tglaccount = _glAccounts.Where(g => g.AccountNumber == "24000").FirstOrDefault();
        // var tlocation = _locations.Where(l => l.SapNumber == shortEmpSapNumber).FirstOrDefault();
        // var tcostcenter = _costCenters.Where(c => c.MPK == _userContext.Employee.DeptNumber).FirstOrDefault();

        formItem.BTMappingAdvancePayment.SapFormType = "FreeForm";
        // formItem.BTMappingAdvancePayment.CostCenter = tcostcenter;
        formItem.BTMappingAdvancePayment.GLAccount = tglaccount;
        formItem.BTMappingAdvancePayment.BusinessTravel = true;

        formItem.BTMappingPayout.SapFormType = "FreeForm";
        // formItem.BTMappingPayout.CostCenter = tcostcenter;
        formItem.BTMappingPayout.GLAccount = tglaccount;

    }
    private async Task AddEmployee(EmployeeVm newEmployee)
    {
        formItem.EnovaEmpId = newEmployee.EnovaEmpId.ToString();
        formItem.EmployeeName = newEmployee.LongName;
        formItem.BankAccountNumber = newEmployee.BankAccountNumber;
        formItem.ReceiptBankAccountNumber = newEmployee.BankAccountNumber;

        UpdateBankTransferMappings(newEmployee);
        var employeesList = new List<EmployeeVm>();

        employeesList.Add(newEmployee);

        SelectedEmpl = employeesList;
    }
    private async Task RemoveBill(Bill bill)
    {
        foreach(var _billFile in bill.BillFiles)
        {
            RemoveFileFromBill(bill, _billFile);
        }

        formItem.Bills.Remove(bill);
    }
    //
    private async Task AddSapCostCenter()
    {
        var tempSCC = new SapCostCenterVm{formId = Guid.NewGuid()};

        formItem.FormCostCenters.Add(tempSCC);
        // // // // StateHasChanged();
    }
    private void RemoveSapCC(SapCostCenterVm removed)
    {
        formItem.FormCostCenters = formItem.FormCostCenters.Where(x => x != removed).ToList();
        // // // // StateHasChanged();
    }
    // private void RemoveSapCostCenter(int index, SapCostCenterVm removed)
    // {
    //     if (index >= 0 && index < formItem.FormCostCenters.Count)
    //     {
    //         var listSCC = new List<SapCostCenterVm>();
    //         formItem.FormCostCenters.Remove(removed);
    //         foreach(var scc in formItem.FormCostCenters) {
    //             listSCC.Add(scc);
    //         }
    //         formItem.FormCostCenters.Clear();
    //         foreach(var scc in listSCC){
    //             formItem.FormCostCenters.Add(scc);
    //         }

    //         StateHasChanged();
    //     }

    // }
    private void HandleSapCostCenterChanged(int index, SapCostCenterVm updatedSapCC)
    {
        if (index >= 0 && index < formItem.FormCostCenters.Count)
        {
            formItem.FormCostCenters[index].LocationNumber = updatedSapCC.LocationNumber;
            formItem.FormCostCenters[index].LocationName = updatedSapCC.LocationName;
            formItem.FormCostCenters[index].DepartmentNumber = updatedSapCC.DepartmentNumber;
            formItem.FormCostCenters[index].DepartmentName = updatedSapCC.DepartmentName;
            formItem.FormCostCenters[index].ResponsibleManagerName = updatedSapCC.ResponsibleManagerName;
            formItem.FormCostCenters[index].ResponsibleManagerEnovaId = updatedSapCC.ResponsibleManagerEnovaId;
            formItem.FormCostCenters[index].ResponsibleManagerSSFId = updatedSapCC.ResponsibleManagerSSFId;
            formItem.FormCostCenters[index].StatusId = updatedSapCC.StatusId;
            formItem.FormCostCenters[index].Id = updatedSapCC.Id;
            // // // // StateHasChanged();
        }
    }

    private async Task AddBill()
    {
        var billId = Id = formItem.Bills.Count() + 1;
        formItem.Bills.Add(new Bill()
            {
                Id = billId,
                Amount = 0m,
                ParkingAmount = 0m,

            });
        var justaddedbill = formItem.Bills.Where(b => b.Id == billId).First();
        await AddInvoiceMapping(justaddedbill);
    }
    private async Task AddInvoiceMapping(Bill bill){
        var tglaccount = _glAccounts.Where(g => g.AccountNumber == "24000").FirstOrDefault();
        var tlocation = _locations.Where(l => l.SapNumber == formItem.OrganisationSapNumber.Substring(0, 4)).FirstOrDefault();
        var tcostcenter = _costCenters.Where(c => c.MPK == _userContext.Employee.DeptNumber).FirstOrDefault();

        var newInvoiceMapping = new InvoiceMapping
            {
                Id = bill.InvoiceMappings.Count,
                Location = tlocation,
                CostCenter = tcostcenter,
                GLAccount = tglaccount

            };

        bill.InvoiceMappings.Add(newInvoiceMapping);

    }
    private async Task ViewAttachment(string url)
    {
        // Navigate to the URL in a new tab

        string url2 = _navigationManager.BaseUri + url;
        await JS.InvokeVoidAsync("open", url, "_blank");
    }
    private async Task ConsoleLog(string logMessage)
    {
        await JS.InvokeVoidAsync("logMessage", logMessage);
    }
    #endregion
    #region FilesManagement

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (CurrentBillForUpload != null)
        {
            var uploadedFile = e.File;
            if (uploadedFile != null)
            {
                var filePath = await FileUtils.UploadFile(uploadedFile, CurrentBillForUpload.Id.ToString(), Environment.WebRootPath);
                var billFile = new BillFile
                    {
                        Id = CurrentBillForUpload.BillFiles.Count + 1,
                        FilePath = filePath,
                        OriginalFileName = uploadedFile.Name,
                        AttUrl = FileUtils.GenerateUrl(filePath, Environment.WebRootPath)
                    };
                CurrentBillForUpload.BillFiles.Add(billFile);
            }
        }
        _editContext.Validate();
    }

    private void RemoveFileFromBill(Bill bill, BillFile billFile)
    {
        FileUtils.RemoveFile(billFile.FilePath);
        // bill.BillFiles.Remove(billFile);
        // _editContext.Validate();
    }

    private void UploadFileForBill(Bill bill)
    {
        CurrentBillForUpload = bill;
        JS.InvokeVoidAsync("triggerFileUpload");
    }

    private async Task SaveBillFiles()
    {
        foreach (var bill in formItem.Bills)
        {
            foreach (var billFile in bill.BillFiles)
            {
                if (!string.IsNullOrEmpty(billFile.FilePath))
                {
                    var newFilePath = Path.Combine(
                        Environment.WebRootPath,
                        "BusinessTravels",
                        formItem.CreatedDate.ToString("yyyy"),
                        formItem.CreatedDate.ToString("yyyyMM"),
                        formItem.CreatedDate.ToString("yyyyMMdd"),
                        $"{formItem.Number}_{Guid.NewGuid()}{Path.GetExtension(billFile.FilePath)}");

                    FileUtils.MoveFile(billFile.FilePath, newFilePath);
                    billFile.FilePath = newFilePath;

                    billFile.AttUrl = FileUtils.GenerateUrl(newFilePath, Environment.WebRootPath);
                }
            }
        }
    }

    // private void RemoveInvoiceMappingFromBill(Bill bill, InvoiceMapping mapping)
    // {
    //     if(bill.InvoiceMappings.Count > 1){
    //         bill.InvoiceMappings.Remove(mapping);
    //     }
    // }

    #endregion
    #region SetupForm

    private void ResetForm()
    {
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;
        // EnterInvoiceMapping = false;
        // // // // StateHasChanged();
    }
    // private void DisableForm()
    // {
    //     stal1 = false;
    //     stal2 = false;
    //     stzk = false;
    //     stzks = false;
    //     stzkstl = false;
    //     stroz = false;
    //     stks = false;
    //     stkstl = false;
    //     stal11 = false;
    //     stal12 = false;
    //     strozk = false;
    //     stwys = false;
    //     strozend = false;
    //     stzam = false;
    //     StateHasChanged();
    // }
    // private void EnableForm()
    // {
    //     stal1 = true;
    //     stal2 = true;
    //     stzk = true;
    //     stzks = true;
    //     stzkstl = true;
    //     stroz = true;
    //     stks = true;
    //     stkstl = true;
    //     stal11 = true;
    //     stal12 = true;
    //     strozk = true;
    //     stwys = true;
    //     strozend = true;
    //     stzam = true;
    //     StateHasChanged();
    // }
    // private void DisableButtons(){
    //     DisableApproveButton = true;
    //     DisableRejectButton = true;
    //     DisableSaveButton = true;
    //     DisableSendButton = true;

    //     if (formItem.Status == "Rejestracja" || stroz || stodrz)
    //     {
    //         DisableApproveButton = true;
    //         DisableRejectButton = true;
    //         DisableSaveButton = false;
    //         DisableSendButton = false;
    //     }
    //     if (stal1 || stal11 || stal12)
    //     {
    //         DisableApproveButton = false;
    //         DisableRejectButton = false;
    //         DisableSaveButton = true;
    //         DisableSendButton = false;
    //     }
    //     if (stzk || strozk || stzks || stzkstl || stks || stkstl || stblad || stbladroz)
    //     {
    //         DisableApproveButton = false;
    //         DisableRejectButton = false;
    //         DisableSaveButton = false;
    //         DisableSendButton = true;
    //     }
    //     if (strozend || stzam)
    //     {
    //         DisableApproveButton = true;
    //         DisableRejectButton = true;
    //         DisableSaveButton = true;
    //         DisableSendButton = true;
    //     }

    // }
    private async Task SetupForm(string status)
    {
        AssignStatusBool();
        AssignTransportation();
        ResetForm();

        #region GoToStatus
        if (status == "Rejestracja") await SetupFormRejestracja();
        else if (stal1 || stal2 || stal11 || stal12) await SetupFormAprobata(status); //po etapie al11 i al12 zrobic sprawdzenie czy kasa czy przelew i wysl
        else if (stzk) await SetupFormKasa();
        else if (stzks) await SetupFormZaliczkaKsiegowosc(); //zrobić SetupFormZaliczkaKsiegowosc
        else if (stzkstl) await SetupFormZaliczkaKsiegowoscTL(); //zrobić SetupFormZaliczkaKsiegowoscTL
        else if (stwys) await SetupFormWyslaneDoRobota(); //zrobić SetupFormWyslaneDoRobota
        else if (stblad) await SetupFormBladRobota();
        else if (stroz || stodrz) await SetupFormRozliczenie();
        else if (stks) await SetupFormKsiegowosc(); //zrobić SetupFormKsiegowosc - komponentustawień mpk
        else if (stkstl) await SetupFormKsiegowoscTL(); //zrobić SetupFormKsiegowoscTL
        else if (strozk) await SetupFormKasaRozliczenie();
        else if (stwysroz) await SetupFormWyslaneDoRobotaRozliczenie(); //zrobić SetupFormWyslaneDoRobota
        else if (stbladroz) await SetupFormBladRobotaRozliczenie();
        else if (strozend) await SetupFormRozliczone();
        else if (stzam) await SetupFormZamkniete();
        #endregion
        //DisableButtons ();
        // if (Id != 0) DisableSendButton = true;

        // editControlDisabled = false;
        //Na czas testów wszystkie przyciski są włączone:
        // DisableApproveButton = false;
        // DisableRejectButton = false;
        // DisableSendButton = false;

        if (_srcPage == "view") { DisableAllControls(); }

        // // // // StateHasChanged();
    }

    private async Task SetupFormZaliczkaKsiegowosc()
    {
        Title = "Podróż służbowa - Księgowość";

        formItem.BTMappingAdvancePayment.BankTrasferTitle = $"ZAL {formItem.Number} {formItem.EmployeeName}";
        formItem.BTMappingAdvancePayment.PostingDate = AppUtils.GetClosestWednesday(DateTime.Now);
        formItem.BTMappingAdvancePayment.CurrencyExchangeDate = formItem.CurrencyExchangeRateDate.ToDateTime(TimeOnly.MinValue);
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = false;
        DisableSendButton = true;

    }
    private async Task SetupFormZaliczkaKsiegowoscTL()
    {
        Title = "Podróż służbowa - Księgowość TeamLeader";

        // formItem.BTMappingAdvancePayment.BankTrasferTitle = $"ZAL {formItem.Number} {formItem.EmployeeName}";

        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;
        // IsInvoiceMappingDisabled = false;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = false;
        DisableSendButton = true;
    }
    private async Task SetupFormKsiegowoscTL()
    {
        Title = "Podróż służbowa - Księgowość";
        ShowAccomodations = true;
        ShowMeals = true;
        ShowStages = true;
        ShowLocalTravels = true;
        ShowTransits = formItem.Stages.Count > 1;
        ShowCashier = true;
        ShowBills = true;
        ShowMileageReport = true;
        ShowSummary = true;
        // EnterInvoiceMapping = true;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = false;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;
        // IsInvoiceMappingDisabled = false;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = false;
        DisableSendButton = true;

    }
    private async Task SetupFormWyslaneDoRobota()
    {
        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupFormBladRobota()
    {
        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupFormWyslaneDoRobotaRozliczenie()
    {
        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupFormBladRobotaRozliczenie()
    {
        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupUserSapCostCenter(EmployeeVm emp){
        formItem.FormCostCenters.Clear();
        var userSapCostCenter = new SapCostCenterVm { formId = Guid.NewGuid() };
        var userSapNumber = emp.SapNumber.Substring(0, 4);
        var userDepartmentNumber = emp.DeptNumber;
        try{
            userSapCostCenter = _sapCostCenters.Where(s => s.LocationNumber == userSapNumber && s.DepartmentNumber == userDepartmentNumber).First();
            if (userSapCostCenter.Id > 0)
            {
                userSapCostCenter.formId = Guid.NewGuid();
                formItem.FormCostCenters.Add(userSapCostCenter);
            }
        } catch (Exception ex)
        {
            string messageMPK = "mesydż od funkcji";
            var dialog = await _dialogService.ShowDialogAsync<InformationDialogComponent>(messageMPK, new DialogParameters()
                {
                    Height = "240px",
                    Width = "600px",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                });
            
        }

    }
    private async Task SetupFormRejestracja()
    {
        if (formItem.Stages.Count == 0)
        {
            Countries = await _mediator.Send(new GetAllCountryQuery());

            SelectedCountries = new List<CountryVm> { Countries.FirstOrDefault(c => c.Name == "Polska") };
            formItem.Countries = SelectedCountries;
            SelectedCountry = SelectedCountries;

            Origin = SelectedCountries[0];

            var tempCurrencies = await _mediator.Send(new GetNbpCurrencyRatesByDateQuery(DateOnly.FromDateTime(DateTime.Today.AddDays(-1))));

            NbpCurrencies = tempCurrencies.ToList();
            NbpCurrencies.Insert(0, OriginExchangeRate);
            if (formItem.DestinationCountry.CountryCode is null)
            {
                formItem.DestinationCountry = SelectedCountry.First();
                formItem.DestinationCountryCurrency = "PLN";
            }

            await SetupUserSapCostCenter(_userContext.Employee);

            var shortSapNumber = _userContext.Employee.SapNumber.Substring(0, 4);
            formItem.FormCostLocation = _locations.Where(l => l.SapNumber == shortSapNumber).FirstOrDefault();
            // formItem.FormCostCenter = _costCenters.Where(c => c.MPK == _userContext.Employee.DeptNumber).FirstOrDefault();
            if (!string.IsNullOrEmpty(formItem.FormCostLocation.SapNumber))
            {
                var tempLoc = _locations.Where(l => l.SapNumber == formItem.FormCostLocation.SapNumber).FirstOrDefault();
                _selectedFormCostLocation = new List<LocationVm>() { tempLoc };
            }
            // if (!string.IsNullOrEmpty(formItem.FormCostCenter.MPK))
            // {
            //     var tempCC = _costCenters.Where(l => l.MPK == formItem.FormCostCenter.MPK).FirstOrDefault();
            //     _selectedCostCenter = new List<CostCenterVm>() { tempCC };
            // }
            Title = "Podróż służbowa - Rejestracja wniosku";

            var tempEmp = _userContext.Employee;
            if(!string.IsNullOrEmpty(formItem.EnovaEmpId)){
                tempEmp = _employees.Where(e => e.EnovaEmpId.ToString() == formItem.EnovaEmpId).FirstOrDefault();
            }
            await AddEmployee(tempEmp);
            await AssignAllApprovers(_userContext.Employee);
            await AddStage(Origin);
            // await RecalculateStages(firstStage.Id, nameof(firstStage.EndDate));
            await RecalculateAccomodations();
            // RecalculateMeals();
            await RecalculateLocalTravels();
            await RecalculateTransit();

        };



        formItem.EmployeeName = _userContext.LongName;
        formItem.EnovaEmpId = _userContext.EnovaEmpId;
        formItem.OrganisationSapNumber = _organisation.SapNumber;

        #region SetBoolsOnStatus
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = false;
        // IsDateTimeDisabled = false;
        // IsDestinationDisabled = false; //wyłącza możliwość zmiany celu podróży
        // IsEmployeeDisabled = false; //wyłącza możliwość zmiany pracownika
        // IsInvoiceMappingDisabled = true;

        // IsTransportationDisabled = false;
        // IsMileageDisabled = false;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = false;
        DisableSendButton = false;

        #endregion
        // // // // StateHasChanged();
    }
    private async Task SetupFormKasa()
    {
        if (!formItem.DestinationCountry.IsPL && formItem.AdvancePayment)
        {
            await GetNbpCurrencyRateVm();
        }


        Title = "Podróż służbowa - Kasa";
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsInvoiceMappingDisabled = true;

        // controlTransportSelectDisabled = true;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = false;

        formItem.PayoutCashier = _userContext.Employee;
        formItem.PayoutCashierEmpId = _userContext.EnovaEmpId;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupFormRozliczenie()
    {
        Title = "Podróż służbowa - Rozliczenie";

        AssignTransportation();
        if(!formItem.DestinationCountry.IsPL && !formItem.AdvancePayment){
            await GetNbpCurrencyRateVm();
        }
        #region SetBoolsOnStatus
        ShowAccomodations = true;
        ShowMeals = true;
        ShowStages = true;

        ShowTransits = formItem.Stages.Count > 1;
        ShowCashier = true;
        ShowBills = true;
        ShowMileageReport = true;
        ShowSummary = true;
        // EnterInvoiceMapping = true;

        // IsAdvancedPaymentDisabled = false; //w produkcji zmienić na true
        // IsDateTimeDisabled = false;
        // IsDestinationDisabled = false; //w produkcji zmienić na true
        // IsEmployeeDisabled = true;

        // IsBillsDisabled = false;
        // IsInvoiceMappingDisabled = false;
        // IsTransportationDisabled = false;
        // IsTransportationDisabled = true;
        // IsMileageDisabled = false;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = false;
        DisableSendButton = false;
        if (formItem.Transportation != "Samochód prywatny")
            Conveyances = new List<string>
            {
                "Samochód służbowy",
                "Transport publiczny"
            }.AsQueryable();
        #endregion

    }
    private async Task SetupFormKsiegowosc()
    {
        Title = "Podróż służbowa - Księgowość";

        formItem.BTMappingPayout.BankTrasferTitle = $"ROZ {formItem.Number} {formItem.EmployeeName}";
        formItem.BTMappingPayout.PostingDate = AppUtils.GetClosestWednesday(DateTime.Now);
        formItem.BTMappingPayout.CurrencyExchangeDate = formItem.CurrencyExchangeRateDate.ToDateTime(TimeOnly.MinValue);

        ShowAccomodations = true;
        ShowMeals = true;
        ShowStages = true;

        ShowTransits = formItem.Stages.Count > 1;
        ShowCashier = true;
        ShowBills = true;
        ShowMileageReport = true;
        ShowSummary = true;
        ShowLocalTravels = true;
        // EnterInvoiceMapping = true;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = false;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;
        // IsInvoiceMappingDisabled = false;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = false;
        DisableSendButton = true;
    }
    private async Task SetupFormKasaRozliczenie()
    {
        Title = "Podróż służbowa - Rozliczenie Kasa";

        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowMileageReport = false;
        ShowSummary = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsInvoiceMappingDisabled = true;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        formItem.ReceiptCashier = _userContext.Employee;
        formItem.ReceiptCashierEmpId = _userContext.EnovaEmpId;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = true;
        DisableSendButton = true;

    }
    private async Task SetupFormRozliczone()
    {
        Title = "Podróż służbowa - Rozliczone";
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowSummary = false;
        ShowMileageReport = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;
        // IsInvoiceMappingDisabled = true;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = true;
        DisableSendButton = true;

    }
    private async Task SetupFormZamkniete()
    {
        Title = "Podróż służbowa - Zamknięte";
        ShowAccomodations = false;
        ShowMeals = false;
        ShowStages = false;
        ShowLocalTravels = false;
        ShowTransits = false;
        ShowCashier = false;
        ShowBills = false;
        ShowSummary = false;
        ShowMileageReport = false;
        // EnterInvoiceMapping = false;

        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;

        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSaveButton = true;
        DisableSendButton = true;
    }
    private async Task SetupFormAprobata(string status)
    {
        Title = $"Podróż służbowa - {status}";

        AssignTransportation();

        if(formItem.AdvancePayment){

            _selectedLocation = new List<LocationVm> { formItem.CashPoint };

        }

        if (status == "AprobataL1")
        {
            ShowAccomodations = false;
            ShowMeals = false;
            ShowStages = false;
            ShowLocalTravels = false;
            ShowTransits = false;
            ShowCashier = false;
            ShowBills = false;
            ShowMileageReport = false;
            ShowSummary = false;


        }
        else if (status == "AprobataL2")
        {
            ShowAccomodations = false;
            ShowMeals = false;
            ShowStages = false;
            ShowLocalTravels = false;
            ShowTransits = false;
            ShowCashier = false;
            ShowBills = false;
            ShowMileageReport = false;
            ShowSummary = false;

        }
        else if (status == "AprobataL11")
        {
            ShowAccomodations = false;
            ShowMeals = false;
            ShowStages = false;
            ShowLocalTravels = false;
            ShowTransits = false;
            ShowCashier = false;
            ShowBills = true;
            ShowMileageReport = true;
            ShowSummary = true;

        }
        else if (status == "AprobataL12")
        {
            formItem.BTMappingPayout.BankTrasferTitle = $"ZAL {formItem.Number} {formItem.EmployeeName}";
            formItem.BTMappingPayout.PostingDate = AppUtils.GetClosestWednesday(DateTime.Now);
            formItem.BTMappingPayout.CurrencyExchangeDate = formItem.CurrencyExchangeRateDate.ToDateTime(TimeOnly.MinValue);

            ShowAccomodations = false;
            ShowMeals = false;
            ShowStages = false;
            ShowLocalTravels = false;
            ShowTransits = false;
            ShowCashier = false;
            ShowBills = true;
            ShowMileageReport = true;
            ShowSummary = true;


        }

        // EnterInvoiceMapping = false;
        // IsAdvancedPaymentDisabled = true;
        // IsDateTimeDisabled = true;
        // IsDestinationDisabled = true;
        // IsEmployeeDisabled = true;
        // IsBillsDisabled = true;
        // IsInvoiceMappingDisabled = true;
        // IsTransportationDisabled = true;
        // IsMileageDisabled = true;
        // IsCashPayoutNumberDisabled = true;

        DisableApproveButton = false;
        DisableRejectButton = false;
        DisableSaveButton = false;
        DisableSendButton = true;
    }
    #endregion
    #region SetUpEditControlsAndButtons
    private bool IsButtonSendVisible(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (!(strej || stroz))
        {
            result = false;
        }
        return result;
    }
    private bool IsButtonApproveVisible(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej || stroz)
        {
            result = false;
        }
        return result;
    }

    private bool IsCashPayoutEnabled(bool? b = null) //pole do wpisania numeru KW
    {
        //kalkulacja warunków
        // return formItem.Status == "Kasa";
        if(b.HasValue){
            return b.Value;
        }
        return stzk;
    }
    private bool IsCashReceiptEnabled(bool? b = null) //pole do wpisania numeru KW
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        // return formItem.Status == "KasaRozliczenie";
        return strozk;

    }
    private bool IsControlStatusesDisabled(bool? b = null){
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = false;
        if(strej){
            result = true;
        }
        return result;
    }
    private bool IsControlEmployeDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }

        bool result = true;
        if (formItem.Status =="Rejestracja")
        {
            result = false;
        }

        return result;
    }
    private bool IsControlCountryDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlCityDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlObjectivesDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlDateTimeDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlTransportDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej || stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlAdvancePaymentDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlReceiptPaymentDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz)
        {
            result = false;
        }
        return result;
    }
    private bool IsControlCashierPayoutDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stzk)
        {
            result = false;
        }
        return result;
    }
    private bool IsControlCashierReceiptDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strozk)
        {
            result = false;
        }
        return result;
    }
    private bool IsControlStageEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlAccomodationEditDisabled(bool? b = null)
    {
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlMealsEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlMileageEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlLocalTravelEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz)
        {
            result = false;
        }
        return result;
    }
    private bool IsControlTransitEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlBillEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz )
        {
            result = false;
        }
        return result;
    }
    private bool IsControlBillInvoiceNumberEditDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (stroz || stks)
        {
            result = false;
        }
        return result;
    }
    

    private bool IsControlFormCostCenterLocationDisabled(bool? b = null)
    {
        if (b.HasValue)
        {
            return b.Value;
        }
        bool result = true;
        if (strej || stroz)
        {
            result = false;
        }
        return result;
    }
    private void EnableAllControls()
    {
        IsCashPayoutEnabled(false);
        IsCashReceiptEnabled(false);
        IsControlStatusesDisabled(false);
        IsControlEmployeDisabled(false);
        IsControlCountryDisabled(false);
        IsControlCityDisabled(false);
        IsControlObjectivesDisabled(false);
        IsControlDateTimeDisabled(false);
        IsControlTransportDisabled(false);
        IsControlAdvancePaymentDisabled(false);
        IsControlReceiptPaymentDisabled(false);
        IsControlCashierPayoutDisabled(false);
        IsControlCashierReceiptDisabled(false);
        IsControlStageEditDisabled(false);
        IsControlAccomodationEditDisabled(false);
        IsControlMealsEditDisabled(false);
        IsControlMileageEditDisabled(false);
        IsControlLocalTravelEditDisabled(false);
        IsControlTransitEditDisabled(false);
        IsControlBillEditDisabled(false);
    }
    private void DisableAllControls()
    {
        IsCashPayoutEnabled(true);
        IsCashReceiptEnabled(true);
        IsControlStatusesDisabled(true);
        IsControlEmployeDisabled(true);
        IsControlCountryDisabled(true);
        IsControlCityDisabled(true);
        IsControlObjectivesDisabled(true);
        IsControlDateTimeDisabled(true);
        IsControlTransportDisabled(true);
        IsControlAdvancePaymentDisabled(true);
        IsControlReceiptPaymentDisabled(true);
        IsControlCashierPayoutDisabled(true);
        IsControlCashierReceiptDisabled(true);
        IsControlStageEditDisabled(true);
        IsControlAccomodationEditDisabled(true);
        IsControlMealsEditDisabled(true);
        IsControlMileageEditDisabled(true);
        IsControlLocalTravelEditDisabled(true);
        IsControlTransitEditDisabled(true);
        IsControlBillEditDisabled(true);
        DisableApproveButton = true;
        DisableRejectButton = true;
        DisableSendButton = true;
        DisableSaveButton = true;
    }
    #endregion
    private void HandleValidSubmit(EditContext arg)
    {
        throw new NotImplementedException();
    }

}

<style>
    valid.disabled.outline {
        color: black !important; /* Change font color to black */
    }

    div {
        /*flex-shrink: 0; /* Prevent shrinking of elements */
    }

    .flex-container {
        display: flex; /* Enables horizontal alignment */
        align-items: center; /* Vertically centers items */
        gap: 10px; /* Adds space between elements */
        flex-wrap: wrap; /* Wraps to the next line if there's not enough space */
    }

        .flex-container > * {
            flex-shrink: 0; /* Prevents items from shrinking */
            margin: 0; /* Optional: Resets any margin */
        }

    .form-group {
        display: flex;
        align-items: center; /* Align label and control vertically */
        gap: 10px; /* Space between the label and the control */
        flex-wrap: nowrap; /* Ensure label and control stay on the same line */
        flex: 1 1 auto; /* Allow the group to resize */
        justify-content: flex-start; /* Align items to the left */
    }


    .form-section {
        display: flex;
        flex-wrap: wrap; /* Allows wrapping if content overflows */
        gap: 15px; /* Spacing between child divs */
        margin-bottom: 15px;
    }

        .form-section > div {
            display: flex;
            align-items: center; /* Vertically centers content within each div */
            gap: 10px; /* Spacing between elements inside the div */
        }

    .new-form-sectionbbb {
        display: flex;
        flex-wrap: wrap; /* Allows wrapping if content overflows */
        gap: 15px; /* Spacing between child divs */
        margin-bottom: 15px; /* Matches other form sections */
        border: 2px solid;
        border-radius: 8px; /* Rounded corners */
        padding: 10px; /* Space inside the border */
        margin: 10px 0; /* Space outside the div */
        align-items: center; /* Vertically center content */
    }

    .new-form-section {
        display: flex; /* Enable horizontal alignment */
        flex-wrap: nowrap; /* Prevent wrapping to the next line */
        align-items: center; /* Vertically align content */
        justify-content: flex-start; /* Align items to the start of the line */
        border: 2px solid;
        border-radius: 8px; /* Rounded corners */
        padding: 10px;
        margin: 10px 0;
        background-color: lightblue; /* Default background color */
        gap: 15px; /* Spacing between child divs */
        width: fit-content;
    }

        /* Child divs inside the form section */
        .new-form-section > div {
            display: flex;
            align-items: center; /* Center content within the div */
        }

        /* Background color for "Kasa" status */
        .new-form-section.kasa {
            background-color: #a2b3d4;
            border-color: #a2b3d4; /* Matching blue border */
        }

        /* Background color for "Ksiegowosc" status */
        .new-form-section.ksiegowosc {
            background-color: #d3d3d3;
            border-color: #d3d3d3; /* Matching grey border */
        }

    .fluent-grid-item {
        flex-shrink: 0; /* Prevents shrinking of elements */
    }

    .autocomplete-container {
        display: flex;
        align-items: center;
        gap: 10px; /* Adjust spacing as needed */
    }

        .autocomplete-container .fluent-autocomplete {
            display: flex;
            flex-direction: row; /* Forces label and control to align horizontally */
            align-items: center;
        }

    table {
        border-collapse: collapse; /* Optional: For a cleaner look */
        /*width: 750px; /* Optional: Adjust to fit your container */
    }

    th, td {
        padding: 5px; /* Adds padding inside each cell */
        text-align: center; /* Optional: Align text to the left */
    }

        td:first-child, th:first-child {
            padding-left: 0; /* Removes padding on the left of the first cell */
        }

   

    .info-table {
        width: 650px;
        margin-bottom: 10px;
    }

        .info-table td {
            padding: 10px;
        }

    .fluent-grid {
        display: flex;
        gap: 10px; /* Adjust the gap as needed */
    }

    .fluent-grid-item {
        display: flex;
        flex-direction: row;
        gap: 10px; /* Adjust the gap between date and time pickers */
    }

    .custom-grid-item {
        width: 150px;
    }

    .bold-label {
        font-weight: bold;
    }



    .fluent-table {
        border-collapse: collapse;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .fluent-caption {
        caption-side: top;
        text-align: left;
        font-size: 1em;
        font-weight: bold;
        padding: 5px;
        background-color: dimgrey;
        color: white;
    }

    .fluent-thead {
        background-color: lightgrey;
        color: dimgray;
    }

        .fluent-thead th {
            padding: 5px;
            text-align: left;
        }

    .fluent-row {
    }

        .fluent-row td {
            padding: 5px;
        }

        .fluent-row div {
            display: flex;
            align-items: center;
        }

            .fluent-row div FluentButton {
                margin-right: 5px;
            }

    html, body {
        height: 100%;
        margin: 0;
    }

    .page {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .bodybody {
        flex: 1; /* This makes the body content take up the remaining space */
        padding-bottom: 125px; /* Ensure content doesn't overlap the footer */
    }

    .footerfooter {
        height: 125px;
        background-color: #f1f1f1; /* Example background color */
        text-align: center; /* Center the footer content */
        line-height: 75px; /* Vertically center the text */
        position: fixed;
        bottom: 0;
        width: 100%;
    }
    .emptytemp{
        margin-top: 20px;
    }

    .disabled {
        opacity: 1 !important;
    }

    fluent-select[disabled] {
        --disabled-opacity: 0.9 !important;
    }
    fluent-combobox[disabled] {
        --disabled-opacity: 1 !important;
    }

</style>
<style>
    .all-tables-wrapper {
        display: flex;
        flex-direction: column; /* Arrange the tables vertically */
        justify-content: flex-start;
        align-items: flex-start; /* Center everything horizontally */
        gap: 20px; /* Add spacing between the groups */
    }

    .tables-wrapper {
        display: flex;
        justify-content: flex-start; /* Dynamically adjust based on content width */
        gap: 20px; /* Space between the left and right tables */
    }

    .third-table-wrapper {
        display: flex;
        justify-content: flex-start; /* Center the third table */
        width: 100%;
    }




</style>
<!--suppress CssUnresolvedCustomProperty -->
<style>
    .BillTable-container {
        max-height: 60px;
        width: 100%;
        max-width: 1000px;
        border-collapse: separate;
        border-spacing: 0;
        font-family: Arial, sans-serif;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: visible; /* Prevent content overflow */
        table-layout: fixed; /* Ensures width enforcement */
    }

        .BillTable-container th,
        .BillTable-container td {
            max-height: 60px;
            padding: 8px;
            font-size: 12px;
            border: 1px solid #ddd;
            white-space: nowrap;
            position: relative;
            overflow: visible; /* Prevents width overflow */
            text-overflow: ellipsis; /* Adds "..." for long text */
        }

        .BillTable-container thead tr:first-child th {
            color: white;
            font-weight: bold;
            text-align: center;
            padding: 8px;
        }

        .BillTable-container th:nth-child(2),
        .BillTable-container th:nth-child(3),
        .BillTable-container th:nth-child(4),
        .BillTable-container th:nth-child(6),
        .BillTable-container td:nth-child(2),
        .BillTable-container td:nth-child(3),
        .BillTable-container td:nth-child(4),
        .BillTable-container td:nth-child(6) {
            width: 120px; /* Enforce fixed column widths */
        }

    .BillTable-header-left {
        background-color: var(--accent-fill-rest);
    }

    .BillTable-header-right {
        background-color: color-mix(in srgb, white 40%, var(--accent-fill-rest) 60%);
    }

</style>
<style>
    .tableBT-wrapper {
        display: table;
        width: 100%;
    }

    .tableBT-container {
        width: 100%;
        max-width: 500px;
        border-collapse: collapse; /* Ensure no space between tables */
        font-family: Arial, sans-serif;
    }

        .tableBT-container thead tr:first-child th {

            font-weight: bold;
            text-align: center;
            padding: 8px;
        }

        .tableBT-container th, .tableBT-container td {
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ddd;
            white-space: nowrap; /* Prevent line breaks */
            overflow: hidden; /* Prevent content from spilling out */
            text-overflow: ellipsis; /* Add "..." for overflowing text */
            align-items: center; /* Vertically center content */
            justify-content: space-between; /* Push text and icon to the edges */
        }

    .tableBT-header-left {
        background-color: var(--accent-fill-rest);
    }

    .tableBT-container td {
        border-top: none; /* Remove border between tables */
    }

    .tableBT-fullwidth {
        width: 100%; /* Allow the table to stretch within the parent container */
        max-width: 500px; /* Match the max-width of the first two tables */
        margin: 0 auto; /* Center the table horizontally within the parent */
        table-layout: auto; /* Allow columns to adjust based on content */
    }

        .tableBT-fullwidth th,
        .tableBT-fullwidth td {
            white-space: nowrap; /* Keep content in a single line */
            overflow: hidden; /* Prevent content overflow */
            text-overflow: ellipsis; /* Truncate with "..." if content exceeds width */
            padding: 8px; /* Standard padding */
            text-align: center; /* Center-align text */
        }
</style>
<style>
    .validation-errors-list {
        margin: 0;
        padding-left: 20px; /* Indent the sub-list */
    }

        .validation-errors-list li {
            margin-bottom: 5px; /* Adjust spacing between lines */
            line-height: 1.2; /* Adjust line height for compactness */
        }

            .validation-errors-list li ul {
                margin-top: 2px; /* Reduce space before nested lists */
                padding-left: 15px; /* Indent nested lists */
            }
</style>
<script>
    function triggerFileUpload() {
        document.getElementById("fileInput").click();
    };
    window.logMessage = (message) => {
        console.log(message);
    };
</script>

