@page "/testforms"



@using Application.CQRS.AccountingCQRS.TestForms.Queries
@using Application.CQRS.ITWarehouseCQRS.Employees.Queries
@using Application.Forms;
@using Application.ViewModels.General
@using Microsoft.AspNetCore.Authorization
@using System.Linq.Expressions
@using System.Security.Claims

@attribute [Authorize(Policy = "Technician")]

@inject IMediator _mediator
@inject ILogger<TestFormsListPage> _logger
@inject IDialogService _dialogService
@inject IToastService _toastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager



<h3>Wnioski o odroczoną płatność</h3>

        <FluentStack Orientation="Orientation.Horizontal">
            <FluentLabel Typo="Typography.Subject"> Show columns:  </FluentLabel>
            @foreach (var column in filterColumns)
            {
                if (column.FirstRow)
                {
                    <FluentCheckbox @bind-Value="column.IsVisible" Label="@column.Label" />
                }
            }
            </FluentStack>
    <p></p>
        <FluentStack Orientation="Orientation.Horizontal">
            @foreach (var column in filterColumns)
            {
                if (!column.FirstRow)
                {
                <FluentCheckbox @bind-Value="column.IsVisible" Label="@column.Label" />
                }
            }
        </FluentStack>
    
    <FluentDataGrid Items="@filteredItems" Pagination="@pagination" TGridItem="TestFormVm" GridTemplateColumns="80px repeat(7, 1fr)" ResizableColumns="true">
       
        @foreach (var column in filterColumns.Where(c => c.IsVisible))
        {
            <PropertyColumn TGridItem="TestFormVm" TProp="string" Property="@(GetPropertyExpression(column.Property))" Sortable="true" Align="Align.Start" Tooltip="true" Title="@column.Label" Filtered="!string.IsNullOrWhiteSpace(column.Filter)">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus="true" @bind-Value="column.Filter" @oninput="(args) => HandleFilterDebounced(column, args)" Placeholder="@($"{column.Label.ToLower()}...")" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }

    @* Actions *@
    <TemplateColumn Title="Actions" Align="Align.End">

        @{
            var viewId = $"viewid-{context.Id}";
            var editId = $"editid-{context.Id}";
            var deleteId = $"deleteid-{context.Id}";
        }
        <FluentButton Id="@editId" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(() => Edit(context))" Disabled="@IsEditDisabled(context)" />
            @*WARNING it is not tested if isEditDisabled works*@
        <FluentTooltip Anchor="@editId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=50>Edit Asset</FluentTooltip>

        <FluentButton Id="@deleteId" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => Delete(context))" Disabled="@actionsDisabled" />
        <FluentTooltip Anchor="@deleteId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=50>Delete Asset</FluentTooltip>

        @*             <FluentButton Id="@addId" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddToList(context))" Disabled="@actionsDisabled" />
        <FluentTooltip Anchor="@addId" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Right Delay=50>Add Asset to update</FluentTooltip> *@

    </TemplateColumn>
    </FluentDataGrid>
    <FluentPaginator State="@pagination" />

@code {
        private IQueryable<TestFormVm> items { get; set; } = Enumerable.Empty<TestFormVm>().AsQueryable();

        private IQueryable<TestFormVm> filteredItems => items.Where(x =>
    filterColumns.All(column => string.IsNullOrWhiteSpace(column.Filter) ||
    column.Property(x).Contains(column.Filter, StringComparison.CurrentCultureIgnoreCase)));

    private DebounceDispatcher debounceDispatcher = new DebounceDispatcher();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private List<FilterColumn<TestFormVm>> filterColumns = new List<FilterColumn<TestFormVm>>
    {
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "ID", Property = c => c.Id.ToString(), IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Numer", Property = c => c.Number.ToString()??string.Empty, IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Status", Property = c => c.Status.ToString()??string.Empty, IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Nr kontr.", Property = c => c.KontrahentId.ToString(), IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Nazwa kontr.", Property = c => c.KontrahentName.ToString(), IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Uzasadnienie", Property = c => c.Note.ToString(), IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Zgłaszający", Property = c =>(c.EmployeeName.ToString()??string.Empty), IsVisible = true },
        new FilterColumn<TestFormVm> { FirstRow = true, Label = "Data", Property = c => c.Requested.ToString(), IsVisible = true }
    };

    private ClaimsPrincipal? user { get; set; }
    private string username { get; set; }
    private EmployeeVm employee { get; set; }
    private string EmplEnovaEmpId { get; set; }

    private bool actionsDisabled = false;


    protected override async Task OnInitializedAsync()
    {
        await GetUserName();
        await Load();
    }

    private async Task Load()
    {

        // var deferralForms = await _mediator.Send(new GetDeferralPaymentByApproverQuery(EnovaEmpId));
            var testForms = await _mediator.Send(new GetAllTestFormsQuery());
            Console.WriteLine(testForms.Count());
            Console.WriteLine(testForms.Count());
            items = testForms.AsQueryable();
    }

    private void HandleClearFilter(ref string filter) => filter = string.IsNullOrWhiteSpace(filter) ? string.Empty : filter;

    private void HandleFilterDebounced(FilterColumn<TestFormVm> column, ChangeEventArgs args)
    {
        debounceDispatcher.Debounce(300, _ =>
        {
            column.Filter = args.Value.ToString();
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task GetUserName()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;

        var claimType = "name"; // or use ClaimTypes.Title
        var usernameClaim = user.Claims.FirstOrDefault(c => c.Type == claimType);
        if (usernameClaim != null)
        {
            username = usernameClaim.Value;
            Console.WriteLine($"Claim of type {claimType} found, value {username}.");
        }
        else
        {
            username = "unknown";
            Console.WriteLine($"No claim of type {claimType} found.");
        }

        claimType = "EnovaEmpId"; // or use ClaimTypes.Title
        var EnovaEmpIdClaim = user.Claims.FirstOrDefault(c => c.Type == claimType);
        if (EnovaEmpIdClaim != null)
        {
            EmplEnovaEmpId = EnovaEmpIdClaim.Value;
            employee = await _mediator.Send(new GetEmployeeByEnovaIdQuery(int.Parse(EmplEnovaEmpId)));
            Console.WriteLine($"Claim of type {claimType} found, value {EmplEnovaEmpId}.");
        }
        else
        {
            EmplEnovaEmpId = "unknown";
            Console.WriteLine($"No claim of type {claimType} found.");
        }

    }

    private Expression<Func<TestFormVm, string>> GetPropertyExpression(Func<TestFormVm, string> propertyFunc) 
    {
        return x => propertyFunc(x);
    }
  
    private async Task Edit(TestFormVm item = null)
    {
        _navigationManager.NavigateTo($"/testformedit/{item.Id}");
    }
    private async Task Delete(TestFormVm item = null)
    {
        
    }

    private bool IsEditDisabled(TestFormVm context)
    {
        if (context.Status == "AprobataL1")
        {
            return !(context.LVL1_EnovaEmpId == EmplEnovaEmpId);
            // return !context.Level1Approvers.Any(approver => approver.EmpId.ToString() == EnovaEmpId);
        }
        if (context.Status == "AprobataL2")
        {
            return !context.Level2Approvers.Any(approver => approver.EmpId.ToString() == EmplEnovaEmpId);
        }
        return true; // Default to disabled if none of the conditions match
    }

    // private async Task Edit(TestFormVm item = null)
    // {
    //     ToastIntent intent;
    //     string message = string.Empty;
    //     int i = 0;
    //     bool isNew = item == null;

    //     // if (isNew)
    //     // {
    //     //     item = new TestFormVm
    //     //         {
    //     //             Role_ServiceManager = new List<OrganisationRoleVm> { new OrganisationRoleVm() },
    //     //             Role_SalesManager = new List<OrganisationRoleVm> { new OrganisationRoleVm() },
    //     //             Role_DealerDirector = new List<OrganisationRoleVm> { new OrganisationRoleVm() },
    //     //             Role_RegionDirector = new List<OrganisationRoleVm> { new OrganisationRoleVm() }
    //     //         };
    //     // }

    //     _logger.LogInformation("Organisations | Edit(item) | Opening dialog...");

    //     var dialog = await _dialogService.ShowDialogAsync<DeferralPaymentEditComponent>(item.Id, new DialogParameters()
    //         {
    //             Height = "750px",
    //             Width = "800px",
    //             Title = item.Id > 0 ? "Update Organisation..." : "Create new Organisation...",
    //             PreventDismissOnOverlayClick = true,
    //             PreventScroll = false,
    //         });

    //     _logger.LogInformation("Organisations | Edit(item) | Dialog Closed...");
    //     actionsDisabled = true;
    //     var result = await dialog.Result;

    //     if (!result.Cancelled && result.Data != null)
    //     {
    //         var final = (TestFormVm)result.Data;

    //         if (final.Id > 0)
    //         {
    //             _logger.LogInformation("TestFormVm | Edit(item) | Update TestFormVm start...");
    //             var itemVm = await _mediator.Send(new UpdateDeferralPaymentCommand(final));
    //             _logger.LogInformation("TestFormVm | Edit(item) | Update TestFormVm finished...");
    //             intent = ToastIntent.Success;
    //             message = "TestFormVm has been updated!";
    //         }
    //         else
    //         {
    //             _logger.LogInformation("Organisations | Edit(item)| Create Organisation start...");
    //             var itemVm = await _mediator.Send(new CreateDeferralPaymentCommand(final));
    //             _logger.LogInformation("Organisations | Edit(item) | Create Organisation finished...");
    //             intent = ToastIntent.Success;
    //             message = "Organisation has been created!";
    //         }
    //         await Load();
    //     }
    //     else if (result.Cancelled)
    //     {
    //         intent = ToastIntent.Info;
    //         message = "Operation Cancelled...";
    //     }
    //     else
    //     {
    //         intent = ToastIntent.Error;
    //         message = "Something went wrong!";
    //     }

    //     _toastService.ShowToast(intent, message, 3000);
    //     actionsDisabled = false;
    // }

    // private async Task Delete(TestFormVm item)
    // {

    //     var dialog = await _dialogService.ShowConfirmationAsync("You are about to delete Organisation: " + item.SapNumber + "\n Are you sure?", "Yes", "No", "Confirm delete operation");
    //     var result = await dialog.Result;
    //     deleteConfirm = result.Cancelled;

    //     ToastIntent intent;
    //     string message = string.Empty;

    //     if (deleteConfirm)
    //     {
    //         Console.WriteLine();
    //         intent = ToastIntent.Error;
    //         message = "Asset has not been deleted";

    //     }
    //     else
    //     {
    //         Console.WriteLine();
    //         var i = await _mediator.Send(new DeleteOrganisationCommand(item.Id));
    //         // var i = await _mediator.Send(new (item.Id));
    //         intent = ToastIntent.Success;
    //         message = "Asset has been deleted";

    //     }

    //     _toastService.ShowToast(intent, message, 3000);
    //     Load();
    // }
}
