@implements IDialogContentComponent<string>

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>



<FluentDialogBody>
    <EditForm EditContext="@_editContext">
        
        <FluentTextArea style="width: 100%;" @bind-Value="@Content" Placeholder="podaj powód odrzucenia..."></FluentTextArea>
            @if (!string.IsNullOrEmpty(message))
            { <p></p>
                <div class="validation-error"><p style="color:red;">@message</p></div>
            }
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton IconEnd="@(new Icons.Regular.Size16.Globe())"
                  Appearance="Appearance.Accent" OnClick="() => SaveAsync()" BackgroundColor="#C21E56" Color="#FFFFFF" Style="width: 100px">
        Odrzuć
    </FluentButton>

    <FluentButton IconEnd="@(new Icons.Regular.Size16.Globe())"
                  Appearance="Appearance.Accent" OnClick="() => CancelAsync()" BackgroundColor="#808080" Color="#FFFFFF" Style="width: 100px">
        Anuluj
    </FluentButton>
</FluentDialogFooter>




@code {

    [Parameter]
    public string Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private EditContext _editContext = default!;
    private string message = string.Empty;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (Content == "")
        {
            message = "* wymagane podanie powodu odrzucenia";
            return;
        } else
        {
            await Dialog.CloseAsync(Content);
        }
        
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
