@page "/kontrahent_change_db/{id:int}"

@using Application.Interfaces
@using Application.ViewModels.Accounting
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@inject IAsDbContext _asdbctx
@inject IMapper _mapper

<h3>Kontrahent - odroczona płatność</h3>

@if (kontrahent == null)
{
    @* <FluentProgressRing>Loading...</FluentProgressRing> *@
    <b>@messageMissing</b>
}
else if (message != null)
{
    <b>@message</b>
    <div>
        <p>ID: @kontrahent.KontrahentId</p>
        <p>Nazwa: @kontrahent.Nazwa</p>
        <p>Nip: @kontrahent.Nip</p>
        <p>Odroczona płatność: @(kontrahent.Przelew ? "włączona" : "wyłączona")</p>
    </div>
} else
{
    <div>
        <p>ID: @kontrahent.KontrahentId</p>
        <p>Nazwa: @kontrahent.Nazwa</p>
        <p>Nip: @kontrahent.Nip</p>
        <p>Odroczona płatność: @(kontrahent.Przelew ? "włączona" : "wyłączona")</p>
        <FluentButton @onclick="TogglePrzelew">Change</FluentButton>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private string message { get; set; }
    private string messageMissing { get; set; }
    private bool showCustomer { get; set; }
    private CustomerVm kontrahent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadKontrahent();
    }

    private async Task LoadKontrahent()
    {
        try
        {
            var kontrahentEntity = await _asdbctx.v_KONTRAHENCI_LISTA.Where(k => k.KontrahentId == Id).FirstOrDefaultAsync();
            if (kontrahentEntity != null)
            {
                showCustomer = true;
                kontrahent = _mapper.Map<CustomerVm>(kontrahentEntity);
                if (kontrahent.Przelew)
                {
                    message = $"Kontrahentowi {kontrahent.KontrahentId} | {kontrahent.Nazwa} można wystawić dokument na odroczoną płatność!";
                }
            } else
            {
                messageMissing = $"Customer o numerze {Id} nie ma otwartych dokumentów do których można wystawić dokument z odroczoną płatnością!";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading kontrahent: {ex.Message}");
        }

    
    }

    private async Task TogglePrzelew()
    {
        if (kontrahent != null)
        {
            // await _asdbctx.ExecuteSqlRawAsync("EXEC kontrahent_przelew @p0, @p1", Id, !kontrahent.Przelew);
            kontrahent.Przelew = !kontrahent.Przelew;
            StateHasChanged();
            // await LoadKontrahent(); 
        }
    }
}
