@using Application.CQRS.ITToolsCQRS.LicenceAutoStacja.Queries
@using Application.ViewModels.AutoStacja

@inject IMediator _mediator

<h3>Sprawdzenie punktów licencji</h3>

<EditForm EditContext="_context">
    <DataAnnotationsValidator />
    <FluentTextField @bind-Value="Content.Nazwa" Label="Nazwa licencji"></FluentTextField>
    <FluentValidationMessage For="@(() => Content.Nazwa)" />
    <div>
        <FluentButton Appearance="Appearance.Accent" OnClick="@PrintLicense">Sprawdź przypisanie</FluentButton>
    </div>
</EditForm>
<hr style="width: 830px;" />
@if (isLoading)
{
    <div style="margin-top: 1rem;">
        <FluentProgressRing />
    </div>
}
else if (!string.IsNullOrEmpty(LicenseList))
{
    <div>
        <h4>Licencja <b>@Content.Nazwa</b> może przełączyć się do:</h4>
        @foreach (var licence in LicenseList.Split('\n', StringSplitOptions.RemoveEmptyEntries))
        {
            <div>@licence<br /></div>
        }
    </div>
}

@code {
    private MysystemPunktLicenceVm Content { get; set; } = new MysystemPunktLicenceVm();
    private EditContext _context;
    private string LicenseList { get; set; }
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        _context = new EditContext(Content);
    }

    private async Task PrintLicense()
    {
        Content.Nazwa = Content.Nazwa?.Trim().ToUpper();
        if (_context.Validate())
        {
            isLoading = true;
            StateHasChanged();
            try
            {
                LicenseList = await _mediator.Send(new GetLicenseConnectionsQuery(@Content.Nazwa));
                // Wyświetl informację
                //Console.WriteLine($"Licencja {Content.Nazwa} może przełączyć się do: \n\n{LicenseList}");
                if (string.IsNullOrEmpty(LicenseList))
                {
                    LicenseList = "Nie ma dopisanych innych punktów do tej licencji";
                }
            }
            catch (Exception ex)
            {
                // Obsłuż błąd
                //Console.WriteLine($"Błąd: {ex.Message}");
                LicenseList = $"Błąd: {ex.Message}";
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
        else
        {
            //Console.WriteLine("EditContext Validation NOT OK!...");
        }
    }
}