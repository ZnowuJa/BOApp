name: BOAppCICD

trigger:
  none

# trigger:
#   branches:
#     include:
#       - master

pool:
  vmImage: 'windows-2022'
  timeoutInMinutes: 60

variables:
  - group: DeployBOApp

resources:
  pipelines:
    - pipeline: 'buildPipeline'
      project: 'BackOfficeApp'
      source: 'BOApp_BuildPipeline'
      branch: 'master'
      
stages:
  - stage: Build
    jobs:
      - job: SetSkipVariable
        steps:
          - task: NuGetToolInstaller@1
            name: 'NugetToolInstaller'
            displayName: 'Nuget Tool Installer'

          - task: NuGetCommand@2
            name: 'NugetRestore'
            displayName: 'Nuget Restore'
            inputs:
              command: 'restore'
              restoreSolution: '$(solution)'
              feedsToUse: 'select'

          - task: PowerShell@2
            name: SetVars
            displayName: 'Set Variable to Skip Stages'
            inputs:
              targetType: 'inline'
              script: |
                function GenerateDEVArtifact {
                    $appSettings = Get-Content $appSettingsPath -Raw | ConvertFrom-Json
                    $appSettings.ConnectionStrings.AppDbContextConnection = "Data Source=plwawq04n;Initial Catalog=BackOfficeAppDev;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False"
                    $appSettings.ConnectionStrings.AsDbContextConnection = "Data Source=plwawq01n;Initial Catalog=PIADMS;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False"
                    $appSettings.BaseUrl = "https://plwaws86dev"
                    $appSettings | ConvertTo-Json -Depth 32 | Set-Content $appSettingsPath
                    Write-Host "DEV artifact generated and appsettings updated."
                    dotnet publish -c Release -o "$(Build.ArtifactStagingDirectory)\DEV"
                }

                function GeneratePRODArtifact {
                    $appSettings = Get-Content $appSettingsPath -Raw | ConvertFrom-Json
                    $appSettings.ConnectionStrings.AppDbContextConnection = "Data Source=plwawq04n;Initial Catalog=BackOfficeAppProd;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False"
                    $appSettings.ConnectionStrings.AsDbContextConnection = "Data Source=plwawq01n;Initial Catalog=PIADMS;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False"
                    $appSettings.BaseUrl = "https://plwaws86"
                    $appSettings | ConvertTo-Json -Depth 32 | Set-Content $appSettingsPath
                    Write-Host "PROD artifact generated and appsettings updated."
                    dotnet publish -c Release -o "$(Build.ArtifactStagingDirectory)\PROD"
                }

                function UpdateVariables {
                    try {
                        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$(pat)"))
                        Write-Host "Base64 for pat: $base64AuthInfo"
                    } catch {
                        Write-Host "Base64 for pat: to nie dziala"
                    }

                    $uri = "https://dev.azure.com/piapl-azb/BackOfficeApp/_apis/distributedtask/variablegroups/3?version=6.0-preview.2"
                    try {
                        $response = Invoke-RestMethod -Uri $uri -Method Get -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
                    } catch {
                        Write-Host "Error getting variable group: $_"
                        throw
                    }
                    $response.variables.$variableName.value = $newValue
                    $body = $response | ConvertTo-Json -Depth 10
                    try {
                        Invoke-RestMethod -Uri $uri -Method Put -Headers @{
                            Authorization=("Basic {0}" -f $base64AuthInfo)
                            "Content-Type"="application/json"
                            "Accept"="application/json; api-version=$(apiVersion)"
                        } -Body $body
                    } catch {
                        Write-Host "Error updating variable group: $_"
                        throw
                    }
                }

                $variableName = "EnvName"
                $newValue = "testit"
                $commitId = git rev-parse --short HEAD
                $appSettingsPath = "$(Build.SourcesDirectory)\BOAppFluentUI\appsettings.json"
                if (Test-Path $appSettingsPath) {
                    $appSettings = Get-Content $appSettingsPath -Raw | ConvertFrom-Json
                    $environment = $appSettings.Environment
                    Write-Host "Environment variable: $environment"
                    if ($environment -eq "DEV") {
                        GenerateDEVArtifact -appSettingsPath $appSettingsPath
                        $newValue = "DEV"
                    } elseif ($environment -eq "PROD") {
                        GeneratePRODArtifact -appSettingsPath $appSettingsPath
                        $newValue = "PROD"
                    } elseif ($environment -eq "BOTH") {
                        GenerateDEVArtifact -appSettingsPath $appSettingsPath
                        GeneratePRODArtifact -appSettingsPath $appSettingsPath
                        $newValue = "BOTH"
                    }
                    UpdateVariables -variableName $variableName -newValue $newValue -pat $(pat)
                    Write-Host "AppVersion and ConnectionStrings updated successfully. $newValue"
                } else {
                    Write-Error "appsettings.json file not found at path: $appSettingsPath"
                }

          - task: DotNetCoreCLI@2
            name: 'PublishDEV'
            displayName: 'Publish DEV'
            condition: and(succeeded(), in(variables['EnvName'], 'DEV', 'BOTH'))
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(project)'
              arguments: '--configuration $(builtConfiguration) --output $(Build.ArtifactStagingDirectory)\DEV'
              zipAfterPublish: false

          - task: DotNetCoreCLI@2
            name: 'PublishPROD'
            displayName: 'Publish PROD'
            condition: and(succeeded(), in(variables['EnvName'], 'PROD', 'BOTH'))
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(project)'
              arguments: '--configuration $(builtConfiguration) --output $(Build.ArtifactStagingDirectory)\PROD'
              zipAfterPublish: false

          - task: PublishBuildArtifacts@1
            name: 'PublishArtifactDEV'
            displayName: 'Publish Artifact DEV'
            condition: and(succeeded(), in(variables['EnvName'], 'DEV', 'BOTH'))
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DEV'
              ArtifactName: 'BoAppProjectDEV'
              publishLocation: 'Container'

          - task: PublishBuildArtifacts@1
            name: 'PublishArtifactPROD'
            displayName: 'Publish Artifact PROD'
            condition: and(succeeded(), in(variables['EnvName'], 'PROD', 'BOTH'))
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\PROD'
              ArtifactName: 'BoAppProjectPROD'
              publishLocation: 'Container'

  - stage: Deploy2DEV
    displayName: 'Deploy to DEV'
    dependsOn: Build
    condition: in(variables['EnvName'], 'DEV', 'BOTH')
    jobs:
      - deployment: DeployWebApp2DEV
        displayName: 'DeployWebApp2DEV'
        environment: 'PLWAWS86DEV.PLWAWS86DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none
                - task: PowerShell@2
                  displayName: 'List Artifacts'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Write-Host "Listing artifacts in the pipeline workspace:"
                      Get-ChildItem -Path "$(Pipeline.Workspace)/buildPipeline" -Recurse

                - task: DownloadPipelineArtifact@2
                  name: 'DownloadArtifacts'
                  displayName: 'Download Artifacts'
                  inputs:
                    ArtifactName: 'BoAppProjectDEV'
                    targetPath: '$(Pipeline.Workspace)/buildPipeline'              
                - task: IISWebAppManagementOnMachineGroup@0
                  name: 'StopIIS'
                  displayName: 'Stop IIS'
                  inputs:
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'StopWebsite'
                    StartStopWebsiteName: '$(IISWebsiteName)'
                - task: IISWebAppDeploymentOnMachineGroup@0
                  name: 'DeployApp'
                  displayName: 'Deploy App'
                  inputs:
                    WebSiteName: '$(IISWebsiteName)'
                    Package: '$(Pipeline.Workspace)/buildPipeline/BOAppFluentUI'
                    TakeAppOfflineFlag: true
                - task: IISWebAppManagementOnMachineGroup@0
                  name: 'StartApp'
                  displayName: 'Start App'
                  inputs:
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'StartWebsite'
                    StartStopWebsiteName: '$(IISWebsiteName)'
  - stage: Deploy2PROD
    displayName: 'Deploy to PROD'
    dependsOn: Build
    condition: in(variables['EnvName'], 'PROD', 'BOTH')
    jobs:
      - deployment: DeployWebApp2PROD
        displayName: 'DeployWebApp2PROD'
        environment: 'PLWAWS86.PLWAWS86'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none
                - task: DownloadPipelineArtifact@2
                  name: 'DownloadArtifacts'
                  displayName: 'Download Artifacts'
                  inputs:
                    ArtifactName: 'BoAppProjectPROD'
                    targetPath: '$(Pipeline.Workspace)/buildPipeline'
                - task: IISWebAppManagementOnMachineGroup@0
                  name: 'StopIIS'
                  displayName: 'Stop IIS'
                  inputs:
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'StopWebsite'
                    StartStopWebsiteName: '$(IISWebsiteName)'
                - task: IISWebAppDeploymentOnMachineGroup@0
                  name: 'DeployApp'
                  displayName: 'Deploy App'
                  inputs:
                    WebSiteName: '$(IISWebsiteName)'
                    Package: '$(Pipeline.Workspace)/buildPipeline/BOAppFluentUI'
                    TakeAppOfflineFlag: true
                - task: IISWebAppManagementOnMachineGroup@0
                  name: 'StartApp'
                  displayName: 'Start App'
                  inputs:
                    IISDeploymentType: 'IISWebsite'
                    ActionIISWebsite: 'StartWebsite'
                    StartStopWebsiteName: '$(IISWebsiteName)'